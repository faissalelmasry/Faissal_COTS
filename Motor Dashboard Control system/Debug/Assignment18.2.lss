
Assignment18.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000453c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  0000453c  000045d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800170  00800170  000046e0  2**0
                  ALLOC
  3 .stab         00003ca8  00000000  00000000  000046e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001470  00000000  00000000  00008388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000097f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d779  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__vector_1>
       8:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__vector_2>
       c:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <main>
      8a:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e3       	ldi	r26, 0x38	; 56
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e3       	ldi	r24, 0x38	; 56
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

static void voidSendEnablePulse(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	63 e0       	ldi	r22, 0x03	; 3
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e4       	ldi	r27, 0x40	; 64
     b6c:	8b 87       	std	Y+11, r24	; 0x0b
     b6e:	9c 87       	std	Y+12, r25	; 0x0c
     b70:	ad 87       	std	Y+13, r26	; 0x0d
     b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	6b 85       	ldd	r22, Y+11	; 0x0b
     b76:	7c 85       	ldd	r23, Y+12	; 0x0c
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a e7       	ldi	r20, 0x7A	; 122
     b82:	55 e4       	ldi	r21, 0x45	; 69
     b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	8f 83       	std	Y+7, r24	; 0x07
     b8e:	98 87       	std	Y+8, r25	; 0x08
     b90:	a9 87       	std	Y+9, r26	; 0x09
     b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	2c f4       	brge	.+10     	; 0xbb6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	8d 83       	std	Y+5, r24	; 0x05
     bb4:	3f c0       	rjmp	.+126    	; 0xc34 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bca:	18 16       	cp	r1, r24
     bcc:	4c f5       	brge	.+82     	; 0xc20 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <voidSendEnablePulse+0xd0>
     bf8:	80 e9       	ldi	r24, 0x90	; 144
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <voidSendEnablePulse+0xbe>
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <voidSendEnablePulse+0xb2>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	78 85       	ldd	r23, Y+8	; 0x08
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <voidSendEnablePulse+0xfa>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	63 e0       	ldi	r22, 0x03	; 3
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
}
     c52:	2e 96       	adiw	r28, 0x0e	; 14
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	98 2f       	mov	r25, r24
     c74:	91 70       	andi	r25, 0x01	; 1
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	64 e0       	ldi	r22, 0x04	; 4
     c7a:	49 2f       	mov	r20, r25
     c7c:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	86 95       	lsr	r24
     c84:	98 2f       	mov	r25, r24
     c86:	91 70       	andi	r25, 0x01	; 1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	65 e0       	ldi	r22, 0x05	; 5
     c8c:	49 2f       	mov	r20, r25
     c8e:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	86 95       	lsr	r24
     c96:	86 95       	lsr	r24
     c98:	98 2f       	mov	r25, r24
     c9a:	91 70       	andi	r25, 0x01	; 1
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	66 e0       	ldi	r22, 0x06	; 6
     ca0:	49 2f       	mov	r20, r25
     ca2:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	86 95       	lsr	r24
     caa:	86 95       	lsr	r24
     cac:	86 95       	lsr	r24
     cae:	98 2f       	mov	r25, r24
     cb0:	91 70       	andi	r25, 0x01	; 1
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	67 e0       	ldi	r22, 0x07	; 7
     cb6:	49 2f       	mov	r20, r25
     cb8:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
}
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendComd>:

void CLCD_voidSendComd(uint8 Copy_Cmd)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    #if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
	/*set command at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_Cmd);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Cmd>>4);
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	82 95       	swap	r24
     ce8:	8f 70       	andi	r24, 0x0F	; 15
     cea:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cee:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Cmd);
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cf8:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	#endif
}
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_Data)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
	#if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
	/*set data at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_Data);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Data>>4);
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	82 95       	swap	r24
     d28:	8f 70       	andi	r24, 0x0F	; 15
     d2a:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Data);
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d38:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	#endif

}
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <CLCD_voidInit>:

void CLCD_voidInit(void) /*from datasheet*/
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	2e 97       	sbiw	r28, 0x0e	; 14
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a0 e2       	ldi	r26, 0x20	; 32
     d5e:	b2 e4       	ldi	r27, 0x42	; 66
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a e7       	ldi	r20, 0x7A	; 122
     d76:	55 e4       	ldi	r21, 0x45	; 69
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <CLCD_voidInit+0x66>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <CLCD_voidInit+0xc6>
     dec:	80 e9       	ldi	r24, 0x90	; 144
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <CLCD_voidInit+0xb4>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <CLCD_voidInit+0xa8>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <CLCD_voidInit+0xf0>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*function set command: 2lines(DB3 high) and small font(DB2 low)*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	CLCD_voidSendComd(0b00111000);
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e42:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e50:	88 e0       	ldi	r24, 0x08	; 8
     e52:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e56:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	#endif

	/*display on/off control command: display enable(DB2 high),cursor(DB1 low),blink(DB0 low)*/
	CLCD_voidSendComd(0b00001100);
     e5a:	8c e0       	ldi	r24, 0x0C	; 12
     e5c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
	/*display clear command*/
	CLCD_voidSendComd(0b00000001);
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
	
}
     e66:	2e 96       	adiw	r28, 0x0e	; 14
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <CLCD_u8SendString>:
uint8 CLCD_u8SendString(char Copy_chstring[])
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <CLCD_u8SendString+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <CLCD_u8SendString+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8StateError=OK;
     e88:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	e1 f0       	breq	.+56     	; 0xeca <CLCD_u8SendString+0x52>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     e92:	19 82       	std	Y+1, r1	; 0x01
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <CLCD_u8SendString+0x3a>
	{
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	fc 01       	movw	r30, r24
     ea2:	e2 0f       	add	r30, r18
     ea4:	f3 1f       	adc	r31, r19
     ea6:	80 81       	ld	r24, Z
     ea8:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
uint8 CLCD_u8SendString(char Copy_chstring[])
{
	uint8 Local_u8StateError=OK;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	fc 01       	movw	r30, r24
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	80 81       	ld	r24, Z
     ec4:	88 23       	and	r24, r24
     ec6:	39 f7       	brne	.-50     	; 0xe96 <CLCD_u8SendString+0x1e>
     ec8:	02 c0       	rjmp	.+4      	; 0xece <CLCD_u8SendString+0x56>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8StateError;
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	61 97       	sbiw	r28, 0x11	; 17
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	6e 87       	std	Y+14, r22	; 0x0e
     ef4:	7f 87       	std	Y+15, r23	; 0x0f
     ef6:	88 8b       	std	Y+16, r24	; 0x10
     ef8:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chArray[10];
	sint8 Local_s8Remainder,Local_s8ArrayIndex=0;
     efa:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_s32Number==0)
     efc:	8e 85       	ldd	r24, Y+14	; 0x0e
     efe:	9f 85       	ldd	r25, Y+15	; 0x0f
     f00:	a8 89       	ldd	r26, Y+16	; 0x10
     f02:	b9 89       	ldd	r27, Y+17	; 0x11
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	a1 05       	cpc	r26, r1
     f08:	b1 05       	cpc	r27, r1
     f0a:	21 f4       	brne	.+8      	; 0xf14 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData(48);
     f0c:	80 e3       	ldi	r24, 0x30	; 48
     f0e:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
     f12:	86 c0       	rjmp	.+268    	; 0x1020 <CLCD_voidSendNumber+0x142>
	}
	else if(Copy_s32Number>0)
     f14:	8e 85       	ldd	r24, Y+14	; 0x0e
     f16:	9f 85       	ldd	r25, Y+15	; 0x0f
     f18:	a8 89       	ldd	r26, Y+16	; 0x10
     f1a:	b9 89       	ldd	r27, Y+17	; 0x11
     f1c:	18 16       	cp	r1, r24
     f1e:	19 06       	cpc	r1, r25
     f20:	1a 06       	cpc	r1, r26
     f22:	1b 06       	cpc	r1, r27
     f24:	d4 f5       	brge	.+116    	; 0xf9a <CLCD_voidSendNumber+0xbc>
     f26:	30 c0       	rjmp	.+96     	; 0xf88 <CLCD_voidSendNumber+0xaa>
	{
	while(Copy_s32Number!=0)
	{
		Local_s8Remainder=Copy_s32Number%10;
     f28:	8e 85       	ldd	r24, Y+14	; 0x0e
     f2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f2c:	a8 89       	ldd	r26, Y+16	; 0x10
     f2e:	b9 89       	ldd	r27, Y+17	; 0x11
     f30:	2a e0       	ldi	r18, 0x0A	; 10
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 4a 22 	call	0x4494	; 0x4494 <__divmodsi4>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8b 83       	std	Y+3, r24	; 0x03
		Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	33 27       	eor	r19, r19
     f4c:	27 fd       	sbrc	r18, 7
     f4e:	30 95       	com	r19
     f50:	4b 81       	ldd	r20, Y+3	; 0x03
     f52:	ce 01       	movw	r24, r28
     f54:	04 96       	adiw	r24, 0x04	; 4
     f56:	fc 01       	movw	r30, r24
     f58:	e2 0f       	add	r30, r18
     f5a:	f3 1f       	adc	r31, r19
     f5c:	40 83       	st	Z, r20
		Local_s8ArrayIndex++;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number/=10;
     f64:	8e 85       	ldd	r24, Y+14	; 0x0e
     f66:	9f 85       	ldd	r25, Y+15	; 0x0f
     f68:	a8 89       	ldd	r26, Y+16	; 0x10
     f6a:	b9 89       	ldd	r27, Y+17	; 0x11
     f6c:	2a e0       	ldi	r18, 0x0A	; 10
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 4a 22 	call	0x4494	; 0x4494 <__divmodsi4>
     f7c:	da 01       	movw	r26, r20
     f7e:	c9 01       	movw	r24, r18
     f80:	8e 87       	std	Y+14, r24	; 0x0e
     f82:	9f 87       	std	Y+15, r25	; 0x0f
     f84:	a8 8b       	std	Y+16, r26	; 0x10
     f86:	b9 8b       	std	Y+17, r27	; 0x11
	{
		CLCD_voidSendData(48);
	}
	else if(Copy_s32Number>0)
	{
	while(Copy_s32Number!=0)
     f88:	8e 85       	ldd	r24, Y+14	; 0x0e
     f8a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f8c:	a8 89       	ldd	r26, Y+16	; 0x10
     f8e:	b9 89       	ldd	r27, Y+17	; 0x11
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	a1 05       	cpc	r26, r1
     f94:	b1 05       	cpc	r27, r1
     f96:	41 f6       	brne	.-112    	; 0xf28 <CLCD_voidSendNumber+0x4a>
     f98:	43 c0       	rjmp	.+134    	; 0x1020 <CLCD_voidSendNumber+0x142>
		Copy_s32Number/=10;
	}
	}
	else
	{
		CLCD_voidSendData('-');
     f9a:	8d e2       	ldi	r24, 0x2D	; 45
     f9c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
     fa0:	37 c0       	rjmp	.+110    	; 0x1010 <CLCD_voidSendNumber+0x132>
		while(Copy_s32Number!=0)
		{
			Local_s8Remainder=-Copy_s32Number%10;
     fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa6:	a8 89       	ldd	r26, Y+16	; 0x10
     fa8:	b9 89       	ldd	r27, Y+17	; 0x11
     faa:	b0 95       	com	r27
     fac:	a0 95       	com	r26
     fae:	90 95       	com	r25
     fb0:	81 95       	neg	r24
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	af 4f       	sbci	r26, 0xFF	; 255
     fb6:	bf 4f       	sbci	r27, 0xFF	; 255
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 4a 22 	call	0x4494	; 0x4494 <__divmodsi4>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8b 83       	std	Y+3, r24	; 0x03
			Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	33 27       	eor	r19, r19
     fd4:	27 fd       	sbrc	r18, 7
     fd6:	30 95       	com	r19
     fd8:	4b 81       	ldd	r20, Y+3	; 0x03
     fda:	ce 01       	movw	r24, r28
     fdc:	04 96       	adiw	r24, 0x04	; 4
     fde:	fc 01       	movw	r30, r24
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	40 83       	st	Z, r20
			Local_s8ArrayIndex++;
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	8a 83       	std	Y+2, r24	; 0x02
			Copy_s32Number/=10;
     fec:	8e 85       	ldd	r24, Y+14	; 0x0e
     fee:	9f 85       	ldd	r25, Y+15	; 0x0f
     ff0:	a8 89       	ldd	r26, Y+16	; 0x10
     ff2:	b9 89       	ldd	r27, Y+17	; 0x11
     ff4:	2a e0       	ldi	r18, 0x0A	; 10
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 4a 22 	call	0x4494	; 0x4494 <__divmodsi4>
    1004:	da 01       	movw	r26, r20
    1006:	c9 01       	movw	r24, r18
    1008:	8e 87       	std	Y+14, r24	; 0x0e
    100a:	9f 87       	std	Y+15, r25	; 0x0f
    100c:	a8 8b       	std	Y+16, r26	; 0x10
    100e:	b9 8b       	std	Y+17, r27	; 0x11
	}
	}
	else
	{
		CLCD_voidSendData('-');
		while(Copy_s32Number!=0)
    1010:	8e 85       	ldd	r24, Y+14	; 0x0e
    1012:	9f 85       	ldd	r25, Y+15	; 0x0f
    1014:	a8 89       	ldd	r26, Y+16	; 0x10
    1016:	b9 89       	ldd	r27, Y+17	; 0x11
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	a1 05       	cpc	r26, r1
    101c:	b1 05       	cpc	r27, r1
    101e:	09 f6       	brne	.-126    	; 0xfa2 <CLCD_voidSendNumber+0xc4>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	81 50       	subi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	11 c0       	rjmp	.+34     	; 0x104a <CLCD_voidSendNumber+0x16c>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	33 27       	eor	r19, r19
    102e:	27 fd       	sbrc	r18, 7
    1030:	30 95       	com	r19
    1032:	ce 01       	movw	r24, r28
    1034:	04 96       	adiw	r24, 0x04	; 4
    1036:	fc 01       	movw	r30, r24
    1038:	e2 0f       	add	r30, r18
    103a:	f3 1f       	adc	r31, r19
    103c:	80 81       	ld	r24, Z
    103e:	80 5d       	subi	r24, 0xD0	; 208
    1040:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	81 50       	subi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 23       	and	r24, r24
    104e:	64 f7       	brge	.-40     	; 0x1028 <CLCD_voidSendNumber+0x14a>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
	}
	}
}
    1050:	61 96       	adiw	r28, 0x11	; 17
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <CLCD_voidGoToXY+0x6>
    1068:	0f 92       	push	r0
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	8a 83       	std	Y+2, r24	; 0x02
    1070:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRAMAdd;
	if(Copy_u8YPos==0u)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	88 23       	and	r24, r24
    1076:	19 f4       	brne	.+6      	; 0x107e <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAMAdd=Copy_u8XPos;
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	06 c0       	rjmp	.+12     	; 0x108a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos==1u)
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	19 f4       	brne	.+6      	; 0x108a <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRAMAdd=Copy_u8XPos+0x40;
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 5c       	subi	r24, 0xC0	; 192
    1088:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRAMAdd|=1<<7;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendComd(Local_u8DDRAMAdd);
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <CLCD_u8SinWaveSendString>:
uint8 CLCD_u8SinWaveSendString(char Copy_chstring[])
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <CLCD_u8SinWaveSendString+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <CLCD_u8SinWaveSendString+0x8>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <CLCD_u8SinWaveSendString+0xa>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Local_u8StateError=OK;
    10b4:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_u8XCoordinate=0;
    10b6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8YCoordinate=0;
    10b8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	51 f1       	breq	.+84     	; 0x1116 <CLCD_u8SinWaveSendString+0x74>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	1c c0       	rjmp	.+56     	; 0x10fe <CLCD_u8SinWaveSendString+0x5c>
	{
		CLCD_voidGoToXY(Local_u8XCoordinate,Local_u8YCoordinate);
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	6a 81       	ldd	r22, Y+2	; 0x02
    10ca:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	fc 01       	movw	r30, r24
    10da:	e2 0f       	add	r30, r18
    10dc:	f3 1f       	adc	r31, r19
    10de:	80 81       	ld	r24, Z
    10e0:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		if(Local_u8YCoordinate==0)Local_u8YCoordinate=1;
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 23       	and	r24, r24
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <CLCD_u8SinWaveSendString+0x4e>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <CLCD_u8SinWaveSendString+0x50>
		else Local_u8YCoordinate=0;
    10f0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8StateError=OK;
	uint8 Local_u8XCoordinate=0;
	uint8 Local_u8YCoordinate=0;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	fc 01       	movw	r30, r24
    110a:	e2 0f       	add	r30, r18
    110c:	f3 1f       	adc	r31, r19
    110e:	80 81       	ld	r24, Z
    1110:	88 23       	and	r24, r24
    1112:	c9 f6       	brne	.-78     	; 0x10c6 <CLCD_u8SinWaveSendString+0x24>
    1114:	02 c0       	rjmp	.+4      	; 0x111a <CLCD_u8SinWaveSendString+0x78>
		else Local_u8YCoordinate=0;
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	8c 83       	std	Y+4, r24	; 0x04
	}
	return Local_u8StateError;
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    111c:	26 96       	adiw	r28, 0x06	; 6
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 Copy_u8Pattern[],uint8 Copy_u8PatternNum,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	27 97       	sbiw	r28, 0x07	; 7
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	6d 83       	std	Y+5, r22	; 0x05
    1148:	4e 83       	std	Y+6, r20	; 0x06
    114a:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendComd(Local_u8CGRAMAdd);
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	0e c0       	rjmp	.+28     	; 0x118c <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	fc 01       	movw	r30, r24
    117c:	e2 0f       	add	r30, r18
    117e:	f3 1f       	adc	r31, r19
    1180:	80 81       	ld	r24, Z
    1182:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
{
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
	CLCD_voidSendComd(Local_u8CGRAMAdd);
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	88 30       	cpi	r24, 0x08	; 8
    1190:	78 f3       	brcs	.-34     	; 0x1170 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	6f 81       	ldd	r22, Y+7	; 0x07
    1196:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNum);
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
}
    11a0:	27 96       	adiw	r28, 0x07	; 7
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <CLCD_voidSendBinaryNum>:

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <CLCD_voidSendBinaryNum+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <CLCD_voidSendBinaryNum+0x8>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <CLCD_voidSendBinaryNum+0xa>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	6b 83       	std	Y+3, r22	; 0x03
    11c2:	7c 83       	std	Y+4, r23	; 0x04
    11c4:	8d 83       	std	Y+5, r24	; 0x05
    11c6:	9e 83       	std	Y+6, r25	; 0x06
	sint8 Local_s8Counter;
	uint8 Local_u8BitState;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    11c8:	8f e1       	ldi	r24, 0x1F	; 31
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	29 c0       	rjmp	.+82     	; 0x1220 <CLCD_voidSendBinaryNum+0x6e>
	{
		CLCD_voidGoToXY((31-Local_s8Counter),0);
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	8f e1       	ldi	r24, 0x1F	; 31
    11d2:	89 1b       	sub	r24, r25
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	33 27       	eor	r19, r19
    11e0:	27 fd       	sbrc	r18, 7
    11e2:	30 95       	com	r19
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	ad 81       	ldd	r26, Y+5	; 0x05
    11ea:	be 81       	ldd	r27, Y+6	; 0x06
    11ec:	02 2e       	mov	r0, r18
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <CLCD_voidSendBinaryNum+0x46>
    11f0:	b5 95       	asr	r27
    11f2:	a7 95       	ror	r26
    11f4:	97 95       	ror	r25
    11f6:	87 95       	ror	r24
    11f8:	0a 94       	dec	r0
    11fa:	d2 f7       	brpl	.-12     	; 0x11f0 <CLCD_voidSendBinaryNum+0x3e>
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	90 70       	andi	r25, 0x00	; 0
    1200:	a0 70       	andi	r26, 0x00	; 0
    1202:	b0 70       	andi	r27, 0x00	; 0
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	a1 05       	cpc	r26, r1
    1208:	b1 05       	cpc	r27, r1
    120a:	21 f4       	brne	.+8      	; 0x1214 <CLCD_voidSendBinaryNum+0x62>
		{
			CLCD_voidSendData('0');
    120c:	80 e3       	ldi	r24, 0x30	; 48
    120e:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    1212:	03 c0       	rjmp	.+6      	; 0x121a <CLCD_voidSendBinaryNum+0x68>
		}
		else
		{
			CLCD_voidSendData('1');
    1214:	81 e3       	ldi	r24, 0x31	; 49
    1216:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
	sint8 Local_s8Counter;
	uint8 Local_u8BitState;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	81 50       	subi	r24, 0x01	; 1
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 31       	cpi	r24, 0x10	; 16
    1224:	a4 f6       	brge	.-88     	; 0x11ce <CLCD_voidSendBinaryNum+0x1c>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    1226:	8f e0       	ldi	r24, 0x0F	; 15
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	29 c0       	rjmp	.+82     	; 0x127e <CLCD_voidSendBinaryNum+0xcc>
		{
			CLCD_voidGoToXY((15-Local_s8Counter),1);
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	8f e0       	ldi	r24, 0x0F	; 15
    1230:	89 1b       	sub	r24, r25
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	33 27       	eor	r19, r19
    123e:	27 fd       	sbrc	r18, 7
    1240:	30 95       	com	r19
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	ad 81       	ldd	r26, Y+5	; 0x05
    1248:	be 81       	ldd	r27, Y+6	; 0x06
    124a:	02 2e       	mov	r0, r18
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <CLCD_voidSendBinaryNum+0xa4>
    124e:	b5 95       	asr	r27
    1250:	a7 95       	ror	r26
    1252:	97 95       	ror	r25
    1254:	87 95       	ror	r24
    1256:	0a 94       	dec	r0
    1258:	d2 f7       	brpl	.-12     	; 0x124e <CLCD_voidSendBinaryNum+0x9c>
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	90 70       	andi	r25, 0x00	; 0
    125e:	a0 70       	andi	r26, 0x00	; 0
    1260:	b0 70       	andi	r27, 0x00	; 0
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	a1 05       	cpc	r26, r1
    1266:	b1 05       	cpc	r27, r1
    1268:	21 f4       	brne	.+8      	; 0x1272 <CLCD_voidSendBinaryNum+0xc0>
			{
				CLCD_voidSendData('0');
    126a:	80 e3       	ldi	r24, 0x30	; 48
    126c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <CLCD_voidSendBinaryNum+0xc6>
			}
			else
			{
				CLCD_voidSendData('1');
    1272:	81 e3       	ldi	r24, 0x31	; 49
    1274:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	81 50       	subi	r24, 0x01	; 1
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	88 23       	and	r24, r24
    1282:	a4 f6       	brge	.-88     	; 0x122c <CLCD_voidSendBinaryNum+0x7a>
			{
				CLCD_voidSendData('1');
			}

	}
}
    1284:	26 96       	adiw	r28, 0x06	; 6
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <CLCD_voidSendHexaNum>:

void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	2e 97       	sbiw	r28, 0x0e	; 14
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	6b 87       	std	Y+11, r22	; 0x0b
    12ac:	7c 87       	std	Y+12, r23	; 0x0c
    12ae:	8d 87       	std	Y+13, r24	; 0x0d
    12b0:	9e 87       	std	Y+14, r25	; 0x0e
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    12b2:	87 e0       	ldi	r24, 0x07	; 7
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	36 c0       	rjmp	.+108    	; 0x1324 <CLCD_voidSendHexaNum+0x8e>
	{
		Local_u8Remainder=Copy_s32Number%16;
    12b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ba:	8f 70       	andi	r24, 0x0F	; 15
    12bc:	8a 83       	std	Y+2, r24	; 0x02
		if(Local_u8Remainder<=9)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	8a 30       	cpi	r24, 0x0A	; 10
    12c2:	78 f4       	brcc	.+30     	; 0x12e2 <CLCD_voidSendHexaNum+0x4c>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder+'0';
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	33 27       	eor	r19, r19
    12ca:	27 fd       	sbrc	r18, 7
    12cc:	30 95       	com	r19
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	48 2f       	mov	r20, r24
    12d2:	40 5d       	subi	r20, 0xD0	; 208
    12d4:	ce 01       	movw	r24, r28
    12d6:	03 96       	adiw	r24, 0x03	; 3
    12d8:	fc 01       	movw	r30, r24
    12da:	e2 0f       	add	r30, r18
    12dc:	f3 1f       	adc	r31, r19
    12de:	40 83       	st	Z, r20
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <CLCD_voidSendHexaNum+0x68>
		}
		else
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	33 27       	eor	r19, r19
    12e8:	27 fd       	sbrc	r18, 7
    12ea:	30 95       	com	r19
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	48 2f       	mov	r20, r24
    12f0:	49 5c       	subi	r20, 0xC9	; 201
    12f2:	ce 01       	movw	r24, r28
    12f4:	03 96       	adiw	r24, 0x03	; 3
    12f6:	fc 01       	movw	r30, r24
    12f8:	e2 0f       	add	r30, r18
    12fa:	f3 1f       	adc	r31, r19
    12fc:	40 83       	st	Z, r20
		}
		Copy_s32Number/=16;
    12fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1300:	9c 85       	ldd	r25, Y+12	; 0x0c
    1302:	ad 85       	ldd	r26, Y+13	; 0x0d
    1304:	be 85       	ldd	r27, Y+14	; 0x0e
    1306:	68 94       	set
    1308:	13 f8       	bld	r1, 3
    130a:	b6 95       	lsr	r27
    130c:	a7 95       	ror	r26
    130e:	97 95       	ror	r25
    1310:	87 95       	ror	r24
    1312:	16 94       	lsr	r1
    1314:	d1 f7       	brne	.-12     	; 0x130a <CLCD_voidSendHexaNum+0x74>
    1316:	8b 87       	std	Y+11, r24	; 0x0b
    1318:	9c 87       	std	Y+12, r25	; 0x0c
    131a:	ad 87       	std	Y+13, r26	; 0x0d
    131c:	be 87       	std	Y+14, r27	; 0x0e
void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	81 50       	subi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	88 23       	and	r24, r24
    1328:	3c f6       	brge	.-114    	; 0x12b8 <CLCD_voidSendHexaNum+0x22>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    132a:	19 82       	std	Y+1, r1	; 0x01
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <CLCD_voidSendHexaNum+0xc0>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	33 27       	eor	r19, r19
    133c:	27 fd       	sbrc	r18, 7
    133e:	30 95       	com	r19
    1340:	ce 01       	movw	r24, r28
    1342:	03 96       	adiw	r24, 0x03	; 3
    1344:	fc 01       	movw	r30, r24
    1346:	e2 0f       	add	r30, r18
    1348:	f3 1f       	adc	r31, r19
    134a:	80 81       	ld	r24, Z
    134c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	4c f3       	brlt	.-46     	; 0x132e <CLCD_voidSendHexaNum+0x98>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
	}

}
    135c:	2e 96       	adiw	r28, 0x0e	; 14
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DCM_u8RotateRight>:
#include "DIO_interface.h"
#include "DCM_prv.h"
#include "DCM_interface.h"

uint8 DCM_u8RotateRight(const DCM_t* Object)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DCM_u8RotateRight+0x6>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9b 83       	std	Y+3, r25	; 0x03
    137c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_StateErr=OK;
    137e:	19 82       	std	Y+1, r1	; 0x01
	if(Object!=NULL)
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	9b 81       	ldd	r25, Y+3	; 0x03
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	39 f1       	breq	.+78     	; 0x13d6 <DCM_u8RotateRight+0x68>
	{

		if(Object->Port<=DIO_u8PORTD||Object->Pin1_4<=DIO_u8PIN7||Object->Pin2_3<=DIO_u8PIN7)
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	80 81       	ld	r24, Z
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	50 f0       	brcs	.+20     	; 0x13a6 <DCM_u8RotateRight+0x38>
    1392:	ea 81       	ldd	r30, Y+2	; 0x02
    1394:	fb 81       	ldd	r31, Y+3	; 0x03
    1396:	81 81       	ldd	r24, Z+1	; 0x01
    1398:	88 30       	cpi	r24, 0x08	; 8
    139a:	28 f0       	brcs	.+10     	; 0x13a6 <DCM_u8RotateRight+0x38>
    139c:	ea 81       	ldd	r30, Y+2	; 0x02
    139e:	fb 81       	ldd	r31, Y+3	; 0x03
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	88 30       	cpi	r24, 0x08	; 8
    13a4:	a8 f4       	brcc	.+42     	; 0x13d0 <DCM_u8RotateRight+0x62>
		{
			DIO_u8SetPinValue(Object->Port,Object->Pin1_4,DIO_u8PIN_LOW);
    13a6:	ea 81       	ldd	r30, Y+2	; 0x02
    13a8:	fb 81       	ldd	r31, Y+3	; 0x03
    13aa:	80 81       	ld	r24, Z
    13ac:	ea 81       	ldd	r30, Y+2	; 0x02
    13ae:	fb 81       	ldd	r31, Y+3	; 0x03
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	69 2f       	mov	r22, r25
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(Object->Port,Object->Pin2_3,DIO_u8PIN_HIGH);
    13ba:	ea 81       	ldd	r30, Y+2	; 0x02
    13bc:	fb 81       	ldd	r31, Y+3	; 0x03
    13be:	80 81       	ld	r24, Z
    13c0:	ea 81       	ldd	r30, Y+2	; 0x02
    13c2:	fb 81       	ldd	r31, Y+3	; 0x03
    13c4:	92 81       	ldd	r25, Z+2	; 0x02
    13c6:	69 2f       	mov	r22, r25
    13c8:	41 e0       	ldi	r20, 0x01	; 1
    13ca:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <DCM_u8RotateRight+0x6c>
		}
		else
		{
			Local_StateErr=NOK;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DCM_u8RotateRight+0x6c>
		}
	}
	else
	{
		Local_StateErr=NULL_PTR_ERR;
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_StateErr;
    13da:	89 81       	ldd	r24, Y+1	; 0x01
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <DCM_u8RotateLeft>:

uint8 DCM_u8RotateLeft(const DCM_t* Object)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <DCM_u8RotateLeft+0x6>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	9b 83       	std	Y+3, r25	; 0x03
    13f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_StateErr=OK;
    13f8:	19 82       	std	Y+1, r1	; 0x01
	if(Object!=NULL)
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	39 f1       	breq	.+78     	; 0x1450 <DCM_u8RotateLeft+0x68>
	{

		if(Object->Port<=DIO_u8PORTD||Object->Pin1_4<=DIO_u8PIN7||Object->Pin2_3<=DIO_u8PIN7)
    1402:	ea 81       	ldd	r30, Y+2	; 0x02
    1404:	fb 81       	ldd	r31, Y+3	; 0x03
    1406:	80 81       	ld	r24, Z
    1408:	84 30       	cpi	r24, 0x04	; 4
    140a:	50 f0       	brcs	.+20     	; 0x1420 <DCM_u8RotateLeft+0x38>
    140c:	ea 81       	ldd	r30, Y+2	; 0x02
    140e:	fb 81       	ldd	r31, Y+3	; 0x03
    1410:	81 81       	ldd	r24, Z+1	; 0x01
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	28 f0       	brcs	.+10     	; 0x1420 <DCM_u8RotateLeft+0x38>
    1416:	ea 81       	ldd	r30, Y+2	; 0x02
    1418:	fb 81       	ldd	r31, Y+3	; 0x03
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	a8 f4       	brcc	.+42     	; 0x144a <DCM_u8RotateLeft+0x62>
		{
			DIO_u8SetPinValue(Object->Port,Object->Pin2_3,DIO_u8PIN_LOW);
    1420:	ea 81       	ldd	r30, Y+2	; 0x02
    1422:	fb 81       	ldd	r31, Y+3	; 0x03
    1424:	80 81       	ld	r24, Z
    1426:	ea 81       	ldd	r30, Y+2	; 0x02
    1428:	fb 81       	ldd	r31, Y+3	; 0x03
    142a:	92 81       	ldd	r25, Z+2	; 0x02
    142c:	69 2f       	mov	r22, r25
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(Object->Port,Object->Pin1_4,DIO_u8PIN_HIGH);
    1434:	ea 81       	ldd	r30, Y+2	; 0x02
    1436:	fb 81       	ldd	r31, Y+3	; 0x03
    1438:	80 81       	ld	r24, Z
    143a:	ea 81       	ldd	r30, Y+2	; 0x02
    143c:	fb 81       	ldd	r31, Y+3	; 0x03
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	69 2f       	mov	r22, r25
    1442:	41 e0       	ldi	r20, 0x01	; 1
    1444:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <DCM_u8RotateLeft+0x6c>
		}
		else
		{
			Local_StateErr=NOK;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DCM_u8RotateLeft+0x6c>
		}
	}
	else
	{
		Local_StateErr=NULL_PTR_ERR;
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_StateErr;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <DCM_u8Stop>:

uint8 DCM_u8Stop(const DCM_t* Object)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <DCM_u8Stop+0x6>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	9b 83       	std	Y+3, r25	; 0x03
    1470:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_StateErr=OK;
    1472:	19 82       	std	Y+1, r1	; 0x01
	if(Object!=NULL)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	9b 81       	ldd	r25, Y+3	; 0x03
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	39 f1       	breq	.+78     	; 0x14ca <DCM_u8Stop+0x68>
	{

		if(Object->Port<=DIO_u8PORTD||Object->Pin1_4<=DIO_u8PIN7||Object->Pin2_3<=DIO_u8PIN7)
    147c:	ea 81       	ldd	r30, Y+2	; 0x02
    147e:	fb 81       	ldd	r31, Y+3	; 0x03
    1480:	80 81       	ld	r24, Z
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	50 f0       	brcs	.+20     	; 0x149a <DCM_u8Stop+0x38>
    1486:	ea 81       	ldd	r30, Y+2	; 0x02
    1488:	fb 81       	ldd	r31, Y+3	; 0x03
    148a:	81 81       	ldd	r24, Z+1	; 0x01
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	28 f0       	brcs	.+10     	; 0x149a <DCM_u8Stop+0x38>
    1490:	ea 81       	ldd	r30, Y+2	; 0x02
    1492:	fb 81       	ldd	r31, Y+3	; 0x03
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	88 30       	cpi	r24, 0x08	; 8
    1498:	a8 f4       	brcc	.+42     	; 0x14c4 <DCM_u8Stop+0x62>
		{
			DIO_u8SetPinValue(Object->Port,Object->Pin2_3,DIO_u8PIN_LOW);
    149a:	ea 81       	ldd	r30, Y+2	; 0x02
    149c:	fb 81       	ldd	r31, Y+3	; 0x03
    149e:	80 81       	ld	r24, Z
    14a0:	ea 81       	ldd	r30, Y+2	; 0x02
    14a2:	fb 81       	ldd	r31, Y+3	; 0x03
    14a4:	92 81       	ldd	r25, Z+2	; 0x02
    14a6:	69 2f       	mov	r22, r25
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(Object->Port,Object->Pin1_4,DIO_u8PIN_LOW);
    14ae:	ea 81       	ldd	r30, Y+2	; 0x02
    14b0:	fb 81       	ldd	r31, Y+3	; 0x03
    14b2:	80 81       	ld	r24, Z
    14b4:	ea 81       	ldd	r30, Y+2	; 0x02
    14b6:	fb 81       	ldd	r31, Y+3	; 0x03
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	69 2f       	mov	r22, r25
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <DCM_u8Stop+0x6c>
		}
		else
		{
			Local_StateErr=NOK;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DCM_u8Stop+0x6c>
		}
	}
	else
	{
		Local_StateErr=NULL_PTR_ERR;
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_StateErr;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_prv.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	28 97       	sbiw	r28, 0x08	; 8
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	8a 83       	std	Y+2, r24	; 0x02
    14f2:	6b 83       	std	Y+3, r22	; 0x03
    14f4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    14f6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	88 30       	cpi	r24, 0x08	; 8
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <DIO_u8SetPinDirection+0x24>
    14fe:	f4 c0       	rjmp	.+488    	; 0x16e8 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	88 23       	and	r24, r24
    1504:	09 f0       	breq	.+2      	; 0x1508 <DIO_u8SetPinDirection+0x2c>
    1506:	77 c0       	rjmp	.+238    	; 0x15f6 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	38 87       	std	Y+8, r19	; 0x08
    1510:	2f 83       	std	Y+7, r18	; 0x07
    1512:	8f 81       	ldd	r24, Y+7	; 0x07
    1514:	98 85       	ldd	r25, Y+8	; 0x08
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	59 f1       	breq	.+86     	; 0x1572 <DIO_u8SetPinDirection+0x96>
    151c:	2f 81       	ldd	r18, Y+7	; 0x07
    151e:	38 85       	ldd	r19, Y+8	; 0x08
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	2c f4       	brge	.+10     	; 0x1530 <DIO_u8SetPinDirection+0x54>
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	98 85       	ldd	r25, Y+8	; 0x08
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	69 f0       	breq	.+26     	; 0x1548 <DIO_u8SetPinDirection+0x6c>
    152e:	60 c0       	rjmp	.+192    	; 0x15f0 <DIO_u8SetPinDirection+0x114>
    1530:	2f 81       	ldd	r18, Y+7	; 0x07
    1532:	38 85       	ldd	r19, Y+8	; 0x08
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	89 f1       	breq	.+98     	; 0x159c <DIO_u8SetPinDirection+0xc0>
    153a:	8f 81       	ldd	r24, Y+7	; 0x07
    153c:	98 85       	ldd	r25, Y+8	; 0x08
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <DIO_u8SetPinDirection+0x6a>
    1544:	40 c0       	rjmp	.+128    	; 0x15c6 <DIO_u8SetPinDirection+0xea>
    1546:	54 c0       	rjmp	.+168    	; 0x15f0 <DIO_u8SetPinDirection+0x114>
			{
			case(DIO_u8PORTA):
					CLR_BIT(DDRA,Copy_u8Pin);
    1548:	aa e3       	ldi	r26, 0x3A	; 58
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ea e3       	ldi	r30, 0x3A	; 58
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_u8SetPinDirection+0x8a>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_u8SetPinDirection+0x86>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	bd c0       	rjmp	.+378    	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					CLR_BIT(DDRB,Copy_u8Pin);
    1572:	a7 e3       	ldi	r26, 0x37	; 55
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e7 e3       	ldi	r30, 0x37	; 55
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_u8SetPinDirection+0xb4>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_u8SetPinDirection+0xb0>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	a8 c0       	rjmp	.+336    	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					CLR_BIT(DDRC,Copy_u8Pin);
    159c:	a4 e3       	ldi	r26, 0x34	; 52
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_u8SetPinDirection+0xde>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_u8SetPinDirection+0xda>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	93 c0       	rjmp	.+294    	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					CLR_BIT(DDRD,Copy_u8Pin);
    15c6:	a1 e3       	ldi	r26, 0x31	; 49
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e1 e3       	ldi	r30, 0x31	; 49
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_u8SetPinDirection+0x108>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_u8SetPinDirection+0x104>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	7e c0       	rjmp	.+252    	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	7b c0       	rjmp	.+246    	; 0x16ec <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	09 f0       	breq	.+2      	; 0x15fe <DIO_u8SetPinDirection+0x122>
    15fc:	72 c0       	rjmp	.+228    	; 0x16e2 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3e 83       	std	Y+6, r19	; 0x06
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	49 f1       	breq	.+82     	; 0x1664 <DIO_u8SetPinDirection+0x188>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	2c f4       	brge	.+10     	; 0x1626 <DIO_u8SetPinDirection+0x14a>
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	61 f0       	breq	.+24     	; 0x163c <DIO_u8SetPinDirection+0x160>
    1624:	5b c0       	rjmp	.+182    	; 0x16dc <DIO_u8SetPinDirection+0x200>
    1626:	2d 81       	ldd	r18, Y+5	; 0x05
    1628:	3e 81       	ldd	r19, Y+6	; 0x06
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	71 f1       	breq	.+92     	; 0x168c <DIO_u8SetPinDirection+0x1b0>
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	e9 f1       	breq	.+122    	; 0x16b4 <DIO_u8SetPinDirection+0x1d8>
    163a:	50 c0       	rjmp	.+160    	; 0x16dc <DIO_u8SetPinDirection+0x200>
			{
			case(DIO_u8PORTA):
					SET_BIT(DDRA,Copy_u8Pin);
    163c:	aa e3       	ldi	r26, 0x3A	; 58
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ea e3       	ldi	r30, 0x3A	; 58
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <DIO_u8SetPinDirection+0x17e>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <DIO_u8SetPinDirection+0x17a>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	44 c0       	rjmp	.+136    	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					SET_BIT(DDRB,Copy_u8Pin);
    1664:	a7 e3       	ldi	r26, 0x37	; 55
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e7 e3       	ldi	r30, 0x37	; 55
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_u8SetPinDirection+0x1a6>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_u8SetPinDirection+0x1a2>
    1686:	84 2b       	or	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	30 c0       	rjmp	.+96     	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					SET_BIT(DDRC,Copy_u8Pin);
    168c:	a4 e3       	ldi	r26, 0x34	; 52
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e4 e3       	ldi	r30, 0x34	; 52
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <DIO_u8SetPinDirection+0x1ce>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <DIO_u8SetPinDirection+0x1ca>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	1c c0       	rjmp	.+56     	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					SET_BIT(DDRD,Copy_u8Pin);
    16b4:	a1 e3       	ldi	r26, 0x31	; 49
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e1 e3       	ldi	r30, 0x31	; 49
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_u8SetPinDirection+0x1f6>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_u8SetPinDirection+0x1f2>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	08 c0       	rjmp	.+16     	; 0x16ec <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_u8SetPinDirection+0x210>


	}
	else
	{
		 Local_u8ErrorState= NOK;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ee:	28 96       	adiw	r28, 0x08	; 8
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Value)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	28 97       	sbiw	r28, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	8a 83       	std	Y+2, r24	; 0x02
    1716:	6b 83       	std	Y+3, r22	; 0x03
    1718:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    171a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 30       	cpi	r24, 0x08	; 8
    1720:	08 f0       	brcs	.+2      	; 0x1724 <DIO_u8SetPinValue+0x24>
    1722:	f4 c0       	rjmp	.+488    	; 0x190c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	09 f0       	breq	.+2      	; 0x172c <DIO_u8SetPinValue+0x2c>
    172a:	72 c0       	rjmp	.+228    	; 0x1810 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	38 87       	std	Y+8, r19	; 0x08
    1734:	2f 83       	std	Y+7, r18	; 0x07
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	98 85       	ldd	r25, Y+8	; 0x08
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	49 f1       	breq	.+82     	; 0x1792 <DIO_u8SetPinValue+0x92>
    1740:	2f 81       	ldd	r18, Y+7	; 0x07
    1742:	38 85       	ldd	r19, Y+8	; 0x08
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	2c f4       	brge	.+10     	; 0x1754 <DIO_u8SetPinValue+0x54>
    174a:	8f 81       	ldd	r24, Y+7	; 0x07
    174c:	98 85       	ldd	r25, Y+8	; 0x08
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	61 f0       	breq	.+24     	; 0x176a <DIO_u8SetPinValue+0x6a>
    1752:	5b c0       	rjmp	.+182    	; 0x180a <DIO_u8SetPinValue+0x10a>
    1754:	2f 81       	ldd	r18, Y+7	; 0x07
    1756:	38 85       	ldd	r19, Y+8	; 0x08
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	71 f1       	breq	.+92     	; 0x17ba <DIO_u8SetPinValue+0xba>
    175e:	8f 81       	ldd	r24, Y+7	; 0x07
    1760:	98 85       	ldd	r25, Y+8	; 0x08
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	91 05       	cpc	r25, r1
    1766:	e9 f1       	breq	.+122    	; 0x17e2 <DIO_u8SetPinValue+0xe2>
    1768:	50 c0       	rjmp	.+160    	; 0x180a <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    176a:	ab e3       	ldi	r26, 0x3B	; 59
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_u8SetPinValue+0x88>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_u8SetPinValue+0x84>
    178c:	84 2b       	or	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	bf c0       	rjmp	.+382    	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    1792:	a8 e3       	ldi	r26, 0x38	; 56
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e8 e3       	ldi	r30, 0x38	; 56
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_u8SetPinValue+0xb0>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_u8SetPinValue+0xac>
    17b4:	84 2b       	or	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	ab c0       	rjmp	.+342    	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    17ba:	a5 e3       	ldi	r26, 0x35	; 53
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e3       	ldi	r30, 0x35	; 53
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_u8SetPinValue+0xd8>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_u8SetPinValue+0xd4>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	97 c0       	rjmp	.+302    	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				SET_BIT(PORTD,Copy_u8Pin);
    17e2:	a2 e3       	ldi	r26, 0x32	; 50
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e2 e3       	ldi	r30, 0x32	; 50
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_u8SetPinValue+0x100>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_u8SetPinValue+0xfc>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	83 c0       	rjmp	.+262    	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	80 c0       	rjmp	.+256    	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	88 23       	and	r24, r24
    1814:	09 f0       	breq	.+2      	; 0x1818 <DIO_u8SetPinValue+0x118>
    1816:	77 c0       	rjmp	.+238    	; 0x1906 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	3e 83       	std	Y+6, r19	; 0x06
    1820:	2d 83       	std	Y+5, r18	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	91 05       	cpc	r25, r1
    182a:	59 f1       	breq	.+86     	; 0x1882 <DIO_u8SetPinValue+0x182>
    182c:	2d 81       	ldd	r18, Y+5	; 0x05
    182e:	3e 81       	ldd	r19, Y+6	; 0x06
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	2c f4       	brge	.+10     	; 0x1840 <DIO_u8SetPinValue+0x140>
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f0       	breq	.+26     	; 0x1858 <DIO_u8SetPinValue+0x158>
    183e:	60 c0       	rjmp	.+192    	; 0x1900 <DIO_u8SetPinValue+0x200>
    1840:	2d 81       	ldd	r18, Y+5	; 0x05
    1842:	3e 81       	ldd	r19, Y+6	; 0x06
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	89 f1       	breq	.+98     	; 0x18ac <DIO_u8SetPinValue+0x1ac>
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	91 05       	cpc	r25, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <DIO_u8SetPinValue+0x156>
    1854:	40 c0       	rjmp	.+128    	; 0x18d6 <DIO_u8SetPinValue+0x1d6>
    1856:	54 c0       	rjmp	.+168    	; 0x1900 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:
				CLR_BIT(PORTA,Copy_u8Pin);
    1858:	ab e3       	ldi	r26, 0x3B	; 59
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	eb e3       	ldi	r30, 0x3B	; 59
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_u8SetPinValue+0x176>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_u8SetPinValue+0x172>
    187a:	80 95       	com	r24
    187c:	84 23       	and	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	47 c0       	rjmp	.+142    	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				CLR_BIT(PORTB,Copy_u8Pin);
    1882:	a8 e3       	ldi	r26, 0x38	; 56
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e8 e3       	ldi	r30, 0x38	; 56
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <DIO_u8SetPinValue+0x1a0>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <DIO_u8SetPinValue+0x19c>
    18a4:	80 95       	com	r24
    18a6:	84 23       	and	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	32 c0       	rjmp	.+100    	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				CLR_BIT(PORTC,Copy_u8Pin);
    18ac:	a5 e3       	ldi	r26, 0x35	; 53
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e3       	ldi	r30, 0x35	; 53
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_u8SetPinValue+0x1ca>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_u8SetPinValue+0x1c6>
    18ce:	80 95       	com	r24
    18d0:	84 23       	and	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	1d c0       	rjmp	.+58     	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				CLR_BIT(PORTD,Copy_u8Pin);
    18d6:	a2 e3       	ldi	r26, 0x32	; 50
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e2 e3       	ldi	r30, 0x32	; 50
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_u8SetPinValue+0x1f4>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_u8SetPinValue+0x1f0>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState= NOK;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	28 96       	adiw	r28, 0x08	; 8
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	27 97       	sbiw	r28, 0x07	; 7
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	8a 83       	std	Y+2, r24	; 0x02
    193a:	6b 83       	std	Y+3, r22	; 0x03
    193c:	5d 83       	std	Y+5, r21	; 0x05
    193e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1940:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	09 f4       	brne	.+2      	; 0x194c <DIO_u8GetPinValue+0x28>
    194a:	7b c0       	rjmp	.+246    	; 0x1a42 <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_u8Pin<=DIO_u8PIN7)
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	08 f0       	brcs	.+2      	; 0x1954 <DIO_u8GetPinValue+0x30>
    1952:	74 c0       	rjmp	.+232    	; 0x1a3c <DIO_u8GetPinValue+0x118>
		{
			switch (Copy_u8Port)
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3f 83       	std	Y+7, r19	; 0x07
    195c:	2e 83       	std	Y+6, r18	; 0x06
    195e:	4e 81       	ldd	r20, Y+6	; 0x06
    1960:	5f 81       	ldd	r21, Y+7	; 0x07
    1962:	41 30       	cpi	r20, 0x01	; 1
    1964:	51 05       	cpc	r21, r1
    1966:	59 f1       	breq	.+86     	; 0x19be <DIO_u8GetPinValue+0x9a>
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9f 81       	ldd	r25, Y+7	; 0x07
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	91 05       	cpc	r25, r1
    1970:	34 f4       	brge	.+12     	; 0x197e <DIO_u8GetPinValue+0x5a>
    1972:	2e 81       	ldd	r18, Y+6	; 0x06
    1974:	3f 81       	ldd	r19, Y+7	; 0x07
    1976:	21 15       	cp	r18, r1
    1978:	31 05       	cpc	r19, r1
    197a:	69 f0       	breq	.+26     	; 0x1996 <DIO_u8GetPinValue+0x72>
    197c:	5c c0       	rjmp	.+184    	; 0x1a36 <DIO_u8GetPinValue+0x112>
    197e:	4e 81       	ldd	r20, Y+6	; 0x06
    1980:	5f 81       	ldd	r21, Y+7	; 0x07
    1982:	42 30       	cpi	r20, 0x02	; 2
    1984:	51 05       	cpc	r21, r1
    1986:	79 f1       	breq	.+94     	; 0x19e6 <DIO_u8GetPinValue+0xc2>
    1988:	8e 81       	ldd	r24, Y+6	; 0x06
    198a:	9f 81       	ldd	r25, Y+7	; 0x07
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	91 05       	cpc	r25, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <DIO_u8GetPinValue+0x70>
    1992:	3d c0       	rjmp	.+122    	; 0x1a0e <DIO_u8GetPinValue+0xea>
    1994:	50 c0       	rjmp	.+160    	; 0x1a36 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:
				*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);
    1996:	e9 e3       	ldi	r30, 0x39	; 57
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8GetPinValue+0x8a>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8GetPinValue+0x86>
    19b2:	ca 01       	movw	r24, r20
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	ec 81       	ldd	r30, Y+4	; 0x04
    19b8:	fd 81       	ldd	r31, Y+5	; 0x05
    19ba:	80 83       	st	Z, r24
    19bc:	44 c0       	rjmp	.+136    	; 0x1a46 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTB:
				*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);
    19be:	e6 e3       	ldi	r30, 0x36	; 54
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a9 01       	movw	r20, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_u8GetPinValue+0xb2>
    19d2:	55 95       	asr	r21
    19d4:	47 95       	ror	r20
    19d6:	8a 95       	dec	r24
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <DIO_u8GetPinValue+0xae>
    19da:	ca 01       	movw	r24, r20
    19dc:	81 70       	andi	r24, 0x01	; 1
    19de:	ec 81       	ldd	r30, Y+4	; 0x04
    19e0:	fd 81       	ldd	r31, Y+5	; 0x05
    19e2:	80 83       	st	Z, r24
    19e4:	30 c0       	rjmp	.+96     	; 0x1a46 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTC:
				*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);
    19e6:	e3 e3       	ldi	r30, 0x33	; 51
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_u8GetPinValue+0xda>
    19fa:	55 95       	asr	r21
    19fc:	47 95       	ror	r20
    19fe:	8a 95       	dec	r24
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_u8GetPinValue+0xd6>
    1a02:	ca 01       	movw	r24, r20
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	ec 81       	ldd	r30, Y+4	; 0x04
    1a08:	fd 81       	ldd	r31, Y+5	; 0x05
    1a0a:	80 83       	st	Z, r24
    1a0c:	1c c0       	rjmp	.+56     	; 0x1a46 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTD:
				*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);
    1a0e:	e0 e3       	ldi	r30, 0x30	; 48
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_u8GetPinValue+0x102>
    1a22:	55 95       	asr	r21
    1a24:	47 95       	ror	r20
    1a26:	8a 95       	dec	r24
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_u8GetPinValue+0xfe>
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	81 70       	andi	r24, 0x01	; 1
    1a2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a30:	fd 81       	ldd	r31, Y+5	; 0x05
    1a32:	80 83       	st	Z, r24
    1a34:	08 c0       	rjmp	.+16     	; 0x1a46 <DIO_u8GetPinValue+0x122>
				break;
			default:
				Local_u8ErrorState= NOK;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a48:	27 96       	adiw	r28, 0x07	; 7
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port,uint8 Copy_u8Direction)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <DIO_u8SetPortDirection+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <DIO_u8SetPortDirection+0x8>
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	8a 83       	std	Y+2, r24	; 0x02
    1a6a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=0;
    1a6c:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	3d 83       	std	Y+5, r19	; 0x05
    1a76:	2c 83       	std	Y+4, r18	; 0x04
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	91 05       	cpc	r25, r1
    1a80:	d1 f0       	breq	.+52     	; 0x1ab6 <DIO_u8SetPortDirection+0x5c>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <DIO_u8SetPortDirection+0x3c>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	61 f0       	breq	.+24     	; 0x1aac <DIO_u8SetPortDirection+0x52>
    1a94:	1f c0       	rjmp	.+62     	; 0x1ad4 <DIO_u8SetPortDirection+0x7a>
    1a96:	2c 81       	ldd	r18, Y+4	; 0x04
    1a98:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	81 f0       	breq	.+32     	; 0x1ac0 <DIO_u8SetPortDirection+0x66>
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	83 30       	cpi	r24, 0x03	; 3
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	81 f0       	breq	.+32     	; 0x1aca <DIO_u8SetPortDirection+0x70>
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <DIO_u8SetPortDirection+0x7a>
		{
		case(DIO_u8PORTA):
				DDRA=Copy_u8Direction;
    1aac:	ea e3       	ldi	r30, 0x3A	; 58
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	80 83       	st	Z, r24
    1ab4:	11 c0       	rjmp	.+34     	; 0x1ad8 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTB):
				DDRB=Copy_u8Direction;
    1ab6:	e7 e3       	ldi	r30, 0x37	; 55
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	80 83       	st	Z, r24
    1abe:	0c c0       	rjmp	.+24     	; 0x1ad8 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTC):
				DDRC=Copy_u8Direction;
    1ac0:	e4 e3       	ldi	r30, 0x34	; 52
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	80 83       	st	Z, r24
    1ac8:	07 c0       	rjmp	.+14     	; 0x1ad8 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTD):
				DDRD=Copy_u8Direction;
    1aca:	e1 e3       	ldi	r30, 0x31	; 49
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	80 83       	st	Z, r24
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_u8SetPortDirection+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	return Local_u8ErrorState;
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <DIO_u8SetPortValue+0x6>
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <DIO_u8SetPortValue+0x8>
    1af2:	0f 92       	push	r0
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	8a 83       	std	Y+2, r24	; 0x02
    1afa:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=0;
    1afc:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	3d 83       	std	Y+5, r19	; 0x05
    1b06:	2c 83       	std	Y+4, r18	; 0x04
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	91 05       	cpc	r25, r1
    1b10:	d1 f0       	breq	.+52     	; 0x1b46 <DIO_u8SetPortValue+0x5c>
    1b12:	2c 81       	ldd	r18, Y+4	; 0x04
    1b14:	3d 81       	ldd	r19, Y+5	; 0x05
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	2c f4       	brge	.+10     	; 0x1b26 <DIO_u8SetPortValue+0x3c>
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <DIO_u8SetPortValue+0x52>
    1b24:	1f c0       	rjmp	.+62     	; 0x1b64 <DIO_u8SetPortValue+0x7a>
    1b26:	2c 81       	ldd	r18, Y+4	; 0x04
    1b28:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2a:	22 30       	cpi	r18, 0x02	; 2
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	81 f0       	breq	.+32     	; 0x1b50 <DIO_u8SetPortValue+0x66>
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	9d 81       	ldd	r25, Y+5	; 0x05
    1b34:	83 30       	cpi	r24, 0x03	; 3
    1b36:	91 05       	cpc	r25, r1
    1b38:	81 f0       	breq	.+32     	; 0x1b5a <DIO_u8SetPortValue+0x70>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <DIO_u8SetPortValue+0x7a>
		{
		case(DIO_u8PORTA):
				PORTA=Copy_u8Value;
    1b3c:	eb e3       	ldi	r30, 0x3B	; 59
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	80 83       	st	Z, r24
    1b44:	11 c0       	rjmp	.+34     	; 0x1b68 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTB):
				PORTB=Copy_u8Value;
    1b46:	e8 e3       	ldi	r30, 0x38	; 56
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	80 83       	st	Z, r24
    1b4e:	0c c0       	rjmp	.+24     	; 0x1b68 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTC):
				PORTC=Copy_u8Value;
    1b50:	e5 e3       	ldi	r30, 0x35	; 53
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	80 83       	st	Z, r24
    1b58:	07 c0       	rjmp	.+14     	; 0x1b68 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTD):
				PORTD=Copy_u8Value;
    1b5a:	e2 e3       	ldi	r30, 0x32	; 50
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	80 83       	st	Z, r24
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_u8SetPortValue+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <DIO_u8TogglePinValue+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <DIO_u8TogglePinValue+0x8>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <DIO_u8TogglePinValue+0xa>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState= OK;
    1b8c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8BitState;
		if(Copy_u8Pin<=DIO_u8PIN7)
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <DIO_u8TogglePinValue+0x1c>
    1b94:	1a c1       	rjmp	.+564    	; 0x1dca <DIO_u8TogglePinValue+0x250>
		{
			switch (Copy_u8Port)
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3e 83       	std	Y+6, r19	; 0x06
    1b9e:	2d 83       	std	Y+5, r18	; 0x05
    1ba0:	4d 81       	ldd	r20, Y+5	; 0x05
    1ba2:	5e 81       	ldd	r21, Y+6	; 0x06
    1ba4:	41 30       	cpi	r20, 0x01	; 1
    1ba6:	51 05       	cpc	r21, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <DIO_u8TogglePinValue+0x32>
    1baa:	55 c0       	rjmp	.+170    	; 0x1c56 <DIO_u8TogglePinValue+0xdc>
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	34 f4       	brge	.+12     	; 0x1bc2 <DIO_u8TogglePinValue+0x48>
    1bb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bba:	21 15       	cp	r18, r1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	71 f0       	breq	.+28     	; 0x1bdc <DIO_u8TogglePinValue+0x62>
    1bc0:	01 c1       	rjmp	.+514    	; 0x1dc4 <DIO_u8TogglePinValue+0x24a>
    1bc2:	4d 81       	ldd	r20, Y+5	; 0x05
    1bc4:	5e 81       	ldd	r21, Y+6	; 0x06
    1bc6:	42 30       	cpi	r20, 0x02	; 2
    1bc8:	51 05       	cpc	r21, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <DIO_u8TogglePinValue+0x54>
    1bcc:	81 c0       	rjmp	.+258    	; 0x1cd0 <DIO_u8TogglePinValue+0x156>
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <DIO_u8TogglePinValue+0x60>
    1bd8:	b8 c0       	rjmp	.+368    	; 0x1d4a <DIO_u8TogglePinValue+0x1d0>
    1bda:	f4 c0       	rjmp	.+488    	; 0x1dc4 <DIO_u8TogglePinValue+0x24a>
			{
			case DIO_u8PORTA:
				Local_u8BitState=GET_BIT(PORTA,Copy_u8Pin);
    1bdc:	eb e3       	ldi	r30, 0x3B	; 59
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_u8TogglePinValue+0x7a>
    1bf0:	55 95       	asr	r21
    1bf2:	47 95       	ror	r20
    1bf4:	8a 95       	dec	r24
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_u8TogglePinValue+0x76>
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	a9 f4       	brne	.+42     	; 0x1c2e <DIO_u8TogglePinValue+0xb4>
				{
					CLR_BIT(PORTA,Copy_u8Pin);
    1c04:	ab e3       	ldi	r26, 0x3B	; 59
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	eb e3       	ldi	r30, 0x3B	; 59
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_u8TogglePinValue+0xa8>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_u8TogglePinValue+0xa4>
    1c26:	80 95       	com	r24
    1c28:	84 23       	and	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	d0 c0       	rjmp	.+416    	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTA,Copy_u8Pin);
    1c2e:	ab e3       	ldi	r26, 0x3B	; 59
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	eb e3       	ldi	r30, 0x3B	; 59
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_u8TogglePinValue+0xd2>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_u8TogglePinValue+0xce>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	bc c0       	rjmp	.+376    	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTB:
				Local_u8BitState=GET_BIT(PORTB,Copy_u8Pin);
    1c56:	e8 e3       	ldi	r30, 0x38	; 56
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a9 01       	movw	r20, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_u8TogglePinValue+0xf4>
    1c6a:	55 95       	asr	r21
    1c6c:	47 95       	ror	r20
    1c6e:	8a 95       	dec	r24
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_u8TogglePinValue+0xf0>
    1c72:	ca 01       	movw	r24, r20
    1c74:	81 70       	andi	r24, 0x01	; 1
    1c76:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	a9 f4       	brne	.+42     	; 0x1ca8 <DIO_u8TogglePinValue+0x12e>
				{
					CLR_BIT(PORTB,Copy_u8Pin);
    1c7e:	a8 e3       	ldi	r26, 0x38	; 56
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e8 e3       	ldi	r30, 0x38	; 56
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_u8TogglePinValue+0x122>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_u8TogglePinValue+0x11e>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	93 c0       	rjmp	.+294    	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTB,Copy_u8Pin);
    1ca8:	a8 e3       	ldi	r26, 0x38	; 56
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e8 e3       	ldi	r30, 0x38	; 56
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_u8TogglePinValue+0x14c>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_u8TogglePinValue+0x148>
    1cca:	84 2b       	or	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	7f c0       	rjmp	.+254    	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTC:
				Local_u8BitState=GET_BIT(PORTC,Copy_u8Pin);
    1cd0:	e5 e3       	ldi	r30, 0x35	; 53
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_u8TogglePinValue+0x16e>
    1ce4:	55 95       	asr	r21
    1ce6:	47 95       	ror	r20
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_u8TogglePinValue+0x16a>
    1cec:	ca 01       	movw	r24, r20
    1cee:	81 70       	andi	r24, 0x01	; 1
    1cf0:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	a9 f4       	brne	.+42     	; 0x1d22 <DIO_u8TogglePinValue+0x1a8>
				{
					CLR_BIT(PORTC,Copy_u8Pin);
    1cf8:	a5 e3       	ldi	r26, 0x35	; 53
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e5 e3       	ldi	r30, 0x35	; 53
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_u8TogglePinValue+0x19c>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_u8TogglePinValue+0x198>
    1d1a:	80 95       	com	r24
    1d1c:	84 23       	and	r24, r20
    1d1e:	8c 93       	st	X, r24
    1d20:	56 c0       	rjmp	.+172    	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTC,Copy_u8Pin);
    1d22:	a5 e3       	ldi	r26, 0x35	; 53
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e5 e3       	ldi	r30, 0x35	; 53
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <DIO_u8TogglePinValue+0x1c6>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <DIO_u8TogglePinValue+0x1c2>
    1d44:	84 2b       	or	r24, r20
    1d46:	8c 93       	st	X, r24
    1d48:	42 c0       	rjmp	.+132    	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTD:
				Local_u8BitState=GET_BIT(PORTD,Copy_u8Pin);
    1d4a:	e2 e3       	ldi	r30, 0x32	; 50
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_u8TogglePinValue+0x1e8>
    1d5e:	55 95       	asr	r21
    1d60:	47 95       	ror	r20
    1d62:	8a 95       	dec	r24
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <DIO_u8TogglePinValue+0x1e4>
    1d66:	ca 01       	movw	r24, r20
    1d68:	81 70       	andi	r24, 0x01	; 1
    1d6a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	a9 f4       	brne	.+42     	; 0x1d9c <DIO_u8TogglePinValue+0x222>
				{
					CLR_BIT(PORTD,Copy_u8Pin);
    1d72:	a2 e3       	ldi	r26, 0x32	; 50
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e2 e3       	ldi	r30, 0x32	; 50
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_u8TogglePinValue+0x216>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_u8TogglePinValue+0x212>
    1d94:	80 95       	com	r24
    1d96:	84 23       	and	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	19 c0       	rjmp	.+50     	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTD,Copy_u8Pin);
    1d9c:	a2 e3       	ldi	r26, 0x32	; 50
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e2 e3       	ldi	r30, 0x32	; 50
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_u8TogglePinValue+0x240>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <DIO_u8TogglePinValue+0x23c>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <DIO_u8TogglePinValue+0x254>
				}
				break;
			default:
				Local_u8ErrorState= NOK;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_u8TogglePinValue+0x254>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
		}

	return Local_u8ErrorState;
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1dd0:	26 96       	adiw	r28, 0x06	; 6
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <EXTI_voidInit>:
#include "EXTI_prv.h"

static void (*EXTI_pfIntFuncPtr[3]) (void)={NULL};

void EXTI_voidInit(void)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
#if INT0_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    1dea:	a5 e5       	ldi	r26, 0x55	; 85
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e5 e5       	ldi	r30, 0x55	; 85
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8e 7f       	andi	r24, 0xFE	; 254
    1df6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1df8:	a5 e5       	ldi	r26, 0x55	; 85
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e5       	ldi	r30, 0x55	; 85
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	82 60       	ori	r24, 0x02	; 2
    1e04:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
#else
#error Wrong INT0_SENSE_CTRL configuration option
#endif
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
    1e06:	ab e5       	ldi	r26, 0x5B	; 91
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	eb e5       	ldi	r30, 0x5B	; 91
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 64       	ori	r24, 0x40	; 64
    1e12:	8c 93       	st	X, r24
#else
#error Wrong INT0_INITIAL_STATE configuration option
#endif

#if INT1_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1e14:	a5 e5       	ldi	r26, 0x55	; 85
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e5 e5       	ldi	r30, 0x55	; 85
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8b 7f       	andi	r24, 0xFB	; 251
    1e20:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    1e22:	a5 e5       	ldi	r26, 0x55	; 85
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e5       	ldi	r30, 0x55	; 85
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 60       	ori	r24, 0x08	; 8
    1e2e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
#else
#error Wrong INT1_SENSE_CTRL configuration option
#endif
#if INT1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
    1e30:	ab e5       	ldi	r26, 0x5B	; 91
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	eb e5       	ldi	r30, 0x5B	; 91
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	80 68       	ori	r24, 0x80	; 128
    1e3c:	8c 93       	st	X, r24
#else
#error Wrong INT1_INITIAL_STATE configuration option
#endif

#if INT2_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUSCR,MCUSCR_ISC2);
    1e3e:	a4 e5       	ldi	r26, 0x54	; 84
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e4 e5       	ldi	r30, 0x54	; 84
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7b       	andi	r24, 0xBF	; 191
    1e4a:	8c 93       	st	X, r24
	SET_BIT(MCUSCR,MCUSCR_ISC2);
#else
#error Wrong INT2_SENSE_CTRL configuration option
#endif
#if INT2_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
    1e4c:	ab e5       	ldi	r26, 0x5B	; 91
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	eb e5       	ldi	r30, 0x5B	; 91
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 62       	ori	r24, 0x20	; 32
    1e58:	8c 93       	st	X, r24
#else
#error Wrong INT2_INITIAL_STATE configuration option
#endif


}
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <EXTI_u8SetSenseControl>:

uint8 EXTI_u8SetSenseControl(uint8 Copy_u8Int,uint8 Copy_u8SenseControl)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	2b 97       	sbiw	r28, 0x0b	; 11
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    1e78:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3b 87       	std	Y+11, r19	; 0x0b
    1e82:	2a 87       	std	Y+10, r18	; 0x0a
    1e84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <EXTI_u8SetSenseControl+0x30>
    1e8e:	6a c0       	rjmp	.+212    	; 0x1f64 <EXTI_u8SetSenseControl+0x104>
    1e90:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e92:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <EXTI_u8SetSenseControl+0x3c>
    1e9a:	c3 c0       	rjmp	.+390    	; 0x2022 <EXTI_u8SetSenseControl+0x1c2>
    1e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <EXTI_u8SetSenseControl+0x46>
    1ea4:	e1 c0       	rjmp	.+450    	; 0x2068 <EXTI_u8SetSenseControl+0x208>
	{
	case EXTI_u8INT0:
		switch(Copy_u8SenseControl)
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	39 87       	std	Y+9, r19	; 0x09
    1eae:	28 87       	std	Y+8, r18	; 0x08
    1eb0:	88 85       	ldd	r24, Y+8	; 0x08
    1eb2:	99 85       	ldd	r25, Y+9	; 0x09
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	29 f1       	breq	.+74     	; 0x1f04 <EXTI_u8SetSenseControl+0xa4>
    1eba:	28 85       	ldd	r18, Y+8	; 0x08
    1ebc:	39 85       	ldd	r19, Y+9	; 0x09
    1ebe:	23 30       	cpi	r18, 0x03	; 3
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	34 f4       	brge	.+12     	; 0x1ed0 <EXTI_u8SetSenseControl+0x70>
    1ec4:	88 85       	ldd	r24, Y+8	; 0x08
    1ec6:	99 85       	ldd	r25, Y+9	; 0x09
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	61 f0       	breq	.+24     	; 0x1ee6 <EXTI_u8SetSenseControl+0x86>
    1ece:	47 c0       	rjmp	.+142    	; 0x1f5e <EXTI_u8SetSenseControl+0xfe>
    1ed0:	28 85       	ldd	r18, Y+8	; 0x08
    1ed2:	39 85       	ldd	r19, Y+9	; 0x09
    1ed4:	23 30       	cpi	r18, 0x03	; 3
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	21 f1       	breq	.+72     	; 0x1f22 <EXTI_u8SetSenseControl+0xc2>
    1eda:	88 85       	ldd	r24, Y+8	; 0x08
    1edc:	99 85       	ldd	r25, Y+9	; 0x09
    1ede:	84 30       	cpi	r24, 0x04	; 4
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	71 f1       	breq	.+92     	; 0x1f40 <EXTI_u8SetSenseControl+0xe0>
    1ee4:	3c c0       	rjmp	.+120    	; 0x1f5e <EXTI_u8SetSenseControl+0xfe>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1ee6:	a5 e5       	ldi	r26, 0x55	; 85
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e5 e5       	ldi	r30, 0x55	; 85
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	81 60       	ori	r24, 0x01	; 1
    1ef2:	8c 93       	st	X, r24
    1ef4:	a5 e5       	ldi	r26, 0x55	; 85
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e5       	ldi	r30, 0x55	; 85
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	82 60       	ori	r24, 0x02	; 2
    1f00:	8c 93       	st	X, r24
    1f02:	b4 c0       	rjmp	.+360    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1f04:	a5 e5       	ldi	r26, 0x55	; 85
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e5 e5       	ldi	r30, 0x55	; 85
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8e 7f       	andi	r24, 0xFE	; 254
    1f10:	8c 93       	st	X, r24
    1f12:	a5 e5       	ldi	r26, 0x55	; 85
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e5 e5       	ldi	r30, 0x55	; 85
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	82 60       	ori	r24, 0x02	; 2
    1f1e:	8c 93       	st	X, r24
    1f20:	a5 c0       	rjmp	.+330    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    1f22:	a5 e5       	ldi	r26, 0x55	; 85
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e5 e5       	ldi	r30, 0x55	; 85
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8e 7f       	andi	r24, 0xFE	; 254
    1f2e:	8c 93       	st	X, r24
    1f30:	a5 e5       	ldi	r26, 0x55	; 85
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e5       	ldi	r30, 0x55	; 85
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8d 7f       	andi	r24, 0xFD	; 253
    1f3c:	8c 93       	st	X, r24
    1f3e:	96 c0       	rjmp	.+300    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOGICAL_CHANGE:SET_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    1f40:	a5 e5       	ldi	r26, 0x55	; 85
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e5 e5       	ldi	r30, 0x55	; 85
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	81 60       	ori	r24, 0x01	; 1
    1f4c:	8c 93       	st	X, r24
    1f4e:	a5 e5       	ldi	r26, 0x55	; 85
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e5 e5       	ldi	r30, 0x55	; 85
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8d 7f       	andi	r24, 0xFD	; 253
    1f5a:	8c 93       	st	X, r24
    1f5c:	87 c0       	rjmp	.+270    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	84 c0       	rjmp	.+264    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	case EXTI_u8INT1:
		switch(Copy_u8SenseControl)
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	3f 83       	std	Y+7, r19	; 0x07
    1f6c:	2e 83       	std	Y+6, r18	; 0x06
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	91 05       	cpc	r25, r1
    1f76:	29 f1       	breq	.+74     	; 0x1fc2 <EXTI_u8SetSenseControl+0x162>
    1f78:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7c:	23 30       	cpi	r18, 0x03	; 3
    1f7e:	31 05       	cpc	r19, r1
    1f80:	34 f4       	brge	.+12     	; 0x1f8e <EXTI_u8SetSenseControl+0x12e>
    1f82:	8e 81       	ldd	r24, Y+6	; 0x06
    1f84:	9f 81       	ldd	r25, Y+7	; 0x07
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	61 f0       	breq	.+24     	; 0x1fa4 <EXTI_u8SetSenseControl+0x144>
    1f8c:	47 c0       	rjmp	.+142    	; 0x201c <EXTI_u8SetSenseControl+0x1bc>
    1f8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f90:	3f 81       	ldd	r19, Y+7	; 0x07
    1f92:	23 30       	cpi	r18, 0x03	; 3
    1f94:	31 05       	cpc	r19, r1
    1f96:	21 f1       	breq	.+72     	; 0x1fe0 <EXTI_u8SetSenseControl+0x180>
    1f98:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9c:	84 30       	cpi	r24, 0x04	; 4
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	71 f1       	breq	.+92     	; 0x1ffe <EXTI_u8SetSenseControl+0x19e>
    1fa2:	3c c0       	rjmp	.+120    	; 0x201c <EXTI_u8SetSenseControl+0x1bc>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1fa4:	a5 e5       	ldi	r26, 0x55	; 85
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e5 e5       	ldi	r30, 0x55	; 85
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	84 60       	ori	r24, 0x04	; 4
    1fb0:	8c 93       	st	X, r24
    1fb2:	a5 e5       	ldi	r26, 0x55	; 85
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e5 e5       	ldi	r30, 0x55	; 85
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 60       	ori	r24, 0x08	; 8
    1fbe:	8c 93       	st	X, r24
    1fc0:	55 c0       	rjmp	.+170    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1fc2:	a5 e5       	ldi	r26, 0x55	; 85
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e5 e5       	ldi	r30, 0x55	; 85
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8b 7f       	andi	r24, 0xFB	; 251
    1fce:	8c 93       	st	X, r24
    1fd0:	a5 e5       	ldi	r26, 0x55	; 85
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e5 e5       	ldi	r30, 0x55	; 85
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 60       	ori	r24, 0x08	; 8
    1fdc:	8c 93       	st	X, r24
    1fde:	46 c0       	rjmp	.+140    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    1fe0:	a5 e5       	ldi	r26, 0x55	; 85
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e5 e5       	ldi	r30, 0x55	; 85
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	8b 7f       	andi	r24, 0xFB	; 251
    1fec:	8c 93       	st	X, r24
    1fee:	a5 e5       	ldi	r26, 0x55	; 85
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e5 e5       	ldi	r30, 0x55	; 85
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	87 7f       	andi	r24, 0xF7	; 247
    1ffa:	8c 93       	st	X, r24
    1ffc:	37 c0       	rjmp	.+110    	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOGICAL_CHANGE:SET_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    1ffe:	a5 e5       	ldi	r26, 0x55	; 85
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e5 e5       	ldi	r30, 0x55	; 85
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	84 60       	ori	r24, 0x04	; 4
    200a:	8c 93       	st	X, r24
    200c:	a5 e5       	ldi	r26, 0x55	; 85
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e5 e5       	ldi	r30, 0x55	; 85
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	87 7f       	andi	r24, 0xF7	; 247
    2018:	8c 93       	st	X, r24
    201a:	28 c0       	rjmp	.+80     	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	25 c0       	rjmp	.+74     	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	case EXTI_u8INT2:
		switch(Copy_u8SenseControl)
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	3d 83       	std	Y+5, r19	; 0x05
    202a:	2c 83       	std	Y+4, r18	; 0x04
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	91 05       	cpc	r25, r1
    2034:	31 f0       	breq	.+12     	; 0x2042 <EXTI_u8SetSenseControl+0x1e2>
    2036:	2c 81       	ldd	r18, Y+4	; 0x04
    2038:	3d 81       	ldd	r19, Y+5	; 0x05
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	49 f0       	breq	.+18     	; 0x2052 <EXTI_u8SetSenseControl+0x1f2>
    2040:	10 c0       	rjmp	.+32     	; 0x2062 <EXTI_u8SetSenseControl+0x202>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUSCR,MCUSCR_ISC2);break;
    2042:	a4 e5       	ldi	r26, 0x54	; 84
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e4 e5       	ldi	r30, 0x54	; 84
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	80 64       	ori	r24, 0x40	; 64
    204e:	8c 93       	st	X, r24
    2050:	0d c0       	rjmp	.+26     	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUSCR,MCUSCR_ISC2);break;
    2052:	a4 e5       	ldi	r26, 0x54	; 84
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e4 e5       	ldi	r30, 0x54	; 84
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8f 7b       	andi	r24, 0xBF	; 191
    205e:	8c 93       	st	X, r24
    2060:	05 c0       	rjmp	.+10     	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	02 c0       	rjmp	.+4      	; 0x206c <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	default  :
		Local_u8ErrorState=NOK;break;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
}
    206e:	2b 96       	adiw	r28, 0x0b	; 11
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable(uint8 Copy_u8Int)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <EXTI_u8IntEnable+0x6>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <EXTI_u8IntEnable+0x8>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    208e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	3c 83       	std	Y+4, r19	; 0x04
    2098:	2b 83       	std	Y+3, r18	; 0x03
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	91 05       	cpc	r25, r1
    20a2:	89 f0       	breq	.+34     	; 0x20c6 <EXTI_u8IntEnable+0x46>
    20a4:	2b 81       	ldd	r18, Y+3	; 0x03
    20a6:	3c 81       	ldd	r19, Y+4	; 0x04
    20a8:	22 30       	cpi	r18, 0x02	; 2
    20aa:	31 05       	cpc	r19, r1
    20ac:	a1 f0       	breq	.+40     	; 0x20d6 <EXTI_u8IntEnable+0x56>
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	c1 f4       	brne	.+48     	; 0x20e6 <EXTI_u8IntEnable+0x66>
	{
	case EXTI_u8INT0:SET_BIT(GICR,GICR_INT0);break;
    20b6:	ab e5       	ldi	r26, 0x5B	; 91
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	eb e5       	ldi	r30, 0x5B	; 91
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	80 64       	ori	r24, 0x40	; 64
    20c2:	8c 93       	st	X, r24
    20c4:	12 c0       	rjmp	.+36     	; 0x20ea <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT1:SET_BIT(GICR,GICR_INT1);break;
    20c6:	ab e5       	ldi	r26, 0x5B	; 91
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	eb e5       	ldi	r30, 0x5B	; 91
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 68       	ori	r24, 0x80	; 128
    20d2:	8c 93       	st	X, r24
    20d4:	0a c0       	rjmp	.+20     	; 0x20ea <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT2:SET_BIT(GICR,GICR_INT2);break;
    20d6:	ab e5       	ldi	r26, 0x5B	; 91
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	eb e5       	ldi	r30, 0x5B	; 91
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 62       	ori	r24, 0x20	; 32
    20e2:	8c 93       	st	X, r24
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <EXTI_u8IntEnable+0x6a>
	default  : Local_u8ErrorState=NOK;break;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <EXTI_u8IntDisable>:

uint8 EXTI_u8IntDisable(uint8 Copy_u8Int)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <EXTI_u8IntDisable+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <EXTI_u8IntDisable+0x8>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    2108:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	3c 83       	std	Y+4, r19	; 0x04
    2112:	2b 83       	std	Y+3, r18	; 0x03
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	91 05       	cpc	r25, r1
    211c:	89 f0       	breq	.+34     	; 0x2140 <EXTI_u8IntDisable+0x46>
    211e:	2b 81       	ldd	r18, Y+3	; 0x03
    2120:	3c 81       	ldd	r19, Y+4	; 0x04
    2122:	22 30       	cpi	r18, 0x02	; 2
    2124:	31 05       	cpc	r19, r1
    2126:	a1 f0       	breq	.+40     	; 0x2150 <EXTI_u8IntDisable+0x56>
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	c1 f4       	brne	.+48     	; 0x2160 <EXTI_u8IntDisable+0x66>
	{
	case EXTI_u8INT0:CLR_BIT(GICR,GICR_INT0);break;
    2130:	ab e5       	ldi	r26, 0x5B	; 91
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	eb e5       	ldi	r30, 0x5B	; 91
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8f 7b       	andi	r24, 0xBF	; 191
    213c:	8c 93       	st	X, r24
    213e:	12 c0       	rjmp	.+36     	; 0x2164 <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT1:CLR_BIT(GICR,GICR_INT1);break;
    2140:	ab e5       	ldi	r26, 0x5B	; 91
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	eb e5       	ldi	r30, 0x5B	; 91
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8f 77       	andi	r24, 0x7F	; 127
    214c:	8c 93       	st	X, r24
    214e:	0a c0       	rjmp	.+20     	; 0x2164 <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT2:CLR_BIT(GICR,GICR_INT2);break;
    2150:	ab e5       	ldi	r26, 0x5B	; 91
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	eb e5       	ldi	r30, 0x5B	; 91
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8f 7d       	andi	r24, 0xDF	; 223
    215c:	8c 93       	st	X, r24
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <EXTI_u8IntDisable+0x6a>
	default  : Local_u8ErrorState=NOK;break;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <EXTI_u8SetCallBack>:
uint8 EXTI_u8SetCallBack(uint8 Copy_u8Int,void (*Copy_pfFuncPtr)(void))
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	00 d0       	rcall	.+0      	; 0x217a <EXTI_u8SetCallBack+0x6>
    217a:	00 d0       	rcall	.+0      	; 0x217c <EXTI_u8SetCallBack+0x8>
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	8a 83       	std	Y+2, r24	; 0x02
    2182:	7c 83       	std	Y+4, r23	; 0x04
    2184:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8StateError=OK;
    2186:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pfFuncPtr!=NULL)
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	99 f0       	breq	.+38     	; 0x21b6 <EXTI_u8SetCallBack+0x42>
	{
		if(Copy_u8Int<=EXTI_u8INT2)
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	68 f4       	brcc	.+26     	; 0x21b0 <EXTI_u8SetCallBack+0x3c>
		{
			EXTI_pfIntFuncPtr[Copy_u8Int]=Copy_pfFuncPtr;
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	fc 01       	movw	r30, r24
    21a2:	e0 59       	subi	r30, 0x90	; 144
    21a4:	fe 4f       	sbci	r31, 0xFE	; 254
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <EXTI_u8SetCallBack+0x46>
		}
		else Local_u8StateError=NOK;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <EXTI_u8SetCallBack+0x46>
	}
	else Local_u8StateError=NULL_PTR_ERR;
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8StateError;
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    21ca:	1f 92       	push	r1
    21cc:	0f 92       	push	r0
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	0f 92       	push	r0
    21d2:	11 24       	eor	r1, r1
    21d4:	2f 93       	push	r18
    21d6:	3f 93       	push	r19
    21d8:	4f 93       	push	r20
    21da:	5f 93       	push	r21
    21dc:	6f 93       	push	r22
    21de:	7f 93       	push	r23
    21e0:	8f 93       	push	r24
    21e2:	9f 93       	push	r25
    21e4:	af 93       	push	r26
    21e6:	bf 93       	push	r27
    21e8:	ef 93       	push	r30
    21ea:	ff 93       	push	r31
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT0]!=NULL)
    21f4:	80 91 70 01 	lds	r24, 0x0170
    21f8:	90 91 71 01 	lds	r25, 0x0171
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	29 f0       	breq	.+10     	; 0x220a <__vector_1+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT0]();
    2200:	e0 91 70 01 	lds	r30, 0x0170
    2204:	f0 91 71 01 	lds	r31, 0x0171
    2208:	09 95       	icall
	}
}
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	ff 91       	pop	r31
    2210:	ef 91       	pop	r30
    2212:	bf 91       	pop	r27
    2214:	af 91       	pop	r26
    2216:	9f 91       	pop	r25
    2218:	8f 91       	pop	r24
    221a:	7f 91       	pop	r23
    221c:	6f 91       	pop	r22
    221e:	5f 91       	pop	r21
    2220:	4f 91       	pop	r20
    2222:	3f 91       	pop	r19
    2224:	2f 91       	pop	r18
    2226:	0f 90       	pop	r0
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	0f 90       	pop	r0
    222c:	1f 90       	pop	r1
    222e:	18 95       	reti

00002230 <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    2230:	1f 92       	push	r1
    2232:	0f 92       	push	r0
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	0f 92       	push	r0
    2238:	11 24       	eor	r1, r1
    223a:	2f 93       	push	r18
    223c:	3f 93       	push	r19
    223e:	4f 93       	push	r20
    2240:	5f 93       	push	r21
    2242:	6f 93       	push	r22
    2244:	7f 93       	push	r23
    2246:	8f 93       	push	r24
    2248:	9f 93       	push	r25
    224a:	af 93       	push	r26
    224c:	bf 93       	push	r27
    224e:	ef 93       	push	r30
    2250:	ff 93       	push	r31
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT1]!=NULL)
    225a:	80 91 72 01 	lds	r24, 0x0172
    225e:	90 91 73 01 	lds	r25, 0x0173
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	29 f0       	breq	.+10     	; 0x2270 <__vector_2+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT1]();
    2266:	e0 91 72 01 	lds	r30, 0x0172
    226a:	f0 91 73 01 	lds	r31, 0x0173
    226e:	09 95       	icall
	}

}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	ff 91       	pop	r31
    2276:	ef 91       	pop	r30
    2278:	bf 91       	pop	r27
    227a:	af 91       	pop	r26
    227c:	9f 91       	pop	r25
    227e:	8f 91       	pop	r24
    2280:	7f 91       	pop	r23
    2282:	6f 91       	pop	r22
    2284:	5f 91       	pop	r21
    2286:	4f 91       	pop	r20
    2288:	3f 91       	pop	r19
    228a:	2f 91       	pop	r18
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	0f 90       	pop	r0
    2292:	1f 90       	pop	r1
    2294:	18 95       	reti

00002296 <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    2296:	1f 92       	push	r1
    2298:	0f 92       	push	r0
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	0f 92       	push	r0
    229e:	11 24       	eor	r1, r1
    22a0:	2f 93       	push	r18
    22a2:	3f 93       	push	r19
    22a4:	4f 93       	push	r20
    22a6:	5f 93       	push	r21
    22a8:	6f 93       	push	r22
    22aa:	7f 93       	push	r23
    22ac:	8f 93       	push	r24
    22ae:	9f 93       	push	r25
    22b0:	af 93       	push	r26
    22b2:	bf 93       	push	r27
    22b4:	ef 93       	push	r30
    22b6:	ff 93       	push	r31
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT2]!=NULL)
    22c0:	80 91 74 01 	lds	r24, 0x0174
    22c4:	90 91 75 01 	lds	r25, 0x0175
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	29 f0       	breq	.+10     	; 0x22d6 <__vector_3+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT2]();
    22cc:	e0 91 74 01 	lds	r30, 0x0174
    22d0:	f0 91 75 01 	lds	r31, 0x0175
    22d4:	09 95       	icall
	}

}
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	bf 91       	pop	r27
    22e0:	af 91       	pop	r26
    22e2:	9f 91       	pop	r25
    22e4:	8f 91       	pop	r24
    22e6:	7f 91       	pop	r23
    22e8:	6f 91       	pop	r22
    22ea:	5f 91       	pop	r21
    22ec:	4f 91       	pop	r20
    22ee:	3f 91       	pop	r19
    22f0:	2f 91       	pop	r18
    22f2:	0f 90       	pop	r0
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	0f 90       	pop	r0
    22f8:	1f 90       	pop	r1
    22fa:	18 95       	reti

000022fc <GIE_voidEnableGlobal>:
#include "STD_TYPES.h"
#include "GIE_reg.h"
#include "GIE_interface.h"

void GIE_voidEnableGlobal(void)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	__asm  __volatile("SEI");
    2304:	78 94       	sei
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG,SREG_I);
	__asm  __volatile("CLI");
    2314:	f8 94       	cli
}
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <KPD_u8GetPressedKey>:
#include "KPD_prv.h"


/*required all row pins are input pulledup and cols pins are output high*/
uint8 KPD_u8GetPressedKey(void)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <KPD_u8GetPressedKey+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <KPD_u8GetPressedKey+0x8>
    2324:	0f 92       	push	r0
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8PressedKey=KPD_u8NO_PRESSED_KEY_VAL;
    232a:	8f ef       	ldi	r24, 0xFF	; 255
    232c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ColCouter;
	uint8 Local_u8KeyState;
	static uint8 Local_u8ColArr[KPD_COLS_NUM]={KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN,KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
    232e:	19 82       	std	Y+1, r1	; 0x01
    2330:	5e c0       	rjmp	.+188    	; 0x23ee <KPD_u8GetPressedKey+0xd2>
	{
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_LOW);
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	fc 01       	movw	r30, r24
    233a:	ec 5a       	subi	r30, 0xAC	; 172
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	90 81       	ld	r25, Z
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	69 2f       	mov	r22, r25
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
		for(Local_u8RowCouter=0;Local_u8RowCouter<KPD_ROWS_NUM;Local_u8RowCouter++)
    234a:	1a 82       	std	Y+2, r1	; 0x02
    234c:	3d c0       	rjmp	.+122    	; 0x23c8 <KPD_u8GetPressedKey+0xac>
		{
			DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	fc 01       	movw	r30, r24
    2356:	e0 5b       	subi	r30, 0xB0	; 176
    2358:	fe 4f       	sbci	r31, 0xFE	; 254
    235a:	90 81       	ld	r25, Z
    235c:	9e 01       	movw	r18, r28
    235e:	2c 5f       	subi	r18, 0xFC	; 252
    2360:	3f 4f       	sbci	r19, 0xFF	; 255
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	69 2f       	mov	r22, r25
    2366:	a9 01       	movw	r20, r18
    2368:	0e 94 92 0c 	call	0x1924	; 0x1924 <DIO_u8GetPinValue>
			if(Local_u8KeyState==DIO_u8PIN_LOW)
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	88 23       	and	r24, r24
    2370:	41 f5       	brne	.+80     	; 0x23c2 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowCouter][Local_u8ColCouter];
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	48 2f       	mov	r20, r24
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	ca 01       	movw	r24, r20
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	82 0f       	add	r24, r18
    238a:	93 1f       	adc	r25, r19
    238c:	fc 01       	movw	r30, r24
    238e:	e0 5c       	subi	r30, 0xC0	; 192
    2390:	fe 4f       	sbci	r31, 0xFE	; 254
    2392:	80 81       	ld	r24, Z
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	0f c0       	rjmp	.+30     	; 0x23b6 <KPD_u8GetPressedKey+0x9a>
				/*wait until the key is released*/
				while(Local_u8KeyState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	fc 01       	movw	r30, r24
    23a0:	e0 5b       	subi	r30, 0xB0	; 176
    23a2:	fe 4f       	sbci	r31, 0xFE	; 254
    23a4:	90 81       	ld	r25, Z
    23a6:	9e 01       	movw	r18, r28
    23a8:	2c 5f       	subi	r18, 0xFC	; 252
    23aa:	3f 4f       	sbci	r19, 0xFF	; 255
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	69 2f       	mov	r22, r25
    23b0:	a9 01       	movw	r20, r18
    23b2:	0e 94 92 0c 	call	0x1924	; 0x1924 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
			if(Local_u8KeyState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowCouter][Local_u8ColCouter];
				/*wait until the key is released*/
				while(Local_u8KeyState==DIO_u8PIN_LOW)
    23b6:	8c 81       	ldd	r24, Y+4	; 0x04
    23b8:	88 23       	and	r24, r24
    23ba:	71 f3       	breq	.-36     	; 0x2398 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
				}
				return Local_u8PressedKey;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	1c c0       	rjmp	.+56     	; 0x23fa <KPD_u8GetPressedKey+0xde>
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
	{
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_LOW);
		for(Local_u8RowCouter=0;Local_u8RowCouter<KPD_ROWS_NUM;Local_u8RowCouter++)
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	84 30       	cpi	r24, 0x04	; 4
    23cc:	08 f4       	brcc	.+2      	; 0x23d0 <KPD_u8GetPressedKey+0xb4>
    23ce:	bf cf       	rjmp	.-130    	; 0x234e <KPD_u8GetPressedKey+0x32>
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_HIGH);
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	fc 01       	movw	r30, r24
    23d8:	ec 5a       	subi	r30, 0xAC	; 172
    23da:	fe 4f       	sbci	r31, 0xFE	; 254
    23dc:	90 81       	ld	r25, Z
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	69 2f       	mov	r22, r25
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
	uint8 Local_u8ColCouter;
	uint8 Local_u8KeyState;
	static uint8 Local_u8ColArr[KPD_COLS_NUM]={KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN,KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	08 f4       	brcc	.+2      	; 0x23f6 <KPD_u8GetPressedKey+0xda>
    23f4:	9e cf       	rjmp	.-196    	; 0x2332 <KPD_u8GetPressedKey+0x16>
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_prv.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    2414:	ea e3       	ldi	r30, 0x3A	; 58
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    241c:	e7 e3       	ldi	r30, 0x37	; 55
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	8b ef       	ldi	r24, 0xFB	; 251
    2422:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    2424:	e4 e3       	ldi	r30, 0x34	; 52
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 ef       	ldi	r24, 0xF0	; 240
    242a:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    242c:	e1 e3       	ldi	r30, 0x31	; 49
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 eb       	ldi	r24, 0xB0	; 176
    2432:	80 83       	st	Z, r24

	PORTA=PORTA_INITIAL_VALUE;
    2434:	eb e3       	ldi	r30, 0x3B	; 59
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    243a:	e8 e3       	ldi	r30, 0x38	; 56
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    2440:	e5 e3       	ldi	r30, 0x35	; 53
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	8f e0       	ldi	r24, 0x0F	; 15
    2446:	80 83       	st	Z, r24
	PORTD=PORTD_INITIAL_VALUE;
    2448:	e2 e3       	ldi	r30, 0x32	; 50
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	8c e0       	ldi	r24, 0x0C	; 12
    244e:	80 83       	st	Z, r24


}
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <SSD_u8SetNumber>:

uint8 SSD_u8Arr[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE}; //seven segment values


uint8 SSD_u8SetNumber(const SSD_t* Copy_SSDObject,uint8 Copy_u8Number)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <SSD_u8SetNumber+0x6>
    245c:	00 d0       	rcall	.+0      	; 0x245e <SSD_u8SetNumber+0x8>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	9b 83       	std	Y+3, r25	; 0x03
    2464:	8a 83       	std	Y+2, r24	; 0x02
    2466:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8StateError=OK;
    2468:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSDObject!=NULL&&Copy_u8Number<=9)
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	09 f4       	brne	.+2      	; 0x2474 <SSD_u8SetNumber+0x1e>
    2472:	45 c0       	rjmp	.+138    	; 0x24fe <SSD_u8SetNumber+0xa8>
    2474:	8c 81       	ldd	r24, Y+4	; 0x04
    2476:	8a 30       	cpi	r24, 0x0A	; 10
    2478:	08 f0       	brcs	.+2      	; 0x247c <SSD_u8SetNumber+0x26>
    247a:	41 c0       	rjmp	.+130    	; 0x24fe <SSD_u8SetNumber+0xa8>
	{
		if(Copy_SSDObject->Type==ANODE)
    247c:	ea 81       	ldd	r30, Y+2	; 0x02
    247e:	fb 81       	ldd	r31, Y+3	; 0x03
    2480:	80 81       	ld	r24, Z
    2482:	88 23       	and	r24, r24
    2484:	d9 f4       	brne	.+54     	; 0x24bc <SSD_u8SetNumber+0x66>
		{
			DIO_u8SetPortValue(Copy_SSDObject->Port,~SSD_u8Arr[Copy_u8Number]);
    2486:	ea 81       	ldd	r30, Y+2	; 0x02
    2488:	fb 81       	ldd	r31, Y+3	; 0x03
    248a:	21 81       	ldd	r18, Z+1	; 0x01
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	fc 01       	movw	r30, r24
    2494:	e8 5a       	subi	r30, 0xA8	; 168
    2496:	fe 4f       	sbci	r31, 0xFE	; 254
    2498:	80 81       	ld	r24, Z
    249a:	98 2f       	mov	r25, r24
    249c:	90 95       	com	r25
    249e:	82 2f       	mov	r24, r18
    24a0:	69 2f       	mov	r22, r25
    24a2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <DIO_u8SetPortValue>
			DIO_u8SetPinValue(Copy_SSDObject->EnablePort,Copy_SSDObject->EnablePin,DIO_u8PIN_HIGH);
    24a6:	ea 81       	ldd	r30, Y+2	; 0x02
    24a8:	fb 81       	ldd	r31, Y+3	; 0x03
    24aa:	83 81       	ldd	r24, Z+3	; 0x03
    24ac:	ea 81       	ldd	r30, Y+2	; 0x02
    24ae:	fb 81       	ldd	r31, Y+3	; 0x03
    24b0:	94 81       	ldd	r25, Z+4	; 0x04
    24b2:	69 2f       	mov	r22, r25
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    24ba:	23 c0       	rjmp	.+70     	; 0x2502 <SSD_u8SetNumber+0xac>
		}
		else if(Copy_SSDObject->Type==CATHODE)
    24bc:	ea 81       	ldd	r30, Y+2	; 0x02
    24be:	fb 81       	ldd	r31, Y+3	; 0x03
    24c0:	80 81       	ld	r24, Z
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	c9 f4       	brne	.+50     	; 0x24f8 <SSD_u8SetNumber+0xa2>
		{
			DIO_u8SetPortValue(Copy_SSDObject->Port,SSD_u8Arr[Copy_u8Number]);
    24c6:	ea 81       	ldd	r30, Y+2	; 0x02
    24c8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ca:	21 81       	ldd	r18, Z+1	; 0x01
    24cc:	8c 81       	ldd	r24, Y+4	; 0x04
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	fc 01       	movw	r30, r24
    24d4:	e8 5a       	subi	r30, 0xA8	; 168
    24d6:	fe 4f       	sbci	r31, 0xFE	; 254
    24d8:	90 81       	ld	r25, Z
    24da:	82 2f       	mov	r24, r18
    24dc:	69 2f       	mov	r22, r25
    24de:	0e 94 75 0d 	call	0x1aea	; 0x1aea <DIO_u8SetPortValue>
			DIO_u8SetPinValue(Copy_SSDObject->EnablePort,Copy_SSDObject->EnablePin,DIO_u8PIN_LOW);
    24e2:	ea 81       	ldd	r30, Y+2	; 0x02
    24e4:	fb 81       	ldd	r31, Y+3	; 0x03
    24e6:	83 81       	ldd	r24, Z+3	; 0x03
    24e8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ea:	fb 81       	ldd	r31, Y+3	; 0x03
    24ec:	94 81       	ldd	r25, Z+4	; 0x04
    24ee:	69 2f       	mov	r22, r25
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    24f6:	05 c0       	rjmp	.+10     	; 0x2502 <SSD_u8SetNumber+0xac>
		}
		else
		{
			Local_u8StateError=NOK;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <SSD_u8SetNumber+0xac>
		}
		
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8StateError;
    2502:	89 81       	ldd	r24, Y+1	; 0x01
		
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <STEPPER_u8Rotate>:
#include "PORT_interface.h"
#include "STEPPER_prv.h"
#include "STEPPER_interface.h"

uint8 STEPPER_u8Rotate(STEPPER_t* Object,uint16 Copy_u16Angle,uint8 Copy_Directon)
{
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	ca 57       	subi	r28, 0x7A	; 122
    2520:	d0 40       	sbci	r29, 0x00	; 0
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	fe 01       	movw	r30, r28
    252e:	ea 58       	subi	r30, 0x8A	; 138
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
    2536:	fe 01       	movw	r30, r28
    2538:	e8 58       	subi	r30, 0x88	; 136
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	71 83       	std	Z+1, r23	; 0x01
    253e:	60 83       	st	Z, r22
    2540:	fe 01       	movw	r30, r28
    2542:	e6 58       	subi	r30, 0x86	; 134
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	40 83       	st	Z, r20
	uint8 LocalErrorState=OK;
    2548:	fe 01       	movw	r30, r28
    254a:	eb 58       	subi	r30, 0x8B	; 139
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	10 82       	st	Z, r1
	uint16 LocalCounter;
	if(Object!=NULL)
    2550:	fe 01       	movw	r30, r28
    2552:	ea 58       	subi	r30, 0x8A	; 138
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	09 f4       	brne	.+2      	; 0x2560 <STEPPER_u8Rotate+0x4e>
    255e:	b3 c7       	rjmp	.+3942   	; 0x34c6 <STEPPER_u8Rotate+0xfb4>
	{
		if(Object->Port<=DIO_u8PORTD && Object->BluePin<=DIO_u8PIN7 && Object->PinkPin<=DIO_u8PIN7 && Object->YellowPin<=DIO_u8PIN7 && Object->OrangePin<=DIO_u8PIN7)
    2560:	fe 01       	movw	r30, r28
    2562:	ea 58       	subi	r30, 0x8A	; 138
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	01 90       	ld	r0, Z+
    2568:	f0 81       	ld	r31, Z
    256a:	e0 2d       	mov	r30, r0
    256c:	80 81       	ld	r24, Z
    256e:	84 30       	cpi	r24, 0x04	; 4
    2570:	08 f0       	brcs	.+2      	; 0x2574 <STEPPER_u8Rotate+0x62>
    2572:	a3 c7       	rjmp	.+3910   	; 0x34ba <STEPPER_u8Rotate+0xfa8>
    2574:	fe 01       	movw	r30, r28
    2576:	ea 58       	subi	r30, 0x8A	; 138
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	01 90       	ld	r0, Z+
    257c:	f0 81       	ld	r31, Z
    257e:	e0 2d       	mov	r30, r0
    2580:	81 81       	ldd	r24, Z+1	; 0x01
    2582:	88 30       	cpi	r24, 0x08	; 8
    2584:	08 f0       	brcs	.+2      	; 0x2588 <STEPPER_u8Rotate+0x76>
    2586:	99 c7       	rjmp	.+3890   	; 0x34ba <STEPPER_u8Rotate+0xfa8>
    2588:	fe 01       	movw	r30, r28
    258a:	ea 58       	subi	r30, 0x8A	; 138
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	01 90       	ld	r0, Z+
    2590:	f0 81       	ld	r31, Z
    2592:	e0 2d       	mov	r30, r0
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	88 30       	cpi	r24, 0x08	; 8
    2598:	08 f0       	brcs	.+2      	; 0x259c <STEPPER_u8Rotate+0x8a>
    259a:	8f c7       	rjmp	.+3870   	; 0x34ba <STEPPER_u8Rotate+0xfa8>
    259c:	fe 01       	movw	r30, r28
    259e:	ea 58       	subi	r30, 0x8A	; 138
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	01 90       	ld	r0, Z+
    25a4:	f0 81       	ld	r31, Z
    25a6:	e0 2d       	mov	r30, r0
    25a8:	83 81       	ldd	r24, Z+3	; 0x03
    25aa:	88 30       	cpi	r24, 0x08	; 8
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <STEPPER_u8Rotate+0x9e>
    25ae:	85 c7       	rjmp	.+3850   	; 0x34ba <STEPPER_u8Rotate+0xfa8>
    25b0:	fe 01       	movw	r30, r28
    25b2:	ea 58       	subi	r30, 0x8A	; 138
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	01 90       	ld	r0, Z+
    25b8:	f0 81       	ld	r31, Z
    25ba:	e0 2d       	mov	r30, r0
    25bc:	84 81       	ldd	r24, Z+4	; 0x04
    25be:	88 30       	cpi	r24, 0x08	; 8
    25c0:	08 f0       	brcs	.+2      	; 0x25c4 <STEPPER_u8Rotate+0xb2>
    25c2:	7b c7       	rjmp	.+3830   	; 0x34ba <STEPPER_u8Rotate+0xfa8>
		{
			uint16 Local_StepsNumber=(uint16)((uint32)Copy_u16Angle*1024/180);
    25c4:	fe 01       	movw	r30, r28
    25c6:	e8 58       	subi	r30, 0x88	; 136
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	cc 01       	movw	r24, r24
    25d0:	a0 e0       	ldi	r26, 0x00	; 0
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	07 2e       	mov	r0, r23
    25d6:	7a e0       	ldi	r23, 0x0A	; 10
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	aa 1f       	adc	r26, r26
    25de:	bb 1f       	adc	r27, r27
    25e0:	7a 95       	dec	r23
    25e2:	d1 f7       	brne	.-12     	; 0x25d8 <STEPPER_u8Rotate+0xc6>
    25e4:	70 2d       	mov	r23, r0
    25e6:	24 eb       	ldi	r18, 0xB4	; 180
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 28 22 	call	0x4450	; 0x4450 <__udivmodsi4>
    25f6:	da 01       	movw	r26, r20
    25f8:	c9 01       	movw	r24, r18
    25fa:	fe 01       	movw	r30, r28
    25fc:	ef 58       	subi	r30, 0x8F	; 143
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
			if(Copy_Directon==CCW)
    2604:	fe 01       	movw	r30, r28
    2606:	e6 58       	subi	r30, 0x86	; 134
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	88 23       	and	r24, r24
    260e:	09 f0       	breq	.+2      	; 0x2612 <STEPPER_u8Rotate+0x100>
    2610:	10 c4       	rjmp	.+2080   	; 0x2e32 <STEPPER_u8Rotate+0x920>
			{
				for(LocalCounter=0;LocalCounter<=Local_StepsNumber;LocalCounter++)
    2612:	fe 01       	movw	r30, r28
    2614:	ed 58       	subi	r30, 0x8D	; 141
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	11 82       	std	Z+1, r1	; 0x01
    261a:	10 82       	st	Z, r1
    261c:	fa c3       	rjmp	.+2036   	; 0x2e12 <STEPPER_u8Rotate+0x900>
				{
					if(LocalCounter%4==0)
    261e:	fe 01       	movw	r30, r28
    2620:	ed 58       	subi	r30, 0x8D	; 141
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	83 70       	andi	r24, 0x03	; 3
    262a:	90 70       	andi	r25, 0x00	; 0
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	09 f0       	breq	.+2      	; 0x2632 <STEPPER_u8Rotate+0x120>
    2630:	fd c0       	rjmp	.+506    	; 0x282c <STEPPER_u8Rotate+0x31a>
					{
						DIO_u8SetPinValue(Object->Port,Object->PinkPin,DIO_u8PIN_HIGH);
    2632:	fe 01       	movw	r30, r28
    2634:	ea 58       	subi	r30, 0x8A	; 138
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	01 90       	ld	r0, Z+
    263a:	f0 81       	ld	r31, Z
    263c:	e0 2d       	mov	r30, r0
    263e:	80 81       	ld	r24, Z
    2640:	fe 01       	movw	r30, r28
    2642:	ea 58       	subi	r30, 0x8A	; 138
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	01 90       	ld	r0, Z+
    2648:	f0 81       	ld	r31, Z
    264a:	e0 2d       	mov	r30, r0
    264c:	92 81       	ldd	r25, Z+2	; 0x02
    264e:	69 2f       	mov	r22, r25
    2650:	41 e0       	ldi	r20, 0x01	; 1
    2652:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_HIGH);
    2656:	fe 01       	movw	r30, r28
    2658:	ea 58       	subi	r30, 0x8A	; 138
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	01 90       	ld	r0, Z+
    265e:	f0 81       	ld	r31, Z
    2660:	e0 2d       	mov	r30, r0
    2662:	80 81       	ld	r24, Z
    2664:	fe 01       	movw	r30, r28
    2666:	ea 58       	subi	r30, 0x8A	; 138
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	01 90       	ld	r0, Z+
    266c:	f0 81       	ld	r31, Z
    266e:	e0 2d       	mov	r30, r0
    2670:	94 81       	ldd	r25, Z+4	; 0x04
    2672:	69 2f       	mov	r22, r25
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_HIGH);
    267a:	fe 01       	movw	r30, r28
    267c:	ea 58       	subi	r30, 0x8A	; 138
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	01 90       	ld	r0, Z+
    2682:	f0 81       	ld	r31, Z
    2684:	e0 2d       	mov	r30, r0
    2686:	80 81       	ld	r24, Z
    2688:	fe 01       	movw	r30, r28
    268a:	ea 58       	subi	r30, 0x8A	; 138
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	01 90       	ld	r0, Z+
    2690:	f0 81       	ld	r31, Z
    2692:	e0 2d       	mov	r30, r0
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	69 2f       	mov	r22, r25
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_LOW);
    269e:	fe 01       	movw	r30, r28
    26a0:	ea 58       	subi	r30, 0x8A	; 138
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	01 90       	ld	r0, Z+
    26a6:	f0 81       	ld	r31, Z
    26a8:	e0 2d       	mov	r30, r0
    26aa:	80 81       	ld	r24, Z
    26ac:	fe 01       	movw	r30, r28
    26ae:	ea 58       	subi	r30, 0x8A	; 138
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	01 90       	ld	r0, Z+
    26b4:	f0 81       	ld	r31, Z
    26b6:	e0 2d       	mov	r30, r0
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	69 2f       	mov	r22, r25
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    26c2:	fe 01       	movw	r30, r28
    26c4:	e3 59       	subi	r30, 0x93	; 147
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a0 e0       	ldi	r26, 0x00	; 0
    26ce:	b0 e4       	ldi	r27, 0x40	; 64
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	8e 01       	movw	r16, r28
    26da:	07 59       	subi	r16, 0x97	; 151
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	e3 59       	subi	r30, 0x93	; 147
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2706:	fe 01       	movw	r30, r28
    2708:	e7 59       	subi	r30, 0x97	; 151
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	44 f4       	brge	.+16     	; 0x2734 <STEPPER_u8Rotate+0x222>
		__ticks = 1;
    2724:	fe 01       	movw	r30, r28
    2726:	e9 59       	subi	r30, 0x99	; 153
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	80 83       	st	Z, r24
    2732:	64 c0       	rjmp	.+200    	; 0x27fc <STEPPER_u8Rotate+0x2ea>
	else if (__tmp > 65535)
    2734:	fe 01       	movw	r30, r28
    2736:	e7 59       	subi	r30, 0x97	; 151
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	0c f0       	brlt	.+2      	; 0x2754 <STEPPER_u8Rotate+0x242>
    2752:	43 c0       	rjmp	.+134    	; 0x27da <STEPPER_u8Rotate+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	fe 01       	movw	r30, r28
    2756:	e3 59       	subi	r30, 0x93	; 147
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8e 01       	movw	r16, r28
    2774:	09 59       	subi	r16, 0x99	; 153
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	1f c0       	rjmp	.+62     	; 0x27ca <STEPPER_u8Rotate+0x2b8>
    278c:	fe 01       	movw	r30, r28
    278e:	eb 59       	subi	r30, 0x9B	; 155
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 e9       	ldi	r24, 0x90	; 144
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	fe 01       	movw	r30, r28
    279c:	eb 59       	subi	r30, 0x9B	; 155
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <STEPPER_u8Rotate+0x292>
    27a8:	fe 01       	movw	r30, r28
    27aa:	eb 59       	subi	r30, 0x9B	; 155
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	de 01       	movw	r26, r28
    27b4:	a9 59       	subi	r26, 0x99	; 153
    27b6:	bf 4f       	sbci	r27, 0xFF	; 255
    27b8:	fe 01       	movw	r30, r28
    27ba:	e9 59       	subi	r30, 0x99	; 153
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	11 96       	adiw	r26, 0x01	; 1
    27c6:	9c 93       	st	X, r25
    27c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	fe 01       	movw	r30, r28
    27cc:	e9 59       	subi	r30, 0x99	; 153
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	d1 f6       	brne	.-76     	; 0x278c <STEPPER_u8Rotate+0x27a>
    27d8:	11 c3       	rjmp	.+1570   	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27da:	8e 01       	movw	r16, r28
    27dc:	09 59       	subi	r16, 0x99	; 153
    27de:	1f 4f       	sbci	r17, 0xFF	; 255
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 59       	subi	r30, 0x97	; 151
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	80 83       	st	Z, r24
    27fc:	de 01       	movw	r26, r28
    27fe:	ad 59       	subi	r26, 0x9D	; 157
    2800:	bf 4f       	sbci	r27, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e9 59       	subi	r30, 0x99	; 153
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	11 96       	adiw	r26, 0x01	; 1
    280e:	9c 93       	st	X, r25
    2810:	8e 93       	st	-X, r24
    2812:	fe 01       	movw	r30, r28
    2814:	ed 59       	subi	r30, 0x9D	; 157
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <STEPPER_u8Rotate+0x30a>
    2820:	fe 01       	movw	r30, r28
    2822:	ed 59       	subi	r30, 0x9D	; 157
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
    282a:	e8 c2       	rjmp	.+1488   	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
						_delay_ms(2);
					}
					else if(LocalCounter%4==1)
    282c:	fe 01       	movw	r30, r28
    282e:	ed 58       	subi	r30, 0x8D	; 141
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	91 81       	ldd	r25, Z+1	; 0x01
    2836:	83 70       	andi	r24, 0x03	; 3
    2838:	90 70       	andi	r25, 0x00	; 0
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	91 05       	cpc	r25, r1
    283e:	09 f0       	breq	.+2      	; 0x2842 <STEPPER_u8Rotate+0x330>
    2840:	fd c0       	rjmp	.+506    	; 0x2a3c <STEPPER_u8Rotate+0x52a>
					{
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_HIGH);
    2842:	fe 01       	movw	r30, r28
    2844:	ea 58       	subi	r30, 0x8A	; 138
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	01 90       	ld	r0, Z+
    284a:	f0 81       	ld	r31, Z
    284c:	e0 2d       	mov	r30, r0
    284e:	80 81       	ld	r24, Z
    2850:	fe 01       	movw	r30, r28
    2852:	ea 58       	subi	r30, 0x8A	; 138
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	01 90       	ld	r0, Z+
    2858:	f0 81       	ld	r31, Z
    285a:	e0 2d       	mov	r30, r0
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	69 2f       	mov	r22, r25
    2860:	41 e0       	ldi	r20, 0x01	; 1
    2862:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_HIGH);
    2866:	fe 01       	movw	r30, r28
    2868:	ea 58       	subi	r30, 0x8A	; 138
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	01 90       	ld	r0, Z+
    286e:	f0 81       	ld	r31, Z
    2870:	e0 2d       	mov	r30, r0
    2872:	80 81       	ld	r24, Z
    2874:	fe 01       	movw	r30, r28
    2876:	ea 58       	subi	r30, 0x8A	; 138
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	01 90       	ld	r0, Z+
    287c:	f0 81       	ld	r31, Z
    287e:	e0 2d       	mov	r30, r0
    2880:	94 81       	ldd	r25, Z+4	; 0x04
    2882:	69 2f       	mov	r22, r25
    2884:	41 e0       	ldi	r20, 0x01	; 1
    2886:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_HIGH);
    288a:	fe 01       	movw	r30, r28
    288c:	ea 58       	subi	r30, 0x8A	; 138
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	01 90       	ld	r0, Z+
    2892:	f0 81       	ld	r31, Z
    2894:	e0 2d       	mov	r30, r0
    2896:	80 81       	ld	r24, Z
    2898:	fe 01       	movw	r30, r28
    289a:	ea 58       	subi	r30, 0x8A	; 138
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	01 90       	ld	r0, Z+
    28a0:	f0 81       	ld	r31, Z
    28a2:	e0 2d       	mov	r30, r0
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	69 2f       	mov	r22, r25
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->PinkPin,DIO_u8PIN_LOW);
    28ae:	fe 01       	movw	r30, r28
    28b0:	ea 58       	subi	r30, 0x8A	; 138
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	01 90       	ld	r0, Z+
    28b6:	f0 81       	ld	r31, Z
    28b8:	e0 2d       	mov	r30, r0
    28ba:	80 81       	ld	r24, Z
    28bc:	fe 01       	movw	r30, r28
    28be:	ea 58       	subi	r30, 0x8A	; 138
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	01 90       	ld	r0, Z+
    28c4:	f0 81       	ld	r31, Z
    28c6:	e0 2d       	mov	r30, r0
    28c8:	92 81       	ldd	r25, Z+2	; 0x02
    28ca:	69 2f       	mov	r22, r25
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    28d2:	fe 01       	movw	r30, r28
    28d4:	e1 5a       	subi	r30, 0xA1	; 161
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e0       	ldi	r26, 0x00	; 0
    28de:	b0 e4       	ldi	r27, 0x40	; 64
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	8e 01       	movw	r16, r28
    28ea:	05 5a       	subi	r16, 0xA5	; 165
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e1 5a       	subi	r30, 0xA1	; 161
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a e7       	ldi	r20, 0x7A	; 122
    2902:	55 e4       	ldi	r21, 0x45	; 69
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2916:	fe 01       	movw	r30, r28
    2918:	e5 5a       	subi	r30, 0xA5	; 165
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	44 f4       	brge	.+16     	; 0x2944 <STEPPER_u8Rotate+0x432>
		__ticks = 1;
    2934:	fe 01       	movw	r30, r28
    2936:	e7 5a       	subi	r30, 0xA7	; 167
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	64 c0       	rjmp	.+200    	; 0x2a0c <STEPPER_u8Rotate+0x4fa>
	else if (__tmp > 65535)
    2944:	fe 01       	movw	r30, r28
    2946:	e5 5a       	subi	r30, 0xA5	; 165
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	0c f0       	brlt	.+2      	; 0x2964 <STEPPER_u8Rotate+0x452>
    2962:	43 c0       	rjmp	.+134    	; 0x29ea <STEPPER_u8Rotate+0x4d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	fe 01       	movw	r30, r28
    2966:	e1 5a       	subi	r30, 0xA1	; 161
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8e 01       	movw	r16, r28
    2984:	07 5a       	subi	r16, 0xA7	; 167
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	1f c0       	rjmp	.+62     	; 0x29da <STEPPER_u8Rotate+0x4c8>
    299c:	fe 01       	movw	r30, r28
    299e:	e9 5a       	subi	r30, 0xA9	; 169
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 e9       	ldi	r24, 0x90	; 144
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	fe 01       	movw	r30, r28
    29ac:	e9 5a       	subi	r30, 0xA9	; 169
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <STEPPER_u8Rotate+0x4a2>
    29b8:	fe 01       	movw	r30, r28
    29ba:	e9 5a       	subi	r30, 0xA9	; 169
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	de 01       	movw	r26, r28
    29c4:	a7 5a       	subi	r26, 0xA7	; 167
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	fe 01       	movw	r30, r28
    29ca:	e7 5a       	subi	r30, 0xA7	; 167
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	11 96       	adiw	r26, 0x01	; 1
    29d6:	9c 93       	st	X, r25
    29d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	fe 01       	movw	r30, r28
    29dc:	e7 5a       	subi	r30, 0xA7	; 167
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	d1 f6       	brne	.-76     	; 0x299c <STEPPER_u8Rotate+0x48a>
    29e8:	09 c2       	rjmp	.+1042   	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	8e 01       	movw	r16, r28
    29ec:	07 5a       	subi	r16, 0xA7	; 167
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e5 5a       	subi	r30, 0xA5	; 165
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	de 01       	movw	r26, r28
    2a0e:	ab 5a       	subi	r26, 0xAB	; 171
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	fe 01       	movw	r30, r28
    2a14:	e7 5a       	subi	r30, 0xA7	; 167
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	eb 5a       	subi	r30, 0xAB	; 171
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <STEPPER_u8Rotate+0x51a>
    2a30:	fe 01       	movw	r30, r28
    2a32:	eb 5a       	subi	r30, 0xAB	; 171
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	e0 c1       	rjmp	.+960    	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
						_delay_ms(2);
					}
					else if(LocalCounter%4==2)
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ed 58       	subi	r30, 0x8D	; 141
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	83 70       	andi	r24, 0x03	; 3
    2a48:	90 70       	andi	r25, 0x00	; 0
    2a4a:	82 30       	cpi	r24, 0x02	; 2
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <STEPPER_u8Rotate+0x540>
    2a50:	fd c0       	rjmp	.+506    	; 0x2c4c <STEPPER_u8Rotate+0x73a>
					{
						DIO_u8SetPinValue(Object->Port,Object->PinkPin,DIO_u8PIN_HIGH);
    2a52:	fe 01       	movw	r30, r28
    2a54:	ea 58       	subi	r30, 0x8A	; 138
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	01 90       	ld	r0, Z+
    2a5a:	f0 81       	ld	r31, Z
    2a5c:	e0 2d       	mov	r30, r0
    2a5e:	80 81       	ld	r24, Z
    2a60:	fe 01       	movw	r30, r28
    2a62:	ea 58       	subi	r30, 0x8A	; 138
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	01 90       	ld	r0, Z+
    2a68:	f0 81       	ld	r31, Z
    2a6a:	e0 2d       	mov	r30, r0
    2a6c:	92 81       	ldd	r25, Z+2	; 0x02
    2a6e:	69 2f       	mov	r22, r25
    2a70:	41 e0       	ldi	r20, 0x01	; 1
    2a72:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_HIGH);
    2a76:	fe 01       	movw	r30, r28
    2a78:	ea 58       	subi	r30, 0x8A	; 138
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	01 90       	ld	r0, Z+
    2a7e:	f0 81       	ld	r31, Z
    2a80:	e0 2d       	mov	r30, r0
    2a82:	80 81       	ld	r24, Z
    2a84:	fe 01       	movw	r30, r28
    2a86:	ea 58       	subi	r30, 0x8A	; 138
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	01 90       	ld	r0, Z+
    2a8c:	f0 81       	ld	r31, Z
    2a8e:	e0 2d       	mov	r30, r0
    2a90:	94 81       	ldd	r25, Z+4	; 0x04
    2a92:	69 2f       	mov	r22, r25
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_HIGH);
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	ea 58       	subi	r30, 0x8A	; 138
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	01 90       	ld	r0, Z+
    2aa2:	f0 81       	ld	r31, Z
    2aa4:	e0 2d       	mov	r30, r0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ea 58       	subi	r30, 0x8A	; 138
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	01 90       	ld	r0, Z+
    2ab0:	f0 81       	ld	r31, Z
    2ab2:	e0 2d       	mov	r30, r0
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	69 2f       	mov	r22, r25
    2ab8:	41 e0       	ldi	r20, 0x01	; 1
    2aba:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_LOW);
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ea 58       	subi	r30, 0x8A	; 138
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	01 90       	ld	r0, Z+
    2ac6:	f0 81       	ld	r31, Z
    2ac8:	e0 2d       	mov	r30, r0
    2aca:	80 81       	ld	r24, Z
    2acc:	fe 01       	movw	r30, r28
    2ace:	ea 58       	subi	r30, 0x8A	; 138
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	01 90       	ld	r0, Z+
    2ad4:	f0 81       	ld	r31, Z
    2ad6:	e0 2d       	mov	r30, r0
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	69 2f       	mov	r22, r25
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	ef 5a       	subi	r30, 0xAF	; 175
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a0 e0       	ldi	r26, 0x00	; 0
    2aee:	b0 e4       	ldi	r27, 0x40	; 64
    2af0:	80 83       	st	Z, r24
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	a2 83       	std	Z+2, r26	; 0x02
    2af6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af8:	8e 01       	movw	r16, r28
    2afa:	03 5b       	subi	r16, 0xB3	; 179
    2afc:	1f 4f       	sbci	r17, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	ef 5a       	subi	r30, 0xAF	; 175
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	4a e7       	ldi	r20, 0x7A	; 122
    2b12:	55 e4       	ldi	r21, 0x45	; 69
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	80 83       	st	Z, r24
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	a2 83       	std	Z+2, r26	; 0x02
    2b24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b26:	fe 01       	movw	r30, r28
    2b28:	e3 5b       	subi	r30, 0xB3	; 179
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	44 f4       	brge	.+16     	; 0x2b54 <STEPPER_u8Rotate+0x642>
		__ticks = 1;
    2b44:	fe 01       	movw	r30, r28
    2b46:	e5 5b       	subi	r30, 0xB5	; 181
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    2b52:	64 c0       	rjmp	.+200    	; 0x2c1c <STEPPER_u8Rotate+0x70a>
	else if (__tmp > 65535)
    2b54:	fe 01       	movw	r30, r28
    2b56:	e3 5b       	subi	r30, 0xB3	; 179
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	0c f0       	brlt	.+2      	; 0x2b74 <STEPPER_u8Rotate+0x662>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <STEPPER_u8Rotate+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b74:	fe 01       	movw	r30, r28
    2b76:	ef 5a       	subi	r30, 0xAF	; 175
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	51 e4       	ldi	r21, 0x41	; 65
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8e 01       	movw	r16, r28
    2b94:	05 5b       	subi	r16, 0xB5	; 181
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
    2baa:	1f c0       	rjmp	.+62     	; 0x2bea <STEPPER_u8Rotate+0x6d8>
    2bac:	fe 01       	movw	r30, r28
    2bae:	e7 5b       	subi	r30, 0xB7	; 183
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 e9       	ldi	r24, 0x90	; 144
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e7 5b       	subi	r30, 0xB7	; 183
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <STEPPER_u8Rotate+0x6b2>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e7 5b       	subi	r30, 0xB7	; 183
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	de 01       	movw	r26, r28
    2bd4:	a5 5b       	subi	r26, 0xB5	; 181
    2bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e5 5b       	subi	r30, 0xB5	; 181
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	11 96       	adiw	r26, 0x01	; 1
    2be6:	9c 93       	st	X, r25
    2be8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e5 5b       	subi	r30, 0xB5	; 181
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	d1 f6       	brne	.-76     	; 0x2bac <STEPPER_u8Rotate+0x69a>
    2bf8:	01 c1       	rjmp	.+514    	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfa:	8e 01       	movw	r16, r28
    2bfc:	05 5b       	subi	r16, 0xB5	; 181
    2bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2c00:	fe 01       	movw	r30, r28
    2c02:	e3 5b       	subi	r30, 0xB3	; 179
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	f8 01       	movw	r30, r16
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
    2c1c:	de 01       	movw	r26, r28
    2c1e:	a9 5b       	subi	r26, 0xB9	; 185
    2c20:	bf 4f       	sbci	r27, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	e5 5b       	subi	r30, 0xB5	; 181
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	91 81       	ldd	r25, Z+1	; 0x01
    2c2c:	11 96       	adiw	r26, 0x01	; 1
    2c2e:	9c 93       	st	X, r25
    2c30:	8e 93       	st	-X, r24
    2c32:	fe 01       	movw	r30, r28
    2c34:	e9 5b       	subi	r30, 0xB9	; 185
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <STEPPER_u8Rotate+0x72a>
    2c40:	fe 01       	movw	r30, r28
    2c42:	e9 5b       	subi	r30, 0xB9	; 185
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	80 83       	st	Z, r24
    2c4a:	d8 c0       	rjmp	.+432    	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
						_delay_ms(2);
					}
					else if(LocalCounter%4==3)
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ed 58       	subi	r30, 0x8D	; 141
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	91 81       	ldd	r25, Z+1	; 0x01
    2c56:	83 70       	andi	r24, 0x03	; 3
    2c58:	90 70       	andi	r25, 0x00	; 0
    2c5a:	83 30       	cpi	r24, 0x03	; 3
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <STEPPER_u8Rotate+0x750>
    2c60:	cd c0       	rjmp	.+410    	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
					{
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_HIGH);
    2c62:	fe 01       	movw	r30, r28
    2c64:	ea 58       	subi	r30, 0x8A	; 138
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	01 90       	ld	r0, Z+
    2c6a:	f0 81       	ld	r31, Z
    2c6c:	e0 2d       	mov	r30, r0
    2c6e:	80 81       	ld	r24, Z
    2c70:	fe 01       	movw	r30, r28
    2c72:	ea 58       	subi	r30, 0x8A	; 138
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	01 90       	ld	r0, Z+
    2c78:	f0 81       	ld	r31, Z
    2c7a:	e0 2d       	mov	r30, r0
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	69 2f       	mov	r22, r25
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->PinkPin,DIO_u8PIN_HIGH);
    2c86:	fe 01       	movw	r30, r28
    2c88:	ea 58       	subi	r30, 0x8A	; 138
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	01 90       	ld	r0, Z+
    2c8e:	f0 81       	ld	r31, Z
    2c90:	e0 2d       	mov	r30, r0
    2c92:	80 81       	ld	r24, Z
    2c94:	fe 01       	movw	r30, r28
    2c96:	ea 58       	subi	r30, 0x8A	; 138
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	01 90       	ld	r0, Z+
    2c9c:	f0 81       	ld	r31, Z
    2c9e:	e0 2d       	mov	r30, r0
    2ca0:	92 81       	ldd	r25, Z+2	; 0x02
    2ca2:	69 2f       	mov	r22, r25
    2ca4:	41 e0       	ldi	r20, 0x01	; 1
    2ca6:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_HIGH);
    2caa:	fe 01       	movw	r30, r28
    2cac:	ea 58       	subi	r30, 0x8A	; 138
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	01 90       	ld	r0, Z+
    2cb2:	f0 81       	ld	r31, Z
    2cb4:	e0 2d       	mov	r30, r0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ea 58       	subi	r30, 0x8A	; 138
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	01 90       	ld	r0, Z+
    2cc0:	f0 81       	ld	r31, Z
    2cc2:	e0 2d       	mov	r30, r0
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	69 2f       	mov	r22, r25
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_LOW);
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ea 58       	subi	r30, 0x8A	; 138
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	01 90       	ld	r0, Z+
    2cd6:	f0 81       	ld	r31, Z
    2cd8:	e0 2d       	mov	r30, r0
    2cda:	80 81       	ld	r24, Z
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ea 58       	subi	r30, 0x8A	; 138
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	01 90       	ld	r0, Z+
    2ce4:	f0 81       	ld	r31, Z
    2ce6:	e0 2d       	mov	r30, r0
    2ce8:	94 81       	ldd	r25, Z+4	; 0x04
    2cea:	69 2f       	mov	r22, r25
    2cec:	40 e0       	ldi	r20, 0x00	; 0
    2cee:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ed 5b       	subi	r30, 0xBD	; 189
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 e0       	ldi	r26, 0x00	; 0
    2cfe:	b0 e4       	ldi	r27, 0x40	; 64
    2d00:	80 83       	st	Z, r24
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	a2 83       	std	Z+2, r26	; 0x02
    2d06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d08:	8e 01       	movw	r16, r28
    2d0a:	01 5c       	subi	r16, 0xC1	; 193
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ed 5b       	subi	r30, 0xBD	; 189
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	4a e7       	ldi	r20, 0x7A	; 122
    2d22:	55 e4       	ldi	r21, 0x45	; 69
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	80 83       	st	Z, r24
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	a2 83       	std	Z+2, r26	; 0x02
    2d34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d36:	fe 01       	movw	r30, r28
    2d38:	ff 96       	adiw	r30, 0x3f	; 63
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <STEPPER_u8Rotate+0x84a>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9e af       	std	Y+62, r25	; 0x3e
    2d58:	8d af       	std	Y+61, r24	; 0x3d
    2d5a:	46 c0       	rjmp	.+140    	; 0x2de8 <STEPPER_u8Rotate+0x8d6>
	else if (__tmp > 65535)
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	ff 96       	adiw	r30, 0x3f	; 63
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	3f ef       	ldi	r19, 0xFF	; 255
    2d6c:	4f e7       	ldi	r20, 0x7F	; 127
    2d6e:	57 e4       	ldi	r21, 0x47	; 71
    2d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d74:	18 16       	cp	r1, r24
    2d76:	64 f5       	brge	.+88     	; 0x2dd0 <STEPPER_u8Rotate+0x8be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d78:	fe 01       	movw	r30, r28
    2d7a:	ed 5b       	subi	r30, 0xBD	; 189
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	60 81       	ld	r22, Z
    2d80:	71 81       	ldd	r23, Z+1	; 0x01
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	93 81       	ldd	r25, Z+3	; 0x03
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e2       	ldi	r20, 0x20	; 32
    2d8c:	51 e4       	ldi	r21, 0x41	; 65
    2d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9e af       	std	Y+62, r25	; 0x3e
    2da4:	8d af       	std	Y+61, r24	; 0x3d
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <STEPPER_u8Rotate+0x8b4>
    2da8:	80 e9       	ldi	r24, 0x90	; 144
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	9c af       	std	Y+60, r25	; 0x3c
    2dae:	8b af       	std	Y+59, r24	; 0x3b
    2db0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2db2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <STEPPER_u8Rotate+0x8a2>
    2db8:	9c af       	std	Y+60, r25	; 0x3c
    2dba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9e af       	std	Y+62, r25	; 0x3e
    2dc4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <STEPPER_u8Rotate+0x896>
    2dce:	16 c0       	rjmp	.+44     	; 0x2dfc <STEPPER_u8Rotate+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ff 96       	adiw	r30, 0x3f	; 63
    2dd4:	60 81       	ld	r22, Z
    2dd6:	71 81       	ldd	r23, Z+1	; 0x01
    2dd8:	82 81       	ldd	r24, Z+2	; 0x02
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e af       	std	Y+62, r25	; 0x3e
    2de6:	8d af       	std	Y+61, r24	; 0x3d
    2de8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dec:	9a af       	std	Y+58, r25	; 0x3a
    2dee:	89 af       	std	Y+57, r24	; 0x39
    2df0:	89 ad       	ldd	r24, Y+57	; 0x39
    2df2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <STEPPER_u8Rotate+0x8e2>
    2df8:	9a af       	std	Y+58, r25	; 0x3a
    2dfa:	89 af       	std	Y+57, r24	; 0x39
		if(Object->Port<=DIO_u8PORTD && Object->BluePin<=DIO_u8PIN7 && Object->PinkPin<=DIO_u8PIN7 && Object->YellowPin<=DIO_u8PIN7 && Object->OrangePin<=DIO_u8PIN7)
		{
			uint16 Local_StepsNumber=(uint16)((uint32)Copy_u16Angle*1024/180);
			if(Copy_Directon==CCW)
			{
				for(LocalCounter=0;LocalCounter<=Local_StepsNumber;LocalCounter++)
    2dfc:	de 01       	movw	r26, r28
    2dfe:	ad 58       	subi	r26, 0x8D	; 141
    2e00:	bf 4f       	sbci	r27, 0xFF	; 255
    2e02:	fe 01       	movw	r30, r28
    2e04:	ed 58       	subi	r30, 0x8D	; 141
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	8d 93       	st	X+, r24
    2e10:	9c 93       	st	X, r25
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 58       	subi	r30, 0x8D	; 141
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	de 01       	movw	r26, r28
    2e1a:	af 58       	subi	r26, 0x8F	; 143
    2e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1e:	20 81       	ld	r18, Z
    2e20:	31 81       	ldd	r19, Z+1	; 0x01
    2e22:	8d 91       	ld	r24, X+
    2e24:	9c 91       	ld	r25, X
    2e26:	11 97       	sbiw	r26, 0x01	; 1
    2e28:	82 17       	cp	r24, r18
    2e2a:	93 07       	cpc	r25, r19
    2e2c:	08 f0       	brcs	.+2      	; 0x2e30 <STEPPER_u8Rotate+0x91e>
    2e2e:	f7 cb       	rjmp	.-2066   	; 0x261e <STEPPER_u8Rotate+0x10c>
    2e30:	4f c3       	rjmp	.+1694   	; 0x34d0 <STEPPER_u8Rotate+0xfbe>
						_delay_ms(2);
					}

				}
			}
			else if(Copy_Directon==CW)
    2e32:	fe 01       	movw	r30, r28
    2e34:	e6 58       	subi	r30, 0x86	; 134
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <STEPPER_u8Rotate+0x92e>
    2e3e:	37 c3       	rjmp	.+1646   	; 0x34ae <STEPPER_u8Rotate+0xf9c>
			{

				for(LocalCounter=0;LocalCounter<=Local_StepsNumber;LocalCounter++)
    2e40:	fe 01       	movw	r30, r28
    2e42:	ed 58       	subi	r30, 0x8D	; 141
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	11 82       	std	Z+1, r1	; 0x01
    2e48:	10 82       	st	Z, r1
    2e4a:	21 c3       	rjmp	.+1602   	; 0x348e <STEPPER_u8Rotate+0xf7c>
				{
					if(LocalCounter%4==0)
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ed 58       	subi	r30, 0x8D	; 141
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	83 70       	andi	r24, 0x03	; 3
    2e58:	90 70       	andi	r25, 0x00	; 0
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <STEPPER_u8Rotate+0x94e>
    2e5e:	bb c0       	rjmp	.+374    	; 0x2fd6 <STEPPER_u8Rotate+0xac4>
					{
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_HIGH);
    2e60:	fe 01       	movw	r30, r28
    2e62:	ea 58       	subi	r30, 0x8A	; 138
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	01 90       	ld	r0, Z+
    2e68:	f0 81       	ld	r31, Z
    2e6a:	e0 2d       	mov	r30, r0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ea 58       	subi	r30, 0x8A	; 138
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	01 90       	ld	r0, Z+
    2e76:	f0 81       	ld	r31, Z
    2e78:	e0 2d       	mov	r30, r0
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	69 2f       	mov	r22, r25
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_HIGH);
    2e84:	fe 01       	movw	r30, r28
    2e86:	ea 58       	subi	r30, 0x8A	; 138
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	01 90       	ld	r0, Z+
    2e8c:	f0 81       	ld	r31, Z
    2e8e:	e0 2d       	mov	r30, r0
    2e90:	80 81       	ld	r24, Z
    2e92:	fe 01       	movw	r30, r28
    2e94:	ea 58       	subi	r30, 0x8A	; 138
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	01 90       	ld	r0, Z+
    2e9a:	f0 81       	ld	r31, Z
    2e9c:	e0 2d       	mov	r30, r0
    2e9e:	94 81       	ldd	r25, Z+4	; 0x04
    2ea0:	69 2f       	mov	r22, r25
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_HIGH);
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ea 58       	subi	r30, 0x8A	; 138
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	01 90       	ld	r0, Z+
    2eb0:	f0 81       	ld	r31, Z
    2eb2:	e0 2d       	mov	r30, r0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ea 58       	subi	r30, 0x8A	; 138
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	01 90       	ld	r0, Z+
    2ebe:	f0 81       	ld	r31, Z
    2ec0:	e0 2d       	mov	r30, r0
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	69 2f       	mov	r22, r25
    2ec6:	41 e0       	ldi	r20, 0x01	; 1
    2ec8:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_LOW);
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ea 58       	subi	r30, 0x8A	; 138
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	01 90       	ld	r0, Z+
    2ed4:	f0 81       	ld	r31, Z
    2ed6:	e0 2d       	mov	r30, r0
    2ed8:	80 81       	ld	r24, Z
    2eda:	fe 01       	movw	r30, r28
    2edc:	ea 58       	subi	r30, 0x8A	; 138
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	01 90       	ld	r0, Z+
    2ee2:	f0 81       	ld	r31, Z
    2ee4:	e0 2d       	mov	r30, r0
    2ee6:	94 81       	ldd	r25, Z+4	; 0x04
    2ee8:	69 2f       	mov	r22, r25
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	a0 e0       	ldi	r26, 0x00	; 0
    2ef6:	b0 e4       	ldi	r27, 0x40	; 64
    2ef8:	8d ab       	std	Y+53, r24	; 0x35
    2efa:	9e ab       	std	Y+54, r25	; 0x36
    2efc:	af ab       	std	Y+55, r26	; 0x37
    2efe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f00:	6d a9       	ldd	r22, Y+53	; 0x35
    2f02:	7e a9       	ldd	r23, Y+54	; 0x36
    2f04:	8f a9       	ldd	r24, Y+55	; 0x37
    2f06:	98 ad       	ldd	r25, Y+56	; 0x38
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a e7       	ldi	r20, 0x7A	; 122
    2f0e:	55 e4       	ldi	r21, 0x45	; 69
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	89 ab       	std	Y+49, r24	; 0x31
    2f1a:	9a ab       	std	Y+50, r25	; 0x32
    2f1c:	ab ab       	std	Y+51, r26	; 0x33
    2f1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f20:	69 a9       	ldd	r22, Y+49	; 0x31
    2f22:	7a a9       	ldd	r23, Y+50	; 0x32
    2f24:	8b a9       	ldd	r24, Y+51	; 0x33
    2f26:	9c a9       	ldd	r25, Y+52	; 0x34
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f34:	88 23       	and	r24, r24
    2f36:	2c f4       	brge	.+10     	; 0x2f42 <STEPPER_u8Rotate+0xa30>
		__ticks = 1;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	98 ab       	std	Y+48, r25	; 0x30
    2f3e:	8f a7       	std	Y+47, r24	; 0x2f
    2f40:	3f c0       	rjmp	.+126    	; 0x2fc0 <STEPPER_u8Rotate+0xaae>
	else if (__tmp > 65535)
    2f42:	69 a9       	ldd	r22, Y+49	; 0x31
    2f44:	7a a9       	ldd	r23, Y+50	; 0x32
    2f46:	8b a9       	ldd	r24, Y+51	; 0x33
    2f48:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	4c f5       	brge	.+82     	; 0x2fac <STEPPER_u8Rotate+0xa9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f60:	98 ad       	ldd	r25, Y+56	; 0x38
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e2       	ldi	r20, 0x20	; 32
    2f68:	51 e4       	ldi	r21, 0x41	; 65
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	98 ab       	std	Y+48, r25	; 0x30
    2f80:	8f a7       	std	Y+47, r24	; 0x2f
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <STEPPER_u8Rotate+0xa90>
    2f84:	80 e9       	ldi	r24, 0x90	; 144
    2f86:	91 e0       	ldi	r25, 0x01	; 1
    2f88:	9e a7       	std	Y+46, r25	; 0x2e
    2f8a:	8d a7       	std	Y+45, r24	; 0x2d
    2f8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <STEPPER_u8Rotate+0xa7e>
    2f94:	9e a7       	std	Y+46, r25	; 0x2e
    2f96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	98 ab       	std	Y+48, r25	; 0x30
    2fa0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	69 f7       	brne	.-38     	; 0x2f84 <STEPPER_u8Rotate+0xa72>
    2faa:	66 c2       	rjmp	.+1228   	; 0x3478 <STEPPER_u8Rotate+0xf66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fac:	69 a9       	ldd	r22, Y+49	; 0x31
    2fae:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	98 ab       	std	Y+48, r25	; 0x30
    2fbe:	8f a7       	std	Y+47, r24	; 0x2f
    2fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc4:	9c a7       	std	Y+44, r25	; 0x2c
    2fc6:	8b a7       	std	Y+43, r24	; 0x2b
    2fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fca:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <STEPPER_u8Rotate+0xaba>
    2fd0:	9c a7       	std	Y+44, r25	; 0x2c
    2fd2:	8b a7       	std	Y+43, r24	; 0x2b
    2fd4:	51 c2       	rjmp	.+1186   	; 0x3478 <STEPPER_u8Rotate+0xf66>
						_delay_ms(2);
					}
					else if(LocalCounter%4==1)
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ed 58       	subi	r30, 0x8D	; 141
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	83 70       	andi	r24, 0x03	; 3
    2fe2:	90 70       	andi	r25, 0x00	; 0
    2fe4:	81 30       	cpi	r24, 0x01	; 1
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <STEPPER_u8Rotate+0xada>
    2fea:	bb c0       	rjmp	.+374    	; 0x3162 <STEPPER_u8Rotate+0xc50>
					{
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_HIGH);
    2fec:	fe 01       	movw	r30, r28
    2fee:	ea 58       	subi	r30, 0x8A	; 138
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	01 90       	ld	r0, Z+
    2ff4:	f0 81       	ld	r31, Z
    2ff6:	e0 2d       	mov	r30, r0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	ea 58       	subi	r30, 0x8A	; 138
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	01 90       	ld	r0, Z+
    3002:	f0 81       	ld	r31, Z
    3004:	e0 2d       	mov	r30, r0
    3006:	91 81       	ldd	r25, Z+1	; 0x01
    3008:	69 2f       	mov	r22, r25
    300a:	41 e0       	ldi	r20, 0x01	; 1
    300c:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_HIGH);
    3010:	fe 01       	movw	r30, r28
    3012:	ea 58       	subi	r30, 0x8A	; 138
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	01 90       	ld	r0, Z+
    3018:	f0 81       	ld	r31, Z
    301a:	e0 2d       	mov	r30, r0
    301c:	80 81       	ld	r24, Z
    301e:	fe 01       	movw	r30, r28
    3020:	ea 58       	subi	r30, 0x8A	; 138
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	01 90       	ld	r0, Z+
    3026:	f0 81       	ld	r31, Z
    3028:	e0 2d       	mov	r30, r0
    302a:	94 81       	ldd	r25, Z+4	; 0x04
    302c:	69 2f       	mov	r22, r25
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->PinkPin,DIO_u8PIN_HIGH);
    3034:	fe 01       	movw	r30, r28
    3036:	ea 58       	subi	r30, 0x8A	; 138
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	01 90       	ld	r0, Z+
    303c:	f0 81       	ld	r31, Z
    303e:	e0 2d       	mov	r30, r0
    3040:	80 81       	ld	r24, Z
    3042:	fe 01       	movw	r30, r28
    3044:	ea 58       	subi	r30, 0x8A	; 138
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	01 90       	ld	r0, Z+
    304a:	f0 81       	ld	r31, Z
    304c:	e0 2d       	mov	r30, r0
    304e:	92 81       	ldd	r25, Z+2	; 0x02
    3050:	69 2f       	mov	r22, r25
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_LOW);
    3058:	fe 01       	movw	r30, r28
    305a:	ea 58       	subi	r30, 0x8A	; 138
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	01 90       	ld	r0, Z+
    3060:	f0 81       	ld	r31, Z
    3062:	e0 2d       	mov	r30, r0
    3064:	80 81       	ld	r24, Z
    3066:	fe 01       	movw	r30, r28
    3068:	ea 58       	subi	r30, 0x8A	; 138
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	01 90       	ld	r0, Z+
    306e:	f0 81       	ld	r31, Z
    3070:	e0 2d       	mov	r30, r0
    3072:	93 81       	ldd	r25, Z+3	; 0x03
    3074:	69 2f       	mov	r22, r25
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	a0 e0       	ldi	r26, 0x00	; 0
    3082:	b0 e4       	ldi	r27, 0x40	; 64
    3084:	8f a3       	std	Y+39, r24	; 0x27
    3086:	98 a7       	std	Y+40, r25	; 0x28
    3088:	a9 a7       	std	Y+41, r26	; 0x29
    308a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308c:	6f a1       	ldd	r22, Y+39	; 0x27
    308e:	78 a5       	ldd	r23, Y+40	; 0x28
    3090:	89 a5       	ldd	r24, Y+41	; 0x29
    3092:	9a a5       	ldd	r25, Y+42	; 0x2a
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	4a e7       	ldi	r20, 0x7A	; 122
    309a:	55 e4       	ldi	r21, 0x45	; 69
    309c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	8b a3       	std	Y+35, r24	; 0x23
    30a6:	9c a3       	std	Y+36, r25	; 0x24
    30a8:	ad a3       	std	Y+37, r26	; 0x25
    30aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30ac:	6b a1       	ldd	r22, Y+35	; 0x23
    30ae:	7c a1       	ldd	r23, Y+36	; 0x24
    30b0:	8d a1       	ldd	r24, Y+37	; 0x25
    30b2:	9e a1       	ldd	r25, Y+38	; 0x26
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e8       	ldi	r20, 0x80	; 128
    30ba:	5f e3       	ldi	r21, 0x3F	; 63
    30bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c0:	88 23       	and	r24, r24
    30c2:	2c f4       	brge	.+10     	; 0x30ce <STEPPER_u8Rotate+0xbbc>
		__ticks = 1;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	9a a3       	std	Y+34, r25	; 0x22
    30ca:	89 a3       	std	Y+33, r24	; 0x21
    30cc:	3f c0       	rjmp	.+126    	; 0x314c <STEPPER_u8Rotate+0xc3a>
	else if (__tmp > 65535)
    30ce:	6b a1       	ldd	r22, Y+35	; 0x23
    30d0:	7c a1       	ldd	r23, Y+36	; 0x24
    30d2:	8d a1       	ldd	r24, Y+37	; 0x25
    30d4:	9e a1       	ldd	r25, Y+38	; 0x26
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	3f ef       	ldi	r19, 0xFF	; 255
    30da:	4f e7       	ldi	r20, 0x7F	; 127
    30dc:	57 e4       	ldi	r21, 0x47	; 71
    30de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e2:	18 16       	cp	r1, r24
    30e4:	4c f5       	brge	.+82     	; 0x3138 <STEPPER_u8Rotate+0xc26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e6:	6f a1       	ldd	r22, Y+39	; 0x27
    30e8:	78 a5       	ldd	r23, Y+40	; 0x28
    30ea:	89 a5       	ldd	r24, Y+41	; 0x29
    30ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e2       	ldi	r20, 0x20	; 32
    30f4:	51 e4       	ldi	r21, 0x41	; 65
    30f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9a a3       	std	Y+34, r25	; 0x22
    310c:	89 a3       	std	Y+33, r24	; 0x21
    310e:	0f c0       	rjmp	.+30     	; 0x312e <STEPPER_u8Rotate+0xc1c>
    3110:	80 e9       	ldi	r24, 0x90	; 144
    3112:	91 e0       	ldi	r25, 0x01	; 1
    3114:	98 a3       	std	Y+32, r25	; 0x20
    3116:	8f 8f       	std	Y+31, r24	; 0x1f
    3118:	8f 8d       	ldd	r24, Y+31	; 0x1f
    311a:	98 a1       	ldd	r25, Y+32	; 0x20
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <STEPPER_u8Rotate+0xc0a>
    3120:	98 a3       	std	Y+32, r25	; 0x20
    3122:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3124:	89 a1       	ldd	r24, Y+33	; 0x21
    3126:	9a a1       	ldd	r25, Y+34	; 0x22
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	9a a3       	std	Y+34, r25	; 0x22
    312c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312e:	89 a1       	ldd	r24, Y+33	; 0x21
    3130:	9a a1       	ldd	r25, Y+34	; 0x22
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	69 f7       	brne	.-38     	; 0x3110 <STEPPER_u8Rotate+0xbfe>
    3136:	a0 c1       	rjmp	.+832    	; 0x3478 <STEPPER_u8Rotate+0xf66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3138:	6b a1       	ldd	r22, Y+35	; 0x23
    313a:	7c a1       	ldd	r23, Y+36	; 0x24
    313c:	8d a1       	ldd	r24, Y+37	; 0x25
    313e:	9e a1       	ldd	r25, Y+38	; 0x26
    3140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	9a a3       	std	Y+34, r25	; 0x22
    314a:	89 a3       	std	Y+33, r24	; 0x21
    314c:	89 a1       	ldd	r24, Y+33	; 0x21
    314e:	9a a1       	ldd	r25, Y+34	; 0x22
    3150:	9e 8f       	std	Y+30, r25	; 0x1e
    3152:	8d 8f       	std	Y+29, r24	; 0x1d
    3154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3156:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	f1 f7       	brne	.-4      	; 0x3158 <STEPPER_u8Rotate+0xc46>
    315c:	9e 8f       	std	Y+30, r25	; 0x1e
    315e:	8d 8f       	std	Y+29, r24	; 0x1d
    3160:	8b c1       	rjmp	.+790    	; 0x3478 <STEPPER_u8Rotate+0xf66>
						_delay_ms(2);
					}
					else if(LocalCounter%4==2)
    3162:	fe 01       	movw	r30, r28
    3164:	ed 58       	subi	r30, 0x8D	; 141
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	80 81       	ld	r24, Z
    316a:	91 81       	ldd	r25, Z+1	; 0x01
    316c:	83 70       	andi	r24, 0x03	; 3
    316e:	90 70       	andi	r25, 0x00	; 0
    3170:	82 30       	cpi	r24, 0x02	; 2
    3172:	91 05       	cpc	r25, r1
    3174:	09 f0       	breq	.+2      	; 0x3178 <STEPPER_u8Rotate+0xc66>
    3176:	bb c0       	rjmp	.+374    	; 0x32ee <STEPPER_u8Rotate+0xddc>
					{
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_HIGH);
    3178:	fe 01       	movw	r30, r28
    317a:	ea 58       	subi	r30, 0x8A	; 138
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	01 90       	ld	r0, Z+
    3180:	f0 81       	ld	r31, Z
    3182:	e0 2d       	mov	r30, r0
    3184:	80 81       	ld	r24, Z
    3186:	fe 01       	movw	r30, r28
    3188:	ea 58       	subi	r30, 0x8A	; 138
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	01 90       	ld	r0, Z+
    318e:	f0 81       	ld	r31, Z
    3190:	e0 2d       	mov	r30, r0
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	69 2f       	mov	r22, r25
    3196:	41 e0       	ldi	r20, 0x01	; 1
    3198:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_HIGH);
    319c:	fe 01       	movw	r30, r28
    319e:	ea 58       	subi	r30, 0x8A	; 138
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	01 90       	ld	r0, Z+
    31a4:	f0 81       	ld	r31, Z
    31a6:	e0 2d       	mov	r30, r0
    31a8:	80 81       	ld	r24, Z
    31aa:	fe 01       	movw	r30, r28
    31ac:	ea 58       	subi	r30, 0x8A	; 138
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	01 90       	ld	r0, Z+
    31b2:	f0 81       	ld	r31, Z
    31b4:	e0 2d       	mov	r30, r0
    31b6:	94 81       	ldd	r25, Z+4	; 0x04
    31b8:	69 2f       	mov	r22, r25
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_HIGH);
    31c0:	fe 01       	movw	r30, r28
    31c2:	ea 58       	subi	r30, 0x8A	; 138
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	01 90       	ld	r0, Z+
    31c8:	f0 81       	ld	r31, Z
    31ca:	e0 2d       	mov	r30, r0
    31cc:	80 81       	ld	r24, Z
    31ce:	fe 01       	movw	r30, r28
    31d0:	ea 58       	subi	r30, 0x8A	; 138
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	01 90       	ld	r0, Z+
    31d6:	f0 81       	ld	r31, Z
    31d8:	e0 2d       	mov	r30, r0
    31da:	91 81       	ldd	r25, Z+1	; 0x01
    31dc:	69 2f       	mov	r22, r25
    31de:	41 e0       	ldi	r20, 0x01	; 1
    31e0:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->PinkPin,DIO_u8PIN_LOW);
    31e4:	fe 01       	movw	r30, r28
    31e6:	ea 58       	subi	r30, 0x8A	; 138
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	01 90       	ld	r0, Z+
    31ec:	f0 81       	ld	r31, Z
    31ee:	e0 2d       	mov	r30, r0
    31f0:	80 81       	ld	r24, Z
    31f2:	fe 01       	movw	r30, r28
    31f4:	ea 58       	subi	r30, 0x8A	; 138
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	01 90       	ld	r0, Z+
    31fa:	f0 81       	ld	r31, Z
    31fc:	e0 2d       	mov	r30, r0
    31fe:	92 81       	ldd	r25, Z+2	; 0x02
    3200:	69 2f       	mov	r22, r25
    3202:	40 e0       	ldi	r20, 0x00	; 0
    3204:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a0 e0       	ldi	r26, 0x00	; 0
    320e:	b0 e4       	ldi	r27, 0x40	; 64
    3210:	89 8f       	std	Y+25, r24	; 0x19
    3212:	9a 8f       	std	Y+26, r25	; 0x1a
    3214:	ab 8f       	std	Y+27, r26	; 0x1b
    3216:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	69 8d       	ldd	r22, Y+25	; 0x19
    321a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    321c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	55 e4       	ldi	r21, 0x45	; 69
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8d 8b       	std	Y+21, r24	; 0x15
    3232:	9e 8b       	std	Y+22, r25	; 0x16
    3234:	af 8b       	std	Y+23, r26	; 0x17
    3236:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3238:	6d 89       	ldd	r22, Y+21	; 0x15
    323a:	7e 89       	ldd	r23, Y+22	; 0x16
    323c:	8f 89       	ldd	r24, Y+23	; 0x17
    323e:	98 8d       	ldd	r25, Y+24	; 0x18
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <STEPPER_u8Rotate+0xd48>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9c 8b       	std	Y+20, r25	; 0x14
    3256:	8b 8b       	std	Y+19, r24	; 0x13
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <STEPPER_u8Rotate+0xdc6>
	else if (__tmp > 65535)
    325a:	6d 89       	ldd	r22, Y+21	; 0x15
    325c:	7e 89       	ldd	r23, Y+22	; 0x16
    325e:	8f 89       	ldd	r24, Y+23	; 0x17
    3260:	98 8d       	ldd	r25, Y+24	; 0x18
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <STEPPER_u8Rotate+0xdb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	69 8d       	ldd	r22, Y+25	; 0x19
    3274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9c 8b       	std	Y+20, r25	; 0x14
    3298:	8b 8b       	std	Y+19, r24	; 0x13
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <STEPPER_u8Rotate+0xda8>
    329c:	80 e9       	ldi	r24, 0x90	; 144
    329e:	91 e0       	ldi	r25, 0x01	; 1
    32a0:	9a 8b       	std	Y+18, r25	; 0x12
    32a2:	89 8b       	std	Y+17, r24	; 0x11
    32a4:	89 89       	ldd	r24, Y+17	; 0x11
    32a6:	9a 89       	ldd	r25, Y+18	; 0x12
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <STEPPER_u8Rotate+0xd96>
    32ac:	9a 8b       	std	Y+18, r25	; 0x12
    32ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8b 89       	ldd	r24, Y+19	; 0x13
    32b2:	9c 89       	ldd	r25, Y+20	; 0x14
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9c 8b       	std	Y+20, r25	; 0x14
    32b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8b 89       	ldd	r24, Y+19	; 0x13
    32bc:	9c 89       	ldd	r25, Y+20	; 0x14
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <STEPPER_u8Rotate+0xd8a>
    32c2:	da c0       	rjmp	.+436    	; 0x3478 <STEPPER_u8Rotate+0xf66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6d 89       	ldd	r22, Y+21	; 0x15
    32c6:	7e 89       	ldd	r23, Y+22	; 0x16
    32c8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ca:	98 8d       	ldd	r25, Y+24	; 0x18
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9c 8b       	std	Y+20, r25	; 0x14
    32d6:	8b 8b       	std	Y+19, r24	; 0x13
    32d8:	8b 89       	ldd	r24, Y+19	; 0x13
    32da:	9c 89       	ldd	r25, Y+20	; 0x14
    32dc:	98 8b       	std	Y+16, r25	; 0x10
    32de:	8f 87       	std	Y+15, r24	; 0x0f
    32e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e2:	98 89       	ldd	r25, Y+16	; 0x10
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <STEPPER_u8Rotate+0xdd2>
    32e8:	98 8b       	std	Y+16, r25	; 0x10
    32ea:	8f 87       	std	Y+15, r24	; 0x0f
    32ec:	c5 c0       	rjmp	.+394    	; 0x3478 <STEPPER_u8Rotate+0xf66>
						_delay_ms(2);
					}
					else if(LocalCounter%4==3)
    32ee:	fe 01       	movw	r30, r28
    32f0:	ed 58       	subi	r30, 0x8D	; 141
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	80 81       	ld	r24, Z
    32f6:	91 81       	ldd	r25, Z+1	; 0x01
    32f8:	83 70       	andi	r24, 0x03	; 3
    32fa:	90 70       	andi	r25, 0x00	; 0
    32fc:	83 30       	cpi	r24, 0x03	; 3
    32fe:	91 05       	cpc	r25, r1
    3300:	09 f0       	breq	.+2      	; 0x3304 <STEPPER_u8Rotate+0xdf2>
    3302:	ba c0       	rjmp	.+372    	; 0x3478 <STEPPER_u8Rotate+0xf66>
					{
						DIO_u8SetPinValue(Object->Port,Object->OrangePin,DIO_u8PIN_HIGH);
    3304:	fe 01       	movw	r30, r28
    3306:	ea 58       	subi	r30, 0x8A	; 138
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	01 90       	ld	r0, Z+
    330c:	f0 81       	ld	r31, Z
    330e:	e0 2d       	mov	r30, r0
    3310:	80 81       	ld	r24, Z
    3312:	fe 01       	movw	r30, r28
    3314:	ea 58       	subi	r30, 0x8A	; 138
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	01 90       	ld	r0, Z+
    331a:	f0 81       	ld	r31, Z
    331c:	e0 2d       	mov	r30, r0
    331e:	94 81       	ldd	r25, Z+4	; 0x04
    3320:	69 2f       	mov	r22, r25
    3322:	41 e0       	ldi	r20, 0x01	; 1
    3324:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->PinkPin,DIO_u8PIN_HIGH);
    3328:	fe 01       	movw	r30, r28
    332a:	ea 58       	subi	r30, 0x8A	; 138
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	01 90       	ld	r0, Z+
    3330:	f0 81       	ld	r31, Z
    3332:	e0 2d       	mov	r30, r0
    3334:	80 81       	ld	r24, Z
    3336:	fe 01       	movw	r30, r28
    3338:	ea 58       	subi	r30, 0x8A	; 138
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	01 90       	ld	r0, Z+
    333e:	f0 81       	ld	r31, Z
    3340:	e0 2d       	mov	r30, r0
    3342:	92 81       	ldd	r25, Z+2	; 0x02
    3344:	69 2f       	mov	r22, r25
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->YellowPin,DIO_u8PIN_HIGH);
    334c:	fe 01       	movw	r30, r28
    334e:	ea 58       	subi	r30, 0x8A	; 138
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	01 90       	ld	r0, Z+
    3354:	f0 81       	ld	r31, Z
    3356:	e0 2d       	mov	r30, r0
    3358:	80 81       	ld	r24, Z
    335a:	fe 01       	movw	r30, r28
    335c:	ea 58       	subi	r30, 0x8A	; 138
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	01 90       	ld	r0, Z+
    3362:	f0 81       	ld	r31, Z
    3364:	e0 2d       	mov	r30, r0
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	69 2f       	mov	r22, r25
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
						DIO_u8SetPinValue(Object->Port,Object->BluePin,DIO_u8PIN_LOW);
    3370:	fe 01       	movw	r30, r28
    3372:	ea 58       	subi	r30, 0x8A	; 138
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	01 90       	ld	r0, Z+
    3378:	f0 81       	ld	r31, Z
    337a:	e0 2d       	mov	r30, r0
    337c:	80 81       	ld	r24, Z
    337e:	fe 01       	movw	r30, r28
    3380:	ea 58       	subi	r30, 0x8A	; 138
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	01 90       	ld	r0, Z+
    3386:	f0 81       	ld	r31, Z
    3388:	e0 2d       	mov	r30, r0
    338a:	91 81       	ldd	r25, Z+1	; 0x01
    338c:	69 2f       	mov	r22, r25
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	a0 e0       	ldi	r26, 0x00	; 0
    339a:	b0 e4       	ldi	r27, 0x40	; 64
    339c:	8b 87       	std	Y+11, r24	; 0x0b
    339e:	9c 87       	std	Y+12, r25	; 0x0c
    33a0:	ad 87       	std	Y+13, r26	; 0x0d
    33a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	4a e7       	ldi	r20, 0x7A	; 122
    33b2:	55 e4       	ldi	r21, 0x45	; 69
    33b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	8f 83       	std	Y+7, r24	; 0x07
    33be:	98 87       	std	Y+8, r25	; 0x08
    33c0:	a9 87       	std	Y+9, r26	; 0x09
    33c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	40 e8       	ldi	r20, 0x80	; 128
    33d2:	5f e3       	ldi	r21, 0x3F	; 63
    33d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33d8:	88 23       	and	r24, r24
    33da:	2c f4       	brge	.+10     	; 0x33e6 <STEPPER_u8Rotate+0xed4>
		__ticks = 1;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	9e 83       	std	Y+6, r25	; 0x06
    33e2:	8d 83       	std	Y+5, r24	; 0x05
    33e4:	3f c0       	rjmp	.+126    	; 0x3464 <STEPPER_u8Rotate+0xf52>
	else if (__tmp > 65535)
    33e6:	6f 81       	ldd	r22, Y+7	; 0x07
    33e8:	78 85       	ldd	r23, Y+8	; 0x08
    33ea:	89 85       	ldd	r24, Y+9	; 0x09
    33ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	3f ef       	ldi	r19, 0xFF	; 255
    33f2:	4f e7       	ldi	r20, 0x7F	; 127
    33f4:	57 e4       	ldi	r21, 0x47	; 71
    33f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33fa:	18 16       	cp	r1, r24
    33fc:	4c f5       	brge	.+82     	; 0x3450 <STEPPER_u8Rotate+0xf3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3400:	7c 85       	ldd	r23, Y+12	; 0x0c
    3402:	8d 85       	ldd	r24, Y+13	; 0x0d
    3404:	9e 85       	ldd	r25, Y+14	; 0x0e
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e2       	ldi	r20, 0x20	; 32
    340c:	51 e4       	ldi	r21, 0x41	; 65
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	0f c0       	rjmp	.+30     	; 0x3446 <STEPPER_u8Rotate+0xf34>
    3428:	80 e9       	ldi	r24, 0x90	; 144
    342a:	91 e0       	ldi	r25, 0x01	; 1
    342c:	9c 83       	std	Y+4, r25	; 0x04
    342e:	8b 83       	std	Y+3, r24	; 0x03
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
    3432:	9c 81       	ldd	r25, Y+4	; 0x04
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <STEPPER_u8Rotate+0xf22>
    3438:	9c 83       	std	Y+4, r25	; 0x04
    343a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	9e 83       	std	Y+6, r25	; 0x06
    3444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3446:	8d 81       	ldd	r24, Y+5	; 0x05
    3448:	9e 81       	ldd	r25, Y+6	; 0x06
    344a:	00 97       	sbiw	r24, 0x00	; 0
    344c:	69 f7       	brne	.-38     	; 0x3428 <STEPPER_u8Rotate+0xf16>
    344e:	14 c0       	rjmp	.+40     	; 0x3478 <STEPPER_u8Rotate+0xf66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3450:	6f 81       	ldd	r22, Y+7	; 0x07
    3452:	78 85       	ldd	r23, Y+8	; 0x08
    3454:	89 85       	ldd	r24, Y+9	; 0x09
    3456:	9a 85       	ldd	r25, Y+10	; 0x0a
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	9e 83       	std	Y+6, r25	; 0x06
    3462:	8d 83       	std	Y+5, r24	; 0x05
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	9e 81       	ldd	r25, Y+6	; 0x06
    3468:	9a 83       	std	Y+2, r25	; 0x02
    346a:	89 83       	std	Y+1, r24	; 0x01
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	9a 81       	ldd	r25, Y+2	; 0x02
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	f1 f7       	brne	.-4      	; 0x3470 <STEPPER_u8Rotate+0xf5e>
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			else if(Copy_Directon==CW)
			{

				for(LocalCounter=0;LocalCounter<=Local_StepsNumber;LocalCounter++)
    3478:	de 01       	movw	r26, r28
    347a:	ad 58       	subi	r26, 0x8D	; 141
    347c:	bf 4f       	sbci	r27, 0xFF	; 255
    347e:	fe 01       	movw	r30, r28
    3480:	ed 58       	subi	r30, 0x8D	; 141
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	80 81       	ld	r24, Z
    3486:	91 81       	ldd	r25, Z+1	; 0x01
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	8d 93       	st	X+, r24
    348c:	9c 93       	st	X, r25
    348e:	fe 01       	movw	r30, r28
    3490:	ed 58       	subi	r30, 0x8D	; 141
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	de 01       	movw	r26, r28
    3496:	af 58       	subi	r26, 0x8F	; 143
    3498:	bf 4f       	sbci	r27, 0xFF	; 255
    349a:	20 81       	ld	r18, Z
    349c:	31 81       	ldd	r19, Z+1	; 0x01
    349e:	8d 91       	ld	r24, X+
    34a0:	9c 91       	ld	r25, X
    34a2:	11 97       	sbiw	r26, 0x01	; 1
    34a4:	82 17       	cp	r24, r18
    34a6:	93 07       	cpc	r25, r19
    34a8:	08 f0       	brcs	.+2      	; 0x34ac <STEPPER_u8Rotate+0xf9a>
    34aa:	d0 cc       	rjmp	.-1632   	; 0x2e4c <STEPPER_u8Rotate+0x93a>
    34ac:	11 c0       	rjmp	.+34     	; 0x34d0 <STEPPER_u8Rotate+0xfbe>
				}

			}
			else
			{
				LocalErrorState=NOK;
    34ae:	fe 01       	movw	r30, r28
    34b0:	eb 58       	subi	r30, 0x8B	; 139
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	80 83       	st	Z, r24
    34b8:	0b c0       	rjmp	.+22     	; 0x34d0 <STEPPER_u8Rotate+0xfbe>
			}
			}
		else
		{
			LocalErrorState=NOK;
    34ba:	fe 01       	movw	r30, r28
    34bc:	eb 58       	subi	r30, 0x8B	; 139
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	80 83       	st	Z, r24
    34c4:	05 c0       	rjmp	.+10     	; 0x34d0 <STEPPER_u8Rotate+0xfbe>
		}
	}
	else
	{
		LocalErrorState=NULL_PTR_ERR;
    34c6:	fe 01       	movw	r30, r28
    34c8:	eb 58       	subi	r30, 0x8B	; 139
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	82 e0       	ldi	r24, 0x02	; 2
    34ce:	80 83       	st	Z, r24
	}
	return LocalErrorState;
    34d0:	fe 01       	movw	r30, r28
    34d2:	eb 58       	subi	r30, 0x8B	; 139
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
}
    34d8:	c6 58       	subi	r28, 0x86	; 134
    34da:	df 4f       	sbci	r29, 0xFF	; 255
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	08 95       	ret

000034f0 <main>:
#define TRIALS 3u
void EmergencyStop(void);
uint8 Local_u8EmergencyIndicator=0;
DCM_t Object1={DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN4};
void main(void)
{
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
    34f8:	c4 59       	subi	r28, 0x94	; 148
    34fa:	d0 40       	sbci	r29, 0x00	; 0
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8PressedKey;
	uint8 Local_u8Counter1=0;
    3506:	fe 01       	movw	r30, r28
    3508:	eb 5a       	subi	r30, 0xAB	; 171
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	10 82       	st	Z, r1
	uint8 Local_u8Counter2=0;
    350e:	fe 01       	movw	r30, r28
    3510:	ec 5a       	subi	r30, 0xAC	; 172
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	10 82       	st	Z, r1
	uint32 Local_u8EnteredID=0;
    3516:	fe 01       	movw	r30, r28
    3518:	e0 5b       	subi	r30, 0xB0	; 176
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	10 82       	st	Z, r1
    351e:	11 82       	std	Z+1, r1	; 0x01
    3520:	12 82       	std	Z+2, r1	; 0x02
    3522:	13 82       	std	Z+3, r1	; 0x03
	uint32 Local_u32RealPass=1;
    3524:	fe 01       	movw	r30, r28
    3526:	e4 5b       	subi	r30, 0xB4	; 180
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a0 e0       	ldi	r26, 0x00	; 0
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	80 83       	st	Z, r24
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	a2 83       	std	Z+2, r26	; 0x02
    3538:	b3 83       	std	Z+3, r27	; 0x03
	uint32 Local_u32RealID=1;
    353a:	fe 01       	movw	r30, r28
    353c:	e8 5b       	subi	r30, 0xB8	; 184
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	80 83       	st	Z, r24
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	a2 83       	std	Z+2, r26	; 0x02
    354e:	b3 83       	std	Z+3, r27	; 0x03
	uint32 Local_u8EnteredPass=0;
    3550:	fe 01       	movw	r30, r28
    3552:	ec 5b       	subi	r30, 0xBC	; 188
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	10 82       	st	Z, r1
    3558:	11 82       	std	Z+1, r1	; 0x01
    355a:	12 82       	std	Z+2, r1	; 0x02
    355c:	13 82       	std	Z+3, r1	; 0x03
	uint8 Local_u8IDArr[16];
	uint8 Local_u8PassArr[16];
	uint8 Local_u8DCMIndicator=0;
    355e:	fe 01       	movw	r30, r28
    3560:	ed 5b       	subi	r30, 0xBD	; 189
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	10 82       	st	Z, r1
	uint8 Local_u8StepperIndicator=0;
    3566:	fe 01       	movw	r30, r28
    3568:	ee 5b       	subi	r30, 0xBE	; 190
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	10 82       	st	Z, r1
	uint8 Local_u8Counter=0;
    356e:	fe 01       	movw	r30, r28
    3570:	ef 5b       	subi	r30, 0xBF	; 191
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	10 82       	st	Z, r1
	uint32 Local_u8Stepperangle=0;
    3576:	fe 01       	movw	r30, r28
    3578:	fd 96       	adiw	r30, 0x3d	; 61
    357a:	10 82       	st	Z, r1
    357c:	11 82       	std	Z+1, r1	; 0x01
    357e:	12 82       	std	Z+2, r1	; 0x02
    3580:	13 82       	std	Z+3, r1	; 0x03
	uint8 Local_Arr[10];
	sint8 Local_ArrCounter;
	sint8 Local_u8PassTrials=TRIALS;
    3582:	83 e0       	ldi	r24, 0x03	; 3
    3584:	8b af       	std	Y+59, r24	; 0x3b
	STEPPER_t Object2={DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN5,DIO_u8PIN6,DIO_u8PIN7};
    3586:	ce 01       	movw	r24, r28
    3588:	8f 57       	subi	r24, 0x7F	; 127
    358a:	9f 4f       	sbci	r25, 0xFF	; 255
    358c:	c5 57       	subi	r28, 0x75	; 117
    358e:	df 4f       	sbci	r29, 0xFF	; 255
    3590:	99 83       	std	Y+1, r25	; 0x01
    3592:	88 83       	st	Y, r24
    3594:	cb 58       	subi	r28, 0x8B	; 139
    3596:	d0 40       	sbci	r29, 0x00	; 0
    3598:	8a e6       	ldi	r24, 0x6A	; 106
    359a:	91 e0       	ldi	r25, 0x01	; 1
    359c:	c3 57       	subi	r28, 0x73	; 115
    359e:	df 4f       	sbci	r29, 0xFF	; 255
    35a0:	99 83       	std	Y+1, r25	; 0x01
    35a2:	88 83       	st	Y, r24
    35a4:	cd 58       	subi	r28, 0x8D	; 141
    35a6:	d0 40       	sbci	r29, 0x00	; 0
    35a8:	95 e0       	ldi	r25, 0x05	; 5
    35aa:	c1 57       	subi	r28, 0x71	; 113
    35ac:	df 4f       	sbci	r29, 0xFF	; 255
    35ae:	98 83       	st	Y, r25
    35b0:	cf 58       	subi	r28, 0x8F	; 143
    35b2:	d0 40       	sbci	r29, 0x00	; 0
    35b4:	c3 57       	subi	r28, 0x73	; 115
    35b6:	df 4f       	sbci	r29, 0xFF	; 255
    35b8:	e8 81       	ld	r30, Y
    35ba:	f9 81       	ldd	r31, Y+1	; 0x01
    35bc:	cd 58       	subi	r28, 0x8D	; 141
    35be:	d0 40       	sbci	r29, 0x00	; 0
    35c0:	00 80       	ld	r0, Z
    35c2:	c3 57       	subi	r28, 0x73	; 115
    35c4:	df 4f       	sbci	r29, 0xFF	; 255
    35c6:	88 81       	ld	r24, Y
    35c8:	99 81       	ldd	r25, Y+1	; 0x01
    35ca:	cd 58       	subi	r28, 0x8D	; 141
    35cc:	d0 40       	sbci	r29, 0x00	; 0
    35ce:	01 96       	adiw	r24, 0x01	; 1
    35d0:	c3 57       	subi	r28, 0x73	; 115
    35d2:	df 4f       	sbci	r29, 0xFF	; 255
    35d4:	99 83       	std	Y+1, r25	; 0x01
    35d6:	88 83       	st	Y, r24
    35d8:	cd 58       	subi	r28, 0x8D	; 141
    35da:	d0 40       	sbci	r29, 0x00	; 0
    35dc:	c5 57       	subi	r28, 0x75	; 117
    35de:	df 4f       	sbci	r29, 0xFF	; 255
    35e0:	e8 81       	ld	r30, Y
    35e2:	f9 81       	ldd	r31, Y+1	; 0x01
    35e4:	cb 58       	subi	r28, 0x8B	; 139
    35e6:	d0 40       	sbci	r29, 0x00	; 0
    35e8:	00 82       	st	Z, r0
    35ea:	c5 57       	subi	r28, 0x75	; 117
    35ec:	df 4f       	sbci	r29, 0xFF	; 255
    35ee:	88 81       	ld	r24, Y
    35f0:	99 81       	ldd	r25, Y+1	; 0x01
    35f2:	cb 58       	subi	r28, 0x8B	; 139
    35f4:	d0 40       	sbci	r29, 0x00	; 0
    35f6:	01 96       	adiw	r24, 0x01	; 1
    35f8:	c5 57       	subi	r28, 0x75	; 117
    35fa:	df 4f       	sbci	r29, 0xFF	; 255
    35fc:	99 83       	std	Y+1, r25	; 0x01
    35fe:	88 83       	st	Y, r24
    3600:	cb 58       	subi	r28, 0x8B	; 139
    3602:	d0 40       	sbci	r29, 0x00	; 0
    3604:	c1 57       	subi	r28, 0x71	; 113
    3606:	df 4f       	sbci	r29, 0xFF	; 255
    3608:	98 81       	ld	r25, Y
    360a:	cf 58       	subi	r28, 0x8F	; 143
    360c:	d0 40       	sbci	r29, 0x00	; 0
    360e:	91 50       	subi	r25, 0x01	; 1
    3610:	c1 57       	subi	r28, 0x71	; 113
    3612:	df 4f       	sbci	r29, 0xFF	; 255
    3614:	98 83       	st	Y, r25
    3616:	cf 58       	subi	r28, 0x8F	; 143
    3618:	d0 40       	sbci	r29, 0x00	; 0
    361a:	c1 57       	subi	r28, 0x71	; 113
    361c:	df 4f       	sbci	r29, 0xFF	; 255
    361e:	e8 81       	ld	r30, Y
    3620:	cf 58       	subi	r28, 0x8F	; 143
    3622:	d0 40       	sbci	r29, 0x00	; 0
    3624:	ee 23       	and	r30, r30
    3626:	31 f6       	brne	.-116    	; 0x35b4 <main+0xc4>
	SSD_t Object3={CATHODE,DIO_u8PORTA,DIO_u8PIN0,DIO_u8PORTD,DIO_u8PIN7};
    3628:	ce 01       	movw	r24, r28
    362a:	8a 57       	subi	r24, 0x7A	; 122
    362c:	9f 4f       	sbci	r25, 0xFF	; 255
    362e:	c0 57       	subi	r28, 0x70	; 112
    3630:	df 4f       	sbci	r29, 0xFF	; 255
    3632:	99 83       	std	Y+1, r25	; 0x01
    3634:	88 83       	st	Y, r24
    3636:	c0 59       	subi	r28, 0x90	; 144
    3638:	d0 40       	sbci	r29, 0x00	; 0
    363a:	85 e6       	ldi	r24, 0x65	; 101
    363c:	91 e0       	ldi	r25, 0x01	; 1
    363e:	ce 56       	subi	r28, 0x6E	; 110
    3640:	df 4f       	sbci	r29, 0xFF	; 255
    3642:	99 83       	std	Y+1, r25	; 0x01
    3644:	88 83       	st	Y, r24
    3646:	c2 59       	subi	r28, 0x92	; 146
    3648:	d0 40       	sbci	r29, 0x00	; 0
    364a:	95 e0       	ldi	r25, 0x05	; 5
    364c:	cc 56       	subi	r28, 0x6C	; 108
    364e:	df 4f       	sbci	r29, 0xFF	; 255
    3650:	98 83       	st	Y, r25
    3652:	c4 59       	subi	r28, 0x94	; 148
    3654:	d0 40       	sbci	r29, 0x00	; 0
    3656:	ce 56       	subi	r28, 0x6E	; 110
    3658:	df 4f       	sbci	r29, 0xFF	; 255
    365a:	e8 81       	ld	r30, Y
    365c:	f9 81       	ldd	r31, Y+1	; 0x01
    365e:	c2 59       	subi	r28, 0x92	; 146
    3660:	d0 40       	sbci	r29, 0x00	; 0
    3662:	00 80       	ld	r0, Z
    3664:	ce 56       	subi	r28, 0x6E	; 110
    3666:	df 4f       	sbci	r29, 0xFF	; 255
    3668:	88 81       	ld	r24, Y
    366a:	99 81       	ldd	r25, Y+1	; 0x01
    366c:	c2 59       	subi	r28, 0x92	; 146
    366e:	d0 40       	sbci	r29, 0x00	; 0
    3670:	01 96       	adiw	r24, 0x01	; 1
    3672:	ce 56       	subi	r28, 0x6E	; 110
    3674:	df 4f       	sbci	r29, 0xFF	; 255
    3676:	99 83       	std	Y+1, r25	; 0x01
    3678:	88 83       	st	Y, r24
    367a:	c2 59       	subi	r28, 0x92	; 146
    367c:	d0 40       	sbci	r29, 0x00	; 0
    367e:	c0 57       	subi	r28, 0x70	; 112
    3680:	df 4f       	sbci	r29, 0xFF	; 255
    3682:	e8 81       	ld	r30, Y
    3684:	f9 81       	ldd	r31, Y+1	; 0x01
    3686:	c0 59       	subi	r28, 0x90	; 144
    3688:	d0 40       	sbci	r29, 0x00	; 0
    368a:	00 82       	st	Z, r0
    368c:	c0 57       	subi	r28, 0x70	; 112
    368e:	df 4f       	sbci	r29, 0xFF	; 255
    3690:	88 81       	ld	r24, Y
    3692:	99 81       	ldd	r25, Y+1	; 0x01
    3694:	c0 59       	subi	r28, 0x90	; 144
    3696:	d0 40       	sbci	r29, 0x00	; 0
    3698:	01 96       	adiw	r24, 0x01	; 1
    369a:	c0 57       	subi	r28, 0x70	; 112
    369c:	df 4f       	sbci	r29, 0xFF	; 255
    369e:	99 83       	std	Y+1, r25	; 0x01
    36a0:	88 83       	st	Y, r24
    36a2:	c0 59       	subi	r28, 0x90	; 144
    36a4:	d0 40       	sbci	r29, 0x00	; 0
    36a6:	cc 56       	subi	r28, 0x6C	; 108
    36a8:	df 4f       	sbci	r29, 0xFF	; 255
    36aa:	98 81       	ld	r25, Y
    36ac:	c4 59       	subi	r28, 0x94	; 148
    36ae:	d0 40       	sbci	r29, 0x00	; 0
    36b0:	91 50       	subi	r25, 0x01	; 1
    36b2:	cc 56       	subi	r28, 0x6C	; 108
    36b4:	df 4f       	sbci	r29, 0xFF	; 255
    36b6:	98 83       	st	Y, r25
    36b8:	c4 59       	subi	r28, 0x94	; 148
    36ba:	d0 40       	sbci	r29, 0x00	; 0
    36bc:	cc 56       	subi	r28, 0x6C	; 108
    36be:	df 4f       	sbci	r29, 0xFF	; 255
    36c0:	e8 81       	ld	r30, Y
    36c2:	c4 59       	subi	r28, 0x94	; 148
    36c4:	d0 40       	sbci	r29, 0x00	; 0
    36c6:	ee 23       	and	r30, r30
    36c8:	31 f6       	brne	.-116    	; 0x3656 <main+0x166>
	PORT_voidInit();
    36ca:	0e 94 06 12 	call	0x240c	; 0x240c <PORT_voidInit>
	CLCD_voidInit();
    36ce:	0e 94 a2 06 	call	0xd44	; 0xd44 <CLCD_voidInit>
	CLCD_voidGoToXY(0,0);
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
	CLCD_u8SendString("Welcome!");
    36da:	80 e6       	ldi	r24, 0x60	; 96
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	aa e7       	ldi	r26, 0x7A	; 122
    36e8:	b4 e4       	ldi	r27, 0x44	; 68
    36ea:	8d ab       	std	Y+53, r24	; 0x35
    36ec:	9e ab       	std	Y+54, r25	; 0x36
    36ee:	af ab       	std	Y+55, r26	; 0x37
    36f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f2:	6d a9       	ldd	r22, Y+53	; 0x35
    36f4:	7e a9       	ldd	r23, Y+54	; 0x36
    36f6:	8f a9       	ldd	r24, Y+55	; 0x37
    36f8:	98 ad       	ldd	r25, Y+56	; 0x38
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	4a e7       	ldi	r20, 0x7A	; 122
    3700:	55 e4       	ldi	r21, 0x45	; 69
    3702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	89 ab       	std	Y+49, r24	; 0x31
    370c:	9a ab       	std	Y+50, r25	; 0x32
    370e:	ab ab       	std	Y+51, r26	; 0x33
    3710:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3712:	69 a9       	ldd	r22, Y+49	; 0x31
    3714:	7a a9       	ldd	r23, Y+50	; 0x32
    3716:	8b a9       	ldd	r24, Y+51	; 0x33
    3718:	9c a9       	ldd	r25, Y+52	; 0x34
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e8       	ldi	r20, 0x80	; 128
    3720:	5f e3       	ldi	r21, 0x3F	; 63
    3722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3726:	88 23       	and	r24, r24
    3728:	2c f4       	brge	.+10     	; 0x3734 <main+0x244>
		__ticks = 1;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	98 ab       	std	Y+48, r25	; 0x30
    3730:	8f a7       	std	Y+47, r24	; 0x2f
    3732:	3f c0       	rjmp	.+126    	; 0x37b2 <main+0x2c2>
	else if (__tmp > 65535)
    3734:	69 a9       	ldd	r22, Y+49	; 0x31
    3736:	7a a9       	ldd	r23, Y+50	; 0x32
    3738:	8b a9       	ldd	r24, Y+51	; 0x33
    373a:	9c a9       	ldd	r25, Y+52	; 0x34
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	3f ef       	ldi	r19, 0xFF	; 255
    3740:	4f e7       	ldi	r20, 0x7F	; 127
    3742:	57 e4       	ldi	r21, 0x47	; 71
    3744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3748:	18 16       	cp	r1, r24
    374a:	4c f5       	brge	.+82     	; 0x379e <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374c:	6d a9       	ldd	r22, Y+53	; 0x35
    374e:	7e a9       	ldd	r23, Y+54	; 0x36
    3750:	8f a9       	ldd	r24, Y+55	; 0x37
    3752:	98 ad       	ldd	r25, Y+56	; 0x38
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e2       	ldi	r20, 0x20	; 32
    375a:	51 e4       	ldi	r21, 0x41	; 65
    375c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	bc 01       	movw	r22, r24
    3766:	cd 01       	movw	r24, r26
    3768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	98 ab       	std	Y+48, r25	; 0x30
    3772:	8f a7       	std	Y+47, r24	; 0x2f
    3774:	0f c0       	rjmp	.+30     	; 0x3794 <main+0x2a4>
    3776:	80 e9       	ldi	r24, 0x90	; 144
    3778:	91 e0       	ldi	r25, 0x01	; 1
    377a:	9e a7       	std	Y+46, r25	; 0x2e
    377c:	8d a7       	std	Y+45, r24	; 0x2d
    377e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3780:	9e a5       	ldd	r25, Y+46	; 0x2e
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <main+0x292>
    3786:	9e a7       	std	Y+46, r25	; 0x2e
    3788:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378a:	8f a5       	ldd	r24, Y+47	; 0x2f
    378c:	98 a9       	ldd	r25, Y+48	; 0x30
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	98 ab       	std	Y+48, r25	; 0x30
    3792:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3794:	8f a5       	ldd	r24, Y+47	; 0x2f
    3796:	98 a9       	ldd	r25, Y+48	; 0x30
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	69 f7       	brne	.-38     	; 0x3776 <main+0x286>
    379c:	14 c0       	rjmp	.+40     	; 0x37c6 <main+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379e:	69 a9       	ldd	r22, Y+49	; 0x31
    37a0:	7a a9       	ldd	r23, Y+50	; 0x32
    37a2:	8b a9       	ldd	r24, Y+51	; 0x33
    37a4:	9c a9       	ldd	r25, Y+52	; 0x34
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	98 ab       	std	Y+48, r25	; 0x30
    37b0:	8f a7       	std	Y+47, r24	; 0x2f
    37b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    37b4:	98 a9       	ldd	r25, Y+48	; 0x30
    37b6:	9c a7       	std	Y+44, r25	; 0x2c
    37b8:	8b a7       	std	Y+43, r24	; 0x2b
    37ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    37bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	f1 f7       	brne	.-4      	; 0x37be <main+0x2ce>
    37c2:	9c a7       	std	Y+44, r25	; 0x2c
    37c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	CLCD_voidSendComd(1);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
	GIE_voidEnableGlobal();
    37cc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <GIE_voidEnableGlobal>
	EXTI_voidInit();
    37d0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <EXTI_voidInit>
	EXTI_u8SetCallBack(EXTI_u8INT0,&EmergencyStop);
    37d4:	2b ef       	ldi	r18, 0xFB	; 251
    37d6:	31 e2       	ldi	r19, 0x21	; 33
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	b9 01       	movw	r22, r18
    37dc:	0e 94 ba 10 	call	0x2174	; 0x2174 <EXTI_u8SetCallBack>

	while(1)
	{
		Local_u8EmergencyIndicator=0;
    37e0:	10 92 76 01 	sts	0x0176, r1
		Local_u8EnteredID=0;
    37e4:	fe 01       	movw	r30, r28
    37e6:	e0 5b       	subi	r30, 0xB0	; 176
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	10 82       	st	Z, r1
    37ec:	11 82       	std	Z+1, r1	; 0x01
    37ee:	12 82       	std	Z+2, r1	; 0x02
    37f0:	13 82       	std	Z+3, r1	; 0x03
		Local_u8EnteredPass=0;
    37f2:	fe 01       	movw	r30, r28
    37f4:	ec 5b       	subi	r30, 0xBC	; 188
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	10 82       	st	Z, r1
    37fa:	11 82       	std	Z+1, r1	; 0x01
    37fc:	12 82       	std	Z+2, r1	; 0x02
    37fe:	13 82       	std	Z+3, r1	; 0x03
		Local_u8Counter1=0;
    3800:	fe 01       	movw	r30, r28
    3802:	eb 5a       	subi	r30, 0xAB	; 171
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	10 82       	st	Z, r1
		Local_u8Counter2=0;
    3808:	fe 01       	movw	r30, r28
    380a:	ec 5a       	subi	r30, 0xAC	; 172
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	10 82       	st	Z, r1
    3810:	ec c5       	rjmp	.+3032   	; 0x43ea <main+0xefa>
		while(Local_u8EmergencyIndicator==0)
		{
			if(Local_u8PassTrials>0)
    3812:	8b ad       	ldd	r24, Y+59	; 0x3b
    3814:	18 16       	cp	r1, r24
    3816:	0c f0       	brlt	.+2      	; 0x381a <main+0x32a>
    3818:	d7 c5       	rjmp	.+2990   	; 0x43c8 <main+0xed8>
			{
			CLCD_voidGoToXY(0,0);
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	60 e0       	ldi	r22, 0x00	; 0
    381e:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			CLCD_u8SendString("Enter ID:");
    3822:	89 e6       	ldi	r24, 0x69	; 105
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
			SSD_u8SetNumber(&Object3,Local_u8PassTrials);
    382a:	2b ad       	ldd	r18, Y+59	; 0x3b
    382c:	ce 01       	movw	r24, r28
    382e:	8a 57       	subi	r24, 0x7A	; 122
    3830:	9f 4f       	sbci	r25, 0xFF	; 255
    3832:	62 2f       	mov	r22, r18
    3834:	0e 94 2b 12 	call	0x2456	; 0x2456 <SSD_u8SetNumber>
			Local_u8PressedKey=KPD_u8GetPressedKey();
    3838:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    383c:	fe 01       	movw	r30, r28
    383e:	ea 5a       	subi	r30, 0xAA	; 170
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 83       	st	Z, r24
			Local_u8Counter1=0;
    3844:	fe 01       	movw	r30, r28
    3846:	eb 5a       	subi	r30, 0xAB	; 171
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	10 82       	st	Z, r1
    384c:	38 c0       	rjmp	.+112    	; 0x38be <main+0x3ce>
			while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
			{
				if(Local_u8PressedKey!=0xff)
    384e:	fe 01       	movw	r30, r28
    3850:	ea 5a       	subi	r30, 0xAA	; 170
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	8f 3f       	cpi	r24, 0xFF	; 255
    3858:	61 f1       	breq	.+88     	; 0x38b2 <main+0x3c2>
				{
					if(KPD_u8GetPressedKey()!=0xff)
    385a:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    385e:	8f 3f       	cpi	r24, 0xFF	; 255
    3860:	11 f0       	breq	.+4      	; 0x3866 <main+0x376>
					{
						KPD_u8GetPressedKey();
    3862:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
					}
					CLCD_voidSendNumber(Local_u8PressedKey);
    3866:	fe 01       	movw	r30, r28
    3868:	ea 5a       	subi	r30, 0xAA	; 170
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	80 81       	ld	r24, Z
    386e:	88 2f       	mov	r24, r24
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	a0 e0       	ldi	r26, 0x00	; 0
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	bc 01       	movw	r22, r24
    3878:	cd 01       	movw	r24, r26
    387a:	0e 94 6f 07 	call	0xede	; 0xede <CLCD_voidSendNumber>
					Local_u8IDArr[Local_u8Counter1]=Local_u8PressedKey;
    387e:	fe 01       	movw	r30, r28
    3880:	eb 5a       	subi	r30, 0xAB	; 171
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 81       	ld	r24, Z
    3886:	28 2f       	mov	r18, r24
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	ce 01       	movw	r24, r28
    388c:	89 5a       	subi	r24, 0xA9	; 169
    388e:	9f 4f       	sbci	r25, 0xFF	; 255
    3890:	dc 01       	movw	r26, r24
    3892:	a2 0f       	add	r26, r18
    3894:	b3 1f       	adc	r27, r19
    3896:	fe 01       	movw	r30, r28
    3898:	ea 5a       	subi	r30, 0xAA	; 170
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 81       	ld	r24, Z
    389e:	8c 93       	st	X, r24
					Local_u8Counter1++;
    38a0:	de 01       	movw	r26, r28
    38a2:	ab 5a       	subi	r26, 0xAB	; 171
    38a4:	bf 4f       	sbci	r27, 0xFF	; 255
    38a6:	fe 01       	movw	r30, r28
    38a8:	eb 5a       	subi	r30, 0xAB	; 171
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 81       	ld	r24, Z
    38ae:	8f 5f       	subi	r24, 0xFF	; 255
    38b0:	8c 93       	st	X, r24
				}
				Local_u8PressedKey=KPD_u8GetPressedKey();
    38b2:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    38b6:	fe 01       	movw	r30, r28
    38b8:	ea 5a       	subi	r30, 0xAA	; 170
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 83       	st	Z, r24
			CLCD_voidGoToXY(0,0);
			CLCD_u8SendString("Enter ID:");
			SSD_u8SetNumber(&Object3,Local_u8PassTrials);
			Local_u8PressedKey=KPD_u8GetPressedKey();
			Local_u8Counter1=0;
			while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
    38be:	fe 01       	movw	r30, r28
    38c0:	ea 5a       	subi	r30, 0xAA	; 170
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	80 81       	ld	r24, Z
    38c6:	85 36       	cpi	r24, 0x65	; 101
    38c8:	29 f0       	breq	.+10     	; 0x38d4 <main+0x3e4>
    38ca:	80 91 76 01 	lds	r24, 0x0176
    38ce:	88 23       	and	r24, r24
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <main+0x3e4>
    38d2:	bd cf       	rjmp	.-134    	; 0x384e <main+0x35e>
					Local_u8IDArr[Local_u8Counter1]=Local_u8PressedKey;
					Local_u8Counter1++;
				}
				Local_u8PressedKey=KPD_u8GetPressedKey();
			}
			if(Local_u8Counter1>0)Local_u8EnteredID=Local_u8IDArr[0];
    38d4:	fe 01       	movw	r30, r28
    38d6:	eb 5a       	subi	r30, 0xAB	; 171
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 81       	ld	r24, Z
    38dc:	88 23       	and	r24, r24
    38de:	79 f0       	breq	.+30     	; 0x38fe <main+0x40e>
    38e0:	fe 01       	movw	r30, r28
    38e2:	e9 5a       	subi	r30, 0xA9	; 169
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	80 81       	ld	r24, Z
    38e8:	fe 01       	movw	r30, r28
    38ea:	e0 5b       	subi	r30, 0xB0	; 176
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	88 2f       	mov	r24, r24
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	a0 e0       	ldi	r26, 0x00	; 0
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	80 83       	st	Z, r24
    38f8:	91 83       	std	Z+1, r25	; 0x01
    38fa:	a2 83       	std	Z+2, r26	; 0x02
    38fc:	b3 83       	std	Z+3, r27	; 0x03
			for(Local_u8Counter2=1;Local_u8Counter2<Local_u8Counter1;Local_u8Counter2++)
    38fe:	fe 01       	movw	r30, r28
    3900:	ec 5a       	subi	r30, 0xAC	; 172
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	80 83       	st	Z, r24
    3908:	36 c0       	rjmp	.+108    	; 0x3976 <main+0x486>
			{
				Local_u8EnteredID=Local_u8EnteredID*10+Local_u8IDArr[Local_u8Counter2];
    390a:	fe 01       	movw	r30, r28
    390c:	e0 5b       	subi	r30, 0xB0	; 176
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	80 81       	ld	r24, Z
    3912:	91 81       	ldd	r25, Z+1	; 0x01
    3914:	a2 81       	ldd	r26, Z+2	; 0x02
    3916:	b3 81       	ldd	r27, Z+3	; 0x03
    3918:	2a e0       	ldi	r18, 0x0A	; 10
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	50 e0       	ldi	r21, 0x00	; 0
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	0e 94 09 22 	call	0x4412	; 0x4412 <__mulsi3>
    3928:	ab 01       	movw	r20, r22
    392a:	bc 01       	movw	r22, r24
    392c:	fe 01       	movw	r30, r28
    392e:	ec 5a       	subi	r30, 0xAC	; 172
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	28 2f       	mov	r18, r24
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	ce 01       	movw	r24, r28
    393a:	89 5a       	subi	r24, 0xA9	; 169
    393c:	9f 4f       	sbci	r25, 0xFF	; 255
    393e:	fc 01       	movw	r30, r24
    3940:	e2 0f       	add	r30, r18
    3942:	f3 1f       	adc	r31, r19
    3944:	80 81       	ld	r24, Z
    3946:	88 2f       	mov	r24, r24
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	a0 e0       	ldi	r26, 0x00	; 0
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	fe 01       	movw	r30, r28
    3950:	e0 5b       	subi	r30, 0xB0	; 176
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	84 0f       	add	r24, r20
    3956:	95 1f       	adc	r25, r21
    3958:	a6 1f       	adc	r26, r22
    395a:	b7 1f       	adc	r27, r23
    395c:	80 83       	st	Z, r24
    395e:	91 83       	std	Z+1, r25	; 0x01
    3960:	a2 83       	std	Z+2, r26	; 0x02
    3962:	b3 83       	std	Z+3, r27	; 0x03
					Local_u8Counter1++;
				}
				Local_u8PressedKey=KPD_u8GetPressedKey();
			}
			if(Local_u8Counter1>0)Local_u8EnteredID=Local_u8IDArr[0];
			for(Local_u8Counter2=1;Local_u8Counter2<Local_u8Counter1;Local_u8Counter2++)
    3964:	de 01       	movw	r26, r28
    3966:	ac 5a       	subi	r26, 0xAC	; 172
    3968:	bf 4f       	sbci	r27, 0xFF	; 255
    396a:	fe 01       	movw	r30, r28
    396c:	ec 5a       	subi	r30, 0xAC	; 172
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	8f 5f       	subi	r24, 0xFF	; 255
    3974:	8c 93       	st	X, r24
    3976:	fe 01       	movw	r30, r28
    3978:	ec 5a       	subi	r30, 0xAC	; 172
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	de 01       	movw	r26, r28
    397e:	ab 5a       	subi	r26, 0xAB	; 171
    3980:	bf 4f       	sbci	r27, 0xFF	; 255
    3982:	90 81       	ld	r25, Z
    3984:	8c 91       	ld	r24, X
    3986:	98 17       	cp	r25, r24
    3988:	08 f4       	brcc	.+2      	; 0x398c <main+0x49c>
    398a:	bf cf       	rjmp	.-130    	; 0x390a <main+0x41a>
			{
				Local_u8EnteredID=Local_u8EnteredID*10+Local_u8IDArr[Local_u8Counter2];
			}
		CLCD_voidSendComd(1);
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
		Local_u8Counter1=0;
    3992:	fe 01       	movw	r30, r28
    3994:	eb 5a       	subi	r30, 0xAB	; 171
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	10 82       	st	Z, r1
		CLCD_voidGoToXY(0,0);
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	60 e0       	ldi	r22, 0x00	; 0
    399e:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_u8SendString("Enter Pass:");
    39a2:	83 e7       	ldi	r24, 0x73	; 115
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
		Local_u8PressedKey=KPD_u8GetPressedKey();
    39aa:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    39ae:	fe 01       	movw	r30, r28
    39b0:	ea 5a       	subi	r30, 0xAA	; 170
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	80 83       	st	Z, r24
    39b6:	38 c0       	rjmp	.+112    	; 0x3a28 <main+0x538>
		while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
		{
			if(Local_u8PressedKey!=0xff)
    39b8:	fe 01       	movw	r30, r28
    39ba:	ea 5a       	subi	r30, 0xAA	; 170
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 81       	ld	r24, Z
    39c0:	8f 3f       	cpi	r24, 0xFF	; 255
    39c2:	61 f1       	breq	.+88     	; 0x3a1c <main+0x52c>
			{
				if(KPD_u8GetPressedKey()!=0xff)
    39c4:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    39c8:	8f 3f       	cpi	r24, 0xFF	; 255
    39ca:	11 f0       	breq	.+4      	; 0x39d0 <main+0x4e0>
				{
					KPD_u8GetPressedKey();
    39cc:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
				}
				CLCD_voidSendNumber(Local_u8PressedKey);
    39d0:	fe 01       	movw	r30, r28
    39d2:	ea 5a       	subi	r30, 0xAA	; 170
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	80 81       	ld	r24, Z
    39d8:	88 2f       	mov	r24, r24
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	a0 e0       	ldi	r26, 0x00	; 0
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	bc 01       	movw	r22, r24
    39e2:	cd 01       	movw	r24, r26
    39e4:	0e 94 6f 07 	call	0xede	; 0xede <CLCD_voidSendNumber>
				Local_u8PassArr[Local_u8Counter1]=Local_u8PressedKey;
    39e8:	fe 01       	movw	r30, r28
    39ea:	eb 5a       	subi	r30, 0xAB	; 171
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	80 81       	ld	r24, Z
    39f0:	28 2f       	mov	r18, r24
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	ce 01       	movw	r24, r28
    39f6:	89 59       	subi	r24, 0x99	; 153
    39f8:	9f 4f       	sbci	r25, 0xFF	; 255
    39fa:	dc 01       	movw	r26, r24
    39fc:	a2 0f       	add	r26, r18
    39fe:	b3 1f       	adc	r27, r19
    3a00:	fe 01       	movw	r30, r28
    3a02:	ea 5a       	subi	r30, 0xAA	; 170
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 81       	ld	r24, Z
    3a08:	8c 93       	st	X, r24
				Local_u8Counter1++;
    3a0a:	de 01       	movw	r26, r28
    3a0c:	ab 5a       	subi	r26, 0xAB	; 171
    3a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a10:	fe 01       	movw	r30, r28
    3a12:	eb 5a       	subi	r30, 0xAB	; 171
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 81       	ld	r24, Z
    3a18:	8f 5f       	subi	r24, 0xFF	; 255
    3a1a:	8c 93       	st	X, r24
			}
			Local_u8PressedKey=KPD_u8GetPressedKey();
    3a1c:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3a20:	fe 01       	movw	r30, r28
    3a22:	ea 5a       	subi	r30, 0xAA	; 170
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 83       	st	Z, r24
		CLCD_voidSendComd(1);
		Local_u8Counter1=0;
		CLCD_voidGoToXY(0,0);
		CLCD_u8SendString("Enter Pass:");
		Local_u8PressedKey=KPD_u8GetPressedKey();
		while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
    3a28:	fe 01       	movw	r30, r28
    3a2a:	ea 5a       	subi	r30, 0xAA	; 170
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	80 81       	ld	r24, Z
    3a30:	85 36       	cpi	r24, 0x65	; 101
    3a32:	29 f0       	breq	.+10     	; 0x3a3e <main+0x54e>
    3a34:	80 91 76 01 	lds	r24, 0x0176
    3a38:	88 23       	and	r24, r24
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <main+0x54e>
    3a3c:	bd cf       	rjmp	.-134    	; 0x39b8 <main+0x4c8>
				Local_u8PassArr[Local_u8Counter1]=Local_u8PressedKey;
				Local_u8Counter1++;
			}
			Local_u8PressedKey=KPD_u8GetPressedKey();
		}
		if(Local_u8Counter1>0)Local_u8EnteredPass=Local_u8PassArr[0];
    3a3e:	fe 01       	movw	r30, r28
    3a40:	eb 5a       	subi	r30, 0xAB	; 171
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	88 23       	and	r24, r24
    3a48:	79 f0       	breq	.+30     	; 0x3a68 <main+0x578>
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	e9 59       	subi	r30, 0x99	; 153
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	80 81       	ld	r24, Z
    3a52:	fe 01       	movw	r30, r28
    3a54:	ec 5b       	subi	r30, 0xBC	; 188
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	88 2f       	mov	r24, r24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	a0 e0       	ldi	r26, 0x00	; 0
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	80 83       	st	Z, r24
    3a62:	91 83       	std	Z+1, r25	; 0x01
    3a64:	a2 83       	std	Z+2, r26	; 0x02
    3a66:	b3 83       	std	Z+3, r27	; 0x03
		for(Local_u8Counter2=1;Local_u8Counter2<Local_u8Counter1;Local_u8Counter2++)
    3a68:	fe 01       	movw	r30, r28
    3a6a:	ec 5a       	subi	r30, 0xAC	; 172
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	80 83       	st	Z, r24
    3a72:	36 c0       	rjmp	.+108    	; 0x3ae0 <main+0x5f0>
		{
			Local_u8EnteredPass=Local_u8EnteredPass*10+Local_u8PassArr[Local_u8Counter2];
    3a74:	fe 01       	movw	r30, r28
    3a76:	ec 5b       	subi	r30, 0xBC	; 188
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 81       	ld	r24, Z
    3a7c:	91 81       	ldd	r25, Z+1	; 0x01
    3a7e:	a2 81       	ldd	r26, Z+2	; 0x02
    3a80:	b3 81       	ldd	r27, Z+3	; 0x03
    3a82:	2a e0       	ldi	r18, 0x0A	; 10
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e0       	ldi	r20, 0x00	; 0
    3a88:	50 e0       	ldi	r21, 0x00	; 0
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 09 22 	call	0x4412	; 0x4412 <__mulsi3>
    3a92:	ab 01       	movw	r20, r22
    3a94:	bc 01       	movw	r22, r24
    3a96:	fe 01       	movw	r30, r28
    3a98:	ec 5a       	subi	r30, 0xAC	; 172
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	80 81       	ld	r24, Z
    3a9e:	28 2f       	mov	r18, r24
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	89 59       	subi	r24, 0x99	; 153
    3aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	e2 0f       	add	r30, r18
    3aac:	f3 1f       	adc	r31, r19
    3aae:	80 81       	ld	r24, Z
    3ab0:	88 2f       	mov	r24, r24
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	a0 e0       	ldi	r26, 0x00	; 0
    3ab6:	b0 e0       	ldi	r27, 0x00	; 0
    3ab8:	fe 01       	movw	r30, r28
    3aba:	ec 5b       	subi	r30, 0xBC	; 188
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	84 0f       	add	r24, r20
    3ac0:	95 1f       	adc	r25, r21
    3ac2:	a6 1f       	adc	r26, r22
    3ac4:	b7 1f       	adc	r27, r23
    3ac6:	80 83       	st	Z, r24
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	a2 83       	std	Z+2, r26	; 0x02
    3acc:	b3 83       	std	Z+3, r27	; 0x03
				Local_u8Counter1++;
			}
			Local_u8PressedKey=KPD_u8GetPressedKey();
		}
		if(Local_u8Counter1>0)Local_u8EnteredPass=Local_u8PassArr[0];
		for(Local_u8Counter2=1;Local_u8Counter2<Local_u8Counter1;Local_u8Counter2++)
    3ace:	de 01       	movw	r26, r28
    3ad0:	ac 5a       	subi	r26, 0xAC	; 172
    3ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	ec 5a       	subi	r30, 0xAC	; 172
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	80 81       	ld	r24, Z
    3adc:	8f 5f       	subi	r24, 0xFF	; 255
    3ade:	8c 93       	st	X, r24
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	ec 5a       	subi	r30, 0xAC	; 172
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	de 01       	movw	r26, r28
    3ae8:	ab 5a       	subi	r26, 0xAB	; 171
    3aea:	bf 4f       	sbci	r27, 0xFF	; 255
    3aec:	90 81       	ld	r25, Z
    3aee:	8c 91       	ld	r24, X
    3af0:	98 17       	cp	r25, r24
    3af2:	08 f4       	brcc	.+2      	; 0x3af6 <main+0x606>
    3af4:	bf cf       	rjmp	.-130    	; 0x3a74 <main+0x584>
		{
			Local_u8EnteredPass=Local_u8EnteredPass*10+Local_u8PassArr[Local_u8Counter2];
		}
		CLCD_voidSendComd(1);
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
		if(Local_u8EnteredPass==Local_u32RealPass&&Local_u8EnteredID==Local_u32RealID)
    3afc:	fe 01       	movw	r30, r28
    3afe:	ec 5b       	subi	r30, 0xBC	; 188
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	de 01       	movw	r26, r28
    3b04:	a4 5b       	subi	r26, 0xB4	; 180
    3b06:	bf 4f       	sbci	r27, 0xFF	; 255
    3b08:	20 81       	ld	r18, Z
    3b0a:	31 81       	ldd	r19, Z+1	; 0x01
    3b0c:	42 81       	ldd	r20, Z+2	; 0x02
    3b0e:	53 81       	ldd	r21, Z+3	; 0x03
    3b10:	8d 91       	ld	r24, X+
    3b12:	9d 91       	ld	r25, X+
    3b14:	0d 90       	ld	r0, X+
    3b16:	bc 91       	ld	r27, X
    3b18:	a0 2d       	mov	r26, r0
    3b1a:	28 17       	cp	r18, r24
    3b1c:	39 07       	cpc	r19, r25
    3b1e:	4a 07       	cpc	r20, r26
    3b20:	5b 07       	cpc	r21, r27
    3b22:	09 f0       	breq	.+2      	; 0x3b26 <main+0x636>
    3b24:	cc c3       	rjmp	.+1944   	; 0x42be <main+0xdce>
    3b26:	fe 01       	movw	r30, r28
    3b28:	e0 5b       	subi	r30, 0xB0	; 176
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	de 01       	movw	r26, r28
    3b2e:	a8 5b       	subi	r26, 0xB8	; 184
    3b30:	bf 4f       	sbci	r27, 0xFF	; 255
    3b32:	20 81       	ld	r18, Z
    3b34:	31 81       	ldd	r19, Z+1	; 0x01
    3b36:	42 81       	ldd	r20, Z+2	; 0x02
    3b38:	53 81       	ldd	r21, Z+3	; 0x03
    3b3a:	8d 91       	ld	r24, X+
    3b3c:	9d 91       	ld	r25, X+
    3b3e:	0d 90       	ld	r0, X+
    3b40:	bc 91       	ld	r27, X
    3b42:	a0 2d       	mov	r26, r0
    3b44:	28 17       	cp	r18, r24
    3b46:	39 07       	cpc	r19, r25
    3b48:	4a 07       	cpc	r20, r26
    3b4a:	5b 07       	cpc	r21, r27
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <main+0x660>
    3b4e:	b7 c3       	rjmp	.+1902   	; 0x42be <main+0xdce>
		{
			 Local_u8PassTrials=TRIALS;
    3b50:	83 e0       	ldi	r24, 0x03	; 3
    3b52:	8b af       	std	Y+59, r24	; 0x3b
    3b54:	ab c3       	rjmp	.+1878   	; 0x42ac <main+0xdbc>
			while(Local_u8EmergencyIndicator==0)
			{
			Local_ArrCounter=0;
    3b56:	1c ae       	std	Y+60, r1	; 0x3c
			Local_u8Counter=0;
    3b58:	fe 01       	movw	r30, r28
    3b5a:	ef 5b       	subi	r30, 0xBF	; 191
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	10 82       	st	Z, r1
			Local_u8Stepperangle=0;
    3b60:	fe 01       	movw	r30, r28
    3b62:	fd 96       	adiw	r30, 0x3d	; 61
    3b64:	10 82       	st	Z, r1
    3b66:	11 82       	std	Z+1, r1	; 0x01
    3b68:	12 82       	std	Z+2, r1	; 0x02
    3b6a:	13 82       	std	Z+3, r1	; 0x03
			CLCD_voidGoToXY(0,0);
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			CLCD_u8SendString("1->DC MOTOR");
    3b74:	8f e7       	ldi	r24, 0x7F	; 127
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
			CLCD_voidGoToXY(0,1);
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	61 e0       	ldi	r22, 0x01	; 1
    3b80:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			CLCD_u8SendString("2->STEPPER MOTOR");
    3b84:	8b e8       	ldi	r24, 0x8B	; 139
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
			Local_u8PressedKey=KPD_u8GetPressedKey();
    3b8c:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3b90:	fe 01       	movw	r30, r28
    3b92:	ea 5a       	subi	r30, 0xAA	; 170
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 83       	st	Z, r24
			if(Local_u8PressedKey!=0xff)
    3b98:	fe 01       	movw	r30, r28
    3b9a:	ea 5a       	subi	r30, 0xAA	; 170
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 81       	ld	r24, Z
    3ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <main+0x6b6>
    3ba4:	83 c3       	rjmp	.+1798   	; 0x42ac <main+0xdbc>
			{
				CLCD_voidSendComd(1);
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
				while(KPD_u8GetPressedKey()!=0xff);
    3bac:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3bb0:	8f 3f       	cpi	r24, 0xFF	; 255
    3bb2:	e1 f7       	brne	.-8      	; 0x3bac <main+0x6bc>
				if(Local_u8PressedKey==1)
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	ea 5a       	subi	r30, 0xAA	; 170
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	81 30       	cpi	r24, 0x01	; 1
    3bbe:	51 f4       	brne	.+20     	; 0x3bd4 <main+0x6e4>
				{
					Local_u8DCMIndicator=1;
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	ed 5b       	subi	r30, 0xBD	; 189
    3bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	80 83       	st	Z, r24
					Local_u8StepperIndicator=0;
    3bca:	fe 01       	movw	r30, r28
    3bcc:	ee 5b       	subi	r30, 0xBE	; 190
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	10 82       	st	Z, r1
    3bd2:	9d c0       	rjmp	.+314    	; 0x3d0e <main+0x81e>
				}
				else if(Local_u8PressedKey==2)
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	ea 5a       	subi	r30, 0xAA	; 170
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	80 81       	ld	r24, Z
    3bdc:	82 30       	cpi	r24, 0x02	; 2
    3bde:	51 f4       	brne	.+20     	; 0x3bf4 <main+0x704>
				{
					Local_u8DCMIndicator=0;
    3be0:	fe 01       	movw	r30, r28
    3be2:	ed 5b       	subi	r30, 0xBD	; 189
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	10 82       	st	Z, r1
					Local_u8StepperIndicator=1;
    3be8:	fe 01       	movw	r30, r28
    3bea:	ee 5b       	subi	r30, 0xBE	; 190
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	80 83       	st	Z, r24
    3bf2:	8d c0       	rjmp	.+282    	; 0x3d0e <main+0x81e>
				}
				else if(Local_u8PressedKey==3)
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	ea 5a       	subi	r30, 0xAA	; 170
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	80 81       	ld	r24, Z
    3bfc:	83 30       	cpi	r24, 0x03	; 3
    3bfe:	09 f0       	breq	.+2      	; 0x3c02 <main+0x712>
    3c00:	86 c0       	rjmp	.+268    	; 0x3d0e <main+0x81e>
				{
					Local_u8DCMIndicator=0;
    3c02:	fe 01       	movw	r30, r28
    3c04:	ed 5b       	subi	r30, 0xBD	; 189
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	10 82       	st	Z, r1
					Local_u8StepperIndicator=0;
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	ee 5b       	subi	r30, 0xBE	; 190
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	10 82       	st	Z, r1
    3c12:	7d c0       	rjmp	.+250    	; 0x3d0e <main+0x81e>
				}
				while(Local_u8DCMIndicator==1&&Local_u8EmergencyIndicator==0)
				{
					CLCD_voidGoToXY(0,0);
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	60 e0       	ldi	r22, 0x00	; 0
    3c18:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
					if(Local_u8Counter==0)
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	ef 5b       	subi	r30, 0xBF	; 191
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	80 81       	ld	r24, Z
    3c24:	88 23       	and	r24, r24
    3c26:	a9 f4       	brne	.+42     	; 0x3c52 <main+0x762>
					{
					CLCD_u8SendString("1->CW");
    3c28:	8c e9       	ldi	r24, 0x9C	; 156
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
					CLCD_voidGoToXY(0,1);
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	61 e0       	ldi	r22, 0x01	; 1
    3c34:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
					CLCD_u8SendString("2->CCW");
    3c38:	82 ea       	ldi	r24, 0xA2	; 162
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
					Local_u8Counter++;
    3c40:	de 01       	movw	r26, r28
    3c42:	af 5b       	subi	r26, 0xBF	; 191
    3c44:	bf 4f       	sbci	r27, 0xFF	; 255
    3c46:	fe 01       	movw	r30, r28
    3c48:	ef 5b       	subi	r30, 0xBF	; 191
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	80 81       	ld	r24, Z
    3c4e:	8f 5f       	subi	r24, 0xFF	; 255
    3c50:	8c 93       	st	X, r24
					}
					Local_u8PressedKey=KPD_u8GetPressedKey();
    3c52:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3c56:	fe 01       	movw	r30, r28
    3c58:	ea 5a       	subi	r30, 0xAA	; 170
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	80 83       	st	Z, r24
					if(Local_u8PressedKey!=0xff)
    3c5e:	fe 01       	movw	r30, r28
    3c60:	ea 5a       	subi	r30, 0xAA	; 170
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	80 81       	ld	r24, Z
    3c66:	8f 3f       	cpi	r24, 0xFF	; 255
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <main+0x77c>
    3c6a:	51 c0       	rjmp	.+162    	; 0x3d0e <main+0x81e>
					{
						while(KPD_u8GetPressedKey()!=0xff);
    3c6c:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3c70:	8f 3f       	cpi	r24, 0xFF	; 255
    3c72:	e1 f7       	brne	.-8      	; 0x3c6c <main+0x77c>
						if(Local_u8PressedKey==1)
    3c74:	fe 01       	movw	r30, r28
    3c76:	ea 5a       	subi	r30, 0xAA	; 170
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	80 81       	ld	r24, Z
    3c7c:	81 30       	cpi	r24, 0x01	; 1
    3c7e:	c1 f4       	brne	.+48     	; 0x3cb0 <main+0x7c0>
						{
							DCM_u8RotateRight(&Object1);
    3c80:	82 e6       	ldi	r24, 0x62	; 98
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	0e 94 b7 09 	call	0x136e	; 0x136e <DCM_u8RotateRight>
							CLCD_voidSendComd(1);
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_voidGoToXY(0,0);
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	60 e0       	ldi	r22, 0x00	; 0
    3c92:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("DC MOTOR CW ON!");
    3c96:	89 ea       	ldi	r24, 0xA9	; 169
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
							CLCD_voidGoToXY(0,1);
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	61 e0       	ldi	r22, 0x01	; 1
    3ca2:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("2->CCW,3->Stop");
    3ca6:	89 eb       	ldi	r24, 0xB9	; 185
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    3cae:	2f c0       	rjmp	.+94     	; 0x3d0e <main+0x81e>
						}
						else if(Local_u8PressedKey==2)
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	ea 5a       	subi	r30, 0xAA	; 170
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	80 81       	ld	r24, Z
    3cb8:	82 30       	cpi	r24, 0x02	; 2
    3cba:	c1 f4       	brne	.+48     	; 0x3cec <main+0x7fc>
						{
							DCM_u8RotateLeft(&Object1);
    3cbc:	82 e6       	ldi	r24, 0x62	; 98
    3cbe:	91 e0       	ldi	r25, 0x01	; 1
    3cc0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DCM_u8RotateLeft>
							CLCD_voidSendComd(1);
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_voidGoToXY(0,0);
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	60 e0       	ldi	r22, 0x00	; 0
    3cce:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("DC MOTOR CCW ON!");
    3cd2:	88 ec       	ldi	r24, 0xC8	; 200
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
							CLCD_voidGoToXY(0,1);
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	61 e0       	ldi	r22, 0x01	; 1
    3cde:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("1->CW,3->Stop");
    3ce2:	89 ed       	ldi	r24, 0xD9	; 217
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    3cea:	11 c0       	rjmp	.+34     	; 0x3d0e <main+0x81e>
						}
						else if(Local_u8PressedKey==3)
    3cec:	fe 01       	movw	r30, r28
    3cee:	ea 5a       	subi	r30, 0xAA	; 170
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	80 81       	ld	r24, Z
    3cf4:	83 30       	cpi	r24, 0x03	; 3
    3cf6:	59 f4       	brne	.+22     	; 0x3d0e <main+0x81e>
						{
							DCM_u8Stop(&Object1);
    3cf8:	82 e6       	ldi	r24, 0x62	; 98
    3cfa:	91 e0       	ldi	r25, 0x01	; 1
    3cfc:	0e 94 31 0a 	call	0x1462	; 0x1462 <DCM_u8Stop>
							Local_u8DCMIndicator=0;
    3d00:	fe 01       	movw	r30, r28
    3d02:	ed 5b       	subi	r30, 0xBD	; 189
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	10 82       	st	Z, r1
							CLCD_voidSendComd(1);
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
				else if(Local_u8PressedKey==3)
				{
					Local_u8DCMIndicator=0;
					Local_u8StepperIndicator=0;
				}
				while(Local_u8DCMIndicator==1&&Local_u8EmergencyIndicator==0)
    3d0e:	fe 01       	movw	r30, r28
    3d10:	ed 5b       	subi	r30, 0xBD	; 189
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	80 81       	ld	r24, Z
    3d16:	81 30       	cpi	r24, 0x01	; 1
    3d18:	09 f0       	breq	.+2      	; 0x3d1c <main+0x82c>
    3d1a:	bd c2       	rjmp	.+1402   	; 0x4296 <main+0xda6>
    3d1c:	80 91 76 01 	lds	r24, 0x0176
    3d20:	88 23       	and	r24, r24
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <main+0x836>
    3d24:	77 cf       	rjmp	.-274    	; 0x3c14 <main+0x724>
    3d26:	b7 c2       	rjmp	.+1390   	; 0x4296 <main+0xda6>
					}

				}
				while(Local_u8StepperIndicator==1&&Local_u8EmergencyIndicator==0)
				{
					CLCD_voidGoToXY(0,0);
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
					if(Local_u8Counter==0)
    3d30:	fe 01       	movw	r30, r28
    3d32:	ef 5b       	subi	r30, 0xBF	; 191
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	80 81       	ld	r24, Z
    3d38:	88 23       	and	r24, r24
    3d3a:	a9 f4       	brne	.+42     	; 0x3d66 <main+0x876>
					{
					CLCD_u8SendString("1->CW");
    3d3c:	8c e9       	ldi	r24, 0x9C	; 156
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
					CLCD_voidGoToXY(0,1);
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	61 e0       	ldi	r22, 0x01	; 1
    3d48:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
					CLCD_u8SendString("2->CCW");
    3d4c:	82 ea       	ldi	r24, 0xA2	; 162
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
					Local_u8Counter++;
    3d54:	de 01       	movw	r26, r28
    3d56:	af 5b       	subi	r26, 0xBF	; 191
    3d58:	bf 4f       	sbci	r27, 0xFF	; 255
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ef 5b       	subi	r30, 0xBF	; 191
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	8f 5f       	subi	r24, 0xFF	; 255
    3d64:	8c 93       	st	X, r24
					}
					Local_u8PressedKey=KPD_u8GetPressedKey();
    3d66:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	ea 5a       	subi	r30, 0xAA	; 170
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 83       	st	Z, r24
					if(Local_u8PressedKey!=0xff)
    3d72:	fe 01       	movw	r30, r28
    3d74:	ea 5a       	subi	r30, 0xAA	; 170
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d7c:	09 f4       	brne	.+2      	; 0x3d80 <main+0x890>
    3d7e:	8b c2       	rjmp	.+1302   	; 0x4296 <main+0xda6>
					{
						while(KPD_u8GetPressedKey()!=0xff);
    3d80:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3d84:	8f 3f       	cpi	r24, 0xFF	; 255
    3d86:	e1 f7       	brne	.-8      	; 0x3d80 <main+0x890>
						if(Local_u8PressedKey==1)
    3d88:	fe 01       	movw	r30, r28
    3d8a:	ea 5a       	subi	r30, 0xAA	; 170
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 81       	ld	r24, Z
    3d90:	81 30       	cpi	r24, 0x01	; 1
    3d92:	09 f0       	breq	.+2      	; 0x3d96 <main+0x8a6>
    3d94:	36 c1       	rjmp	.+620    	; 0x4002 <main+0xb12>
						{
							CLCD_voidSendComd(1);
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_u8SendString("angle=");
    3d9c:	87 ee       	ldi	r24, 0xE7	; 231
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    3da4:	35 c0       	rjmp	.+106    	; 0x3e10 <main+0x920>
							while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
							{
								Local_u8PressedKey=KPD_u8GetPressedKey();
    3da6:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    3daa:	fe 01       	movw	r30, r28
    3dac:	ea 5a       	subi	r30, 0xAA	; 170
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 83       	st	Z, r24
								if(Local_u8PressedKey!=0xff&&Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
    3db2:	fe 01       	movw	r30, r28
    3db4:	ea 5a       	subi	r30, 0xAA	; 170
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	80 81       	ld	r24, Z
    3dba:	8f 3f       	cpi	r24, 0xFF	; 255
    3dbc:	49 f1       	breq	.+82     	; 0x3e10 <main+0x920>
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ea 5a       	subi	r30, 0xAA	; 170
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	80 81       	ld	r24, Z
    3dc6:	85 36       	cpi	r24, 0x65	; 101
    3dc8:	19 f1       	breq	.+70     	; 0x3e10 <main+0x920>
    3dca:	80 91 76 01 	lds	r24, 0x0176
    3dce:	88 23       	and	r24, r24
    3dd0:	f9 f4       	brne	.+62     	; 0x3e10 <main+0x920>
								{
								Local_Arr[Local_ArrCounter]=Local_u8PressedKey;
    3dd2:	8c ad       	ldd	r24, Y+60	; 0x3c
    3dd4:	28 2f       	mov	r18, r24
    3dd6:	33 27       	eor	r19, r19
    3dd8:	27 fd       	sbrc	r18, 7
    3dda:	30 95       	com	r19
    3ddc:	ce 01       	movw	r24, r28
    3dde:	89 58       	subi	r24, 0x89	; 137
    3de0:	9f 4f       	sbci	r25, 0xFF	; 255
    3de2:	dc 01       	movw	r26, r24
    3de4:	a2 0f       	add	r26, r18
    3de6:	b3 1f       	adc	r27, r19
    3de8:	fe 01       	movw	r30, r28
    3dea:	ea 5a       	subi	r30, 0xAA	; 170
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	80 81       	ld	r24, Z
    3df0:	8c 93       	st	X, r24
								CLCD_voidSendNumber(Local_u8PressedKey);
    3df2:	fe 01       	movw	r30, r28
    3df4:	ea 5a       	subi	r30, 0xAA	; 170
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	88 2f       	mov	r24, r24
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	a0 e0       	ldi	r26, 0x00	; 0
    3e00:	b0 e0       	ldi	r27, 0x00	; 0
    3e02:	bc 01       	movw	r22, r24
    3e04:	cd 01       	movw	r24, r26
    3e06:	0e 94 6f 07 	call	0xede	; 0xede <CLCD_voidSendNumber>
								Local_ArrCounter++;
    3e0a:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e0c:	8f 5f       	subi	r24, 0xFF	; 255
    3e0e:	8c af       	std	Y+60, r24	; 0x3c
						while(KPD_u8GetPressedKey()!=0xff);
						if(Local_u8PressedKey==1)
						{
							CLCD_voidSendComd(1);
							CLCD_u8SendString("angle=");
							while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
    3e10:	fe 01       	movw	r30, r28
    3e12:	ea 5a       	subi	r30, 0xAA	; 170
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	80 81       	ld	r24, Z
    3e18:	85 36       	cpi	r24, 0x65	; 101
    3e1a:	21 f0       	breq	.+8      	; 0x3e24 <main+0x934>
    3e1c:	80 91 76 01 	lds	r24, 0x0176
    3e20:	88 23       	and	r24, r24
    3e22:	09 f2       	breq	.-126    	; 0x3da6 <main+0x8b6>
								Local_Arr[Local_ArrCounter]=Local_u8PressedKey;
								CLCD_voidSendNumber(Local_u8PressedKey);
								Local_ArrCounter++;
								}
							}
							Local_u8Stepperangle=Local_Arr[0];
    3e24:	fe 01       	movw	r30, r28
    3e26:	e9 58       	subi	r30, 0x89	; 137
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	80 81       	ld	r24, Z
    3e2c:	88 2f       	mov	r24, r24
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	a0 e0       	ldi	r26, 0x00	; 0
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	fe 01       	movw	r30, r28
    3e36:	fd 96       	adiw	r30, 0x3d	; 61
    3e38:	80 83       	st	Z, r24
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	a2 83       	std	Z+2, r26	; 0x02
    3e3e:	b3 83       	std	Z+3, r27	; 0x03
							for(sint8 LoopCounter=1;LoopCounter<Local_ArrCounter;LoopCounter++)
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	8a af       	std	Y+58, r24	; 0x3a
    3e44:	2d c0       	rjmp	.+90     	; 0x3ea0 <main+0x9b0>
							{
								Local_u8Stepperangle=Local_u8Stepperangle*10+Local_Arr[LoopCounter];
    3e46:	fe 01       	movw	r30, r28
    3e48:	fd 96       	adiw	r30, 0x3d	; 61
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3e50:	b3 81       	ldd	r27, Z+3	; 0x03
    3e52:	2a e0       	ldi	r18, 0x0A	; 10
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e0       	ldi	r20, 0x00	; 0
    3e58:	50 e0       	ldi	r21, 0x00	; 0
    3e5a:	bc 01       	movw	r22, r24
    3e5c:	cd 01       	movw	r24, r26
    3e5e:	0e 94 09 22 	call	0x4412	; 0x4412 <__mulsi3>
    3e62:	ab 01       	movw	r20, r22
    3e64:	bc 01       	movw	r22, r24
    3e66:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e68:	28 2f       	mov	r18, r24
    3e6a:	33 27       	eor	r19, r19
    3e6c:	27 fd       	sbrc	r18, 7
    3e6e:	30 95       	com	r19
    3e70:	ce 01       	movw	r24, r28
    3e72:	89 58       	subi	r24, 0x89	; 137
    3e74:	9f 4f       	sbci	r25, 0xFF	; 255
    3e76:	fc 01       	movw	r30, r24
    3e78:	e2 0f       	add	r30, r18
    3e7a:	f3 1f       	adc	r31, r19
    3e7c:	80 81       	ld	r24, Z
    3e7e:	88 2f       	mov	r24, r24
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	a0 e0       	ldi	r26, 0x00	; 0
    3e84:	b0 e0       	ldi	r27, 0x00	; 0
    3e86:	84 0f       	add	r24, r20
    3e88:	95 1f       	adc	r25, r21
    3e8a:	a6 1f       	adc	r26, r22
    3e8c:	b7 1f       	adc	r27, r23
    3e8e:	fe 01       	movw	r30, r28
    3e90:	fd 96       	adiw	r30, 0x3d	; 61
    3e92:	80 83       	st	Z, r24
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	a2 83       	std	Z+2, r26	; 0x02
    3e98:	b3 83       	std	Z+3, r27	; 0x03
								CLCD_voidSendNumber(Local_u8PressedKey);
								Local_ArrCounter++;
								}
							}
							Local_u8Stepperangle=Local_Arr[0];
							for(sint8 LoopCounter=1;LoopCounter<Local_ArrCounter;LoopCounter++)
    3e9a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e9c:	8f 5f       	subi	r24, 0xFF	; 255
    3e9e:	8a af       	std	Y+58, r24	; 0x3a
    3ea0:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ea2:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ea4:	98 17       	cp	r25, r24
    3ea6:	7c f2       	brlt	.-98     	; 0x3e46 <main+0x956>
							{
								Local_u8Stepperangle=Local_u8Stepperangle*10+Local_Arr[LoopCounter];
							}
							if(Local_u8EmergencyIndicator==0)
    3ea8:	80 91 76 01 	lds	r24, 0x0176
    3eac:	88 23       	and	r24, r24
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <main+0x9c2>
    3eb0:	a3 c0       	rjmp	.+326    	; 0x3ff8 <main+0xb08>
							{
							CLCD_voidSendComd(1);
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_voidGoToXY(0,0);
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("Step MOTOR CW!");
    3ec0:	8e ee       	ldi	r24, 0xEE	; 238
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
							CLCD_voidGoToXY(0,1);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	61 e0       	ldi	r22, 0x01	; 1
    3ecc:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("angle=");
    3ed0:	87 ee       	ldi	r24, 0xE7	; 231
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
							CLCD_voidSendNumber(Local_u8Stepperangle);
    3ed8:	fe 01       	movw	r30, r28
    3eda:	fd 96       	adiw	r30, 0x3d	; 61
    3edc:	80 81       	ld	r24, Z
    3ede:	91 81       	ldd	r25, Z+1	; 0x01
    3ee0:	a2 81       	ldd	r26, Z+2	; 0x02
    3ee2:	b3 81       	ldd	r27, Z+3	; 0x03
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	0e 94 6f 07 	call	0xede	; 0xede <CLCD_voidSendNumber>
							STEPPER_u8Rotate(&Object2,Local_u8Stepperangle,CW);
    3eec:	2d ad       	ldd	r18, Y+61	; 0x3d
    3eee:	3e ad       	ldd	r19, Y+62	; 0x3e
    3ef0:	ce 01       	movw	r24, r28
    3ef2:	8f 57       	subi	r24, 0x7F	; 127
    3ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef6:	b9 01       	movw	r22, r18
    3ef8:	41 e0       	ldi	r20, 0x01	; 1
    3efa:	0e 94 89 12 	call	0x2512	; 0x2512 <STEPPER_u8Rotate>
							CLCD_voidSendComd(1);
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_voidGoToXY(0,0);
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("FINISHED!");
    3f0c:	8d ef       	ldi	r24, 0xFD	; 253
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	aa e7       	ldi	r26, 0x7A	; 122
    3f1a:	b4 e4       	ldi	r27, 0x44	; 68
    3f1c:	8f a3       	std	Y+39, r24	; 0x27
    3f1e:	98 a7       	std	Y+40, r25	; 0x28
    3f20:	a9 a7       	std	Y+41, r26	; 0x29
    3f22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f24:	6f a1       	ldd	r22, Y+39	; 0x27
    3f26:	78 a5       	ldd	r23, Y+40	; 0x28
    3f28:	89 a5       	ldd	r24, Y+41	; 0x29
    3f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	4a e7       	ldi	r20, 0x7A	; 122
    3f32:	55 e4       	ldi	r21, 0x45	; 69
    3f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	8b a3       	std	Y+35, r24	; 0x23
    3f3e:	9c a3       	std	Y+36, r25	; 0x24
    3f40:	ad a3       	std	Y+37, r26	; 0x25
    3f42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f44:	6b a1       	ldd	r22, Y+35	; 0x23
    3f46:	7c a1       	ldd	r23, Y+36	; 0x24
    3f48:	8d a1       	ldd	r24, Y+37	; 0x25
    3f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	40 e8       	ldi	r20, 0x80	; 128
    3f52:	5f e3       	ldi	r21, 0x3F	; 63
    3f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f58:	88 23       	and	r24, r24
    3f5a:	2c f4       	brge	.+10     	; 0x3f66 <main+0xa76>
		__ticks = 1;
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	9a a3       	std	Y+34, r25	; 0x22
    3f62:	89 a3       	std	Y+33, r24	; 0x21
    3f64:	3f c0       	rjmp	.+126    	; 0x3fe4 <main+0xaf4>
	else if (__tmp > 65535)
    3f66:	6b a1       	ldd	r22, Y+35	; 0x23
    3f68:	7c a1       	ldd	r23, Y+36	; 0x24
    3f6a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f6c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	3f ef       	ldi	r19, 0xFF	; 255
    3f72:	4f e7       	ldi	r20, 0x7F	; 127
    3f74:	57 e4       	ldi	r21, 0x47	; 71
    3f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f7a:	18 16       	cp	r1, r24
    3f7c:	4c f5       	brge	.+82     	; 0x3fd0 <main+0xae0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f7e:	6f a1       	ldd	r22, Y+39	; 0x27
    3f80:	78 a5       	ldd	r23, Y+40	; 0x28
    3f82:	89 a5       	ldd	r24, Y+41	; 0x29
    3f84:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e2       	ldi	r20, 0x20	; 32
    3f8c:	51 e4       	ldi	r21, 0x41	; 65
    3f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	bc 01       	movw	r22, r24
    3f98:	cd 01       	movw	r24, r26
    3f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	9a a3       	std	Y+34, r25	; 0x22
    3fa4:	89 a3       	std	Y+33, r24	; 0x21
    3fa6:	0f c0       	rjmp	.+30     	; 0x3fc6 <main+0xad6>
    3fa8:	80 e9       	ldi	r24, 0x90	; 144
    3faa:	91 e0       	ldi	r25, 0x01	; 1
    3fac:	98 a3       	std	Y+32, r25	; 0x20
    3fae:	8f 8f       	std	Y+31, r24	; 0x1f
    3fb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fb2:	98 a1       	ldd	r25, Y+32	; 0x20
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <main+0xac4>
    3fb8:	98 a3       	std	Y+32, r25	; 0x20
    3fba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    3fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	9a a3       	std	Y+34, r25	; 0x22
    3fc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc6:	89 a1       	ldd	r24, Y+33	; 0x21
    3fc8:	9a a1       	ldd	r25, Y+34	; 0x22
    3fca:	00 97       	sbiw	r24, 0x00	; 0
    3fcc:	69 f7       	brne	.-38     	; 0x3fa8 <main+0xab8>
    3fce:	14 c0       	rjmp	.+40     	; 0x3ff8 <main+0xb08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    3fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    3fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	9a a3       	std	Y+34, r25	; 0x22
    3fe2:	89 a3       	std	Y+33, r24	; 0x21
    3fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    3fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    3fe8:	9e 8f       	std	Y+30, r25	; 0x1e
    3fea:	8d 8f       	std	Y+29, r24	; 0x1d
    3fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	f1 f7       	brne	.-4      	; 0x3ff0 <main+0xb00>
    3ff4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ff6:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
							}
							Local_u8StepperIndicator=0;
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	ee 5b       	subi	r30, 0xBE	; 190
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	10 82       	st	Z, r1
    4000:	4a c1       	rjmp	.+660    	; 0x4296 <main+0xda6>

						}
						else if(Local_u8PressedKey==2)
    4002:	fe 01       	movw	r30, r28
    4004:	ea 5a       	subi	r30, 0xAA	; 170
    4006:	ff 4f       	sbci	r31, 0xFF	; 255
    4008:	80 81       	ld	r24, Z
    400a:	82 30       	cpi	r24, 0x02	; 2
    400c:	09 f0       	breq	.+2      	; 0x4010 <main+0xb20>
    400e:	36 c1       	rjmp	.+620    	; 0x427c <main+0xd8c>
						{
							CLCD_voidSendComd(1);
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_u8SendString("angle=");
    4016:	87 ee       	ldi	r24, 0xE7	; 231
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    401e:	31 c0       	rjmp	.+98     	; 0x4082 <main+0xb92>
							while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
							{
								Local_u8PressedKey=KPD_u8GetPressedKey();
    4020:	0e 94 8e 11 	call	0x231c	; 0x231c <KPD_u8GetPressedKey>
    4024:	fe 01       	movw	r30, r28
    4026:	ea 5a       	subi	r30, 0xAA	; 170
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 83       	st	Z, r24
								if(Local_u8PressedKey!=0xff&&Local_u8PressedKey!='e')
    402c:	fe 01       	movw	r30, r28
    402e:	ea 5a       	subi	r30, 0xAA	; 170
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	80 81       	ld	r24, Z
    4034:	8f 3f       	cpi	r24, 0xFF	; 255
    4036:	29 f1       	breq	.+74     	; 0x4082 <main+0xb92>
    4038:	fe 01       	movw	r30, r28
    403a:	ea 5a       	subi	r30, 0xAA	; 170
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	80 81       	ld	r24, Z
    4040:	85 36       	cpi	r24, 0x65	; 101
    4042:	f9 f0       	breq	.+62     	; 0x4082 <main+0xb92>
								{
								Local_Arr[Local_ArrCounter]=Local_u8PressedKey;
    4044:	8c ad       	ldd	r24, Y+60	; 0x3c
    4046:	28 2f       	mov	r18, r24
    4048:	33 27       	eor	r19, r19
    404a:	27 fd       	sbrc	r18, 7
    404c:	30 95       	com	r19
    404e:	ce 01       	movw	r24, r28
    4050:	89 58       	subi	r24, 0x89	; 137
    4052:	9f 4f       	sbci	r25, 0xFF	; 255
    4054:	dc 01       	movw	r26, r24
    4056:	a2 0f       	add	r26, r18
    4058:	b3 1f       	adc	r27, r19
    405a:	fe 01       	movw	r30, r28
    405c:	ea 5a       	subi	r30, 0xAA	; 170
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	80 81       	ld	r24, Z
    4062:	8c 93       	st	X, r24
								CLCD_voidSendNumber(Local_u8PressedKey);
    4064:	fe 01       	movw	r30, r28
    4066:	ea 5a       	subi	r30, 0xAA	; 170
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	80 81       	ld	r24, Z
    406c:	88 2f       	mov	r24, r24
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	a0 e0       	ldi	r26, 0x00	; 0
    4072:	b0 e0       	ldi	r27, 0x00	; 0
    4074:	bc 01       	movw	r22, r24
    4076:	cd 01       	movw	r24, r26
    4078:	0e 94 6f 07 	call	0xede	; 0xede <CLCD_voidSendNumber>
								Local_ArrCounter++;
    407c:	8c ad       	ldd	r24, Y+60	; 0x3c
    407e:	8f 5f       	subi	r24, 0xFF	; 255
    4080:	8c af       	std	Y+60, r24	; 0x3c
						}
						else if(Local_u8PressedKey==2)
						{
							CLCD_voidSendComd(1);
							CLCD_u8SendString("angle=");
							while(Local_u8PressedKey!='e'&&Local_u8EmergencyIndicator==0)
    4082:	fe 01       	movw	r30, r28
    4084:	ea 5a       	subi	r30, 0xAA	; 170
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	80 81       	ld	r24, Z
    408a:	85 36       	cpi	r24, 0x65	; 101
    408c:	21 f0       	breq	.+8      	; 0x4096 <main+0xba6>
    408e:	80 91 76 01 	lds	r24, 0x0176
    4092:	88 23       	and	r24, r24
    4094:	29 f2       	breq	.-118    	; 0x4020 <main+0xb30>
								Local_Arr[Local_ArrCounter]=Local_u8PressedKey;
								CLCD_voidSendNumber(Local_u8PressedKey);
								Local_ArrCounter++;
								}
							}
							Local_u8Stepperangle=Local_Arr[0];
    4096:	fe 01       	movw	r30, r28
    4098:	e9 58       	subi	r30, 0x89	; 137
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	80 81       	ld	r24, Z
    409e:	88 2f       	mov	r24, r24
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	a0 e0       	ldi	r26, 0x00	; 0
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	fe 01       	movw	r30, r28
    40a8:	fd 96       	adiw	r30, 0x3d	; 61
    40aa:	80 83       	st	Z, r24
    40ac:	91 83       	std	Z+1, r25	; 0x01
    40ae:	a2 83       	std	Z+2, r26	; 0x02
    40b0:	b3 83       	std	Z+3, r27	; 0x03
							for(sint8 LoopCounter=1;(LoopCounter<Local_ArrCounter&&Local_u8EmergencyIndicator==0);LoopCounter++)
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	89 af       	std	Y+57, r24	; 0x39
    40b6:	2d c0       	rjmp	.+90     	; 0x4112 <main+0xc22>
							{
								Local_u8Stepperangle=Local_u8Stepperangle*10+Local_Arr[LoopCounter];
    40b8:	fe 01       	movw	r30, r28
    40ba:	fd 96       	adiw	r30, 0x3d	; 61
    40bc:	80 81       	ld	r24, Z
    40be:	91 81       	ldd	r25, Z+1	; 0x01
    40c0:	a2 81       	ldd	r26, Z+2	; 0x02
    40c2:	b3 81       	ldd	r27, Z+3	; 0x03
    40c4:	2a e0       	ldi	r18, 0x0A	; 10
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	50 e0       	ldi	r21, 0x00	; 0
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	0e 94 09 22 	call	0x4412	; 0x4412 <__mulsi3>
    40d4:	ab 01       	movw	r20, r22
    40d6:	bc 01       	movw	r22, r24
    40d8:	89 ad       	ldd	r24, Y+57	; 0x39
    40da:	28 2f       	mov	r18, r24
    40dc:	33 27       	eor	r19, r19
    40de:	27 fd       	sbrc	r18, 7
    40e0:	30 95       	com	r19
    40e2:	ce 01       	movw	r24, r28
    40e4:	89 58       	subi	r24, 0x89	; 137
    40e6:	9f 4f       	sbci	r25, 0xFF	; 255
    40e8:	fc 01       	movw	r30, r24
    40ea:	e2 0f       	add	r30, r18
    40ec:	f3 1f       	adc	r31, r19
    40ee:	80 81       	ld	r24, Z
    40f0:	88 2f       	mov	r24, r24
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	a0 e0       	ldi	r26, 0x00	; 0
    40f6:	b0 e0       	ldi	r27, 0x00	; 0
    40f8:	84 0f       	add	r24, r20
    40fa:	95 1f       	adc	r25, r21
    40fc:	a6 1f       	adc	r26, r22
    40fe:	b7 1f       	adc	r27, r23
    4100:	fe 01       	movw	r30, r28
    4102:	fd 96       	adiw	r30, 0x3d	; 61
    4104:	80 83       	st	Z, r24
    4106:	91 83       	std	Z+1, r25	; 0x01
    4108:	a2 83       	std	Z+2, r26	; 0x02
    410a:	b3 83       	std	Z+3, r27	; 0x03
								CLCD_voidSendNumber(Local_u8PressedKey);
								Local_ArrCounter++;
								}
							}
							Local_u8Stepperangle=Local_Arr[0];
							for(sint8 LoopCounter=1;(LoopCounter<Local_ArrCounter&&Local_u8EmergencyIndicator==0);LoopCounter++)
    410c:	89 ad       	ldd	r24, Y+57	; 0x39
    410e:	8f 5f       	subi	r24, 0xFF	; 255
    4110:	89 af       	std	Y+57, r24	; 0x39
    4112:	99 ad       	ldd	r25, Y+57	; 0x39
    4114:	8c ad       	ldd	r24, Y+60	; 0x3c
    4116:	98 17       	cp	r25, r24
    4118:	24 f4       	brge	.+8      	; 0x4122 <main+0xc32>
    411a:	80 91 76 01 	lds	r24, 0x0176
    411e:	88 23       	and	r24, r24
    4120:	59 f2       	breq	.-106    	; 0x40b8 <main+0xbc8>
							{
								Local_u8Stepperangle=Local_u8Stepperangle*10+Local_Arr[LoopCounter];
							}
							if(Local_u8EmergencyIndicator==0)
    4122:	80 91 76 01 	lds	r24, 0x0176
    4126:	88 23       	and	r24, r24
    4128:	09 f0       	breq	.+2      	; 0x412c <main+0xc3c>
    412a:	a3 c0       	rjmp	.+326    	; 0x4272 <main+0xd82>
							{
							CLCD_voidSendComd(1);
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_voidGoToXY(0,0);
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	60 e0       	ldi	r22, 0x00	; 0
    4136:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("Step MOTOR CCW!");
    413a:	87 e0       	ldi	r24, 0x07	; 7
    413c:	91 e0       	ldi	r25, 0x01	; 1
    413e:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
							CLCD_voidGoToXY(0,1);
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	61 e0       	ldi	r22, 0x01	; 1
    4146:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("angle=");
    414a:	87 ee       	ldi	r24, 0xE7	; 231
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
							CLCD_voidSendNumber(Local_u8Stepperangle);
    4152:	fe 01       	movw	r30, r28
    4154:	fd 96       	adiw	r30, 0x3d	; 61
    4156:	80 81       	ld	r24, Z
    4158:	91 81       	ldd	r25, Z+1	; 0x01
    415a:	a2 81       	ldd	r26, Z+2	; 0x02
    415c:	b3 81       	ldd	r27, Z+3	; 0x03
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 6f 07 	call	0xede	; 0xede <CLCD_voidSendNumber>
							STEPPER_u8Rotate(&Object2,Local_u8Stepperangle,CCW);
    4166:	2d ad       	ldd	r18, Y+61	; 0x3d
    4168:	3e ad       	ldd	r19, Y+62	; 0x3e
    416a:	ce 01       	movw	r24, r28
    416c:	8f 57       	subi	r24, 0x7F	; 127
    416e:	9f 4f       	sbci	r25, 0xFF	; 255
    4170:	b9 01       	movw	r22, r18
    4172:	40 e0       	ldi	r20, 0x00	; 0
    4174:	0e 94 89 12 	call	0x2512	; 0x2512 <STEPPER_u8Rotate>
							CLCD_voidSendComd(1);
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
							CLCD_voidGoToXY(0,0);
    417e:	80 e0       	ldi	r24, 0x00	; 0
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
							CLCD_u8SendString("FINISHED!");
    4186:	8d ef       	ldi	r24, 0xFD	; 253
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	aa e7       	ldi	r26, 0x7A	; 122
    4194:	b4 e4       	ldi	r27, 0x44	; 68
    4196:	89 8f       	std	Y+25, r24	; 0x19
    4198:	9a 8f       	std	Y+26, r25	; 0x1a
    419a:	ab 8f       	std	Y+27, r26	; 0x1b
    419c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419e:	69 8d       	ldd	r22, Y+25	; 0x19
    41a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	4a e7       	ldi	r20, 0x7A	; 122
    41ac:	55 e4       	ldi	r21, 0x45	; 69
    41ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	8d 8b       	std	Y+21, r24	; 0x15
    41b8:	9e 8b       	std	Y+22, r25	; 0x16
    41ba:	af 8b       	std	Y+23, r26	; 0x17
    41bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41be:	6d 89       	ldd	r22, Y+21	; 0x15
    41c0:	7e 89       	ldd	r23, Y+22	; 0x16
    41c2:	8f 89       	ldd	r24, Y+23	; 0x17
    41c4:	98 8d       	ldd	r25, Y+24	; 0x18
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e8       	ldi	r20, 0x80	; 128
    41cc:	5f e3       	ldi	r21, 0x3F	; 63
    41ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41d2:	88 23       	and	r24, r24
    41d4:	2c f4       	brge	.+10     	; 0x41e0 <main+0xcf0>
		__ticks = 1;
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	9c 8b       	std	Y+20, r25	; 0x14
    41dc:	8b 8b       	std	Y+19, r24	; 0x13
    41de:	3f c0       	rjmp	.+126    	; 0x425e <main+0xd6e>
	else if (__tmp > 65535)
    41e0:	6d 89       	ldd	r22, Y+21	; 0x15
    41e2:	7e 89       	ldd	r23, Y+22	; 0x16
    41e4:	8f 89       	ldd	r24, Y+23	; 0x17
    41e6:	98 8d       	ldd	r25, Y+24	; 0x18
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	4c f5       	brge	.+82     	; 0x424a <main+0xd5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	69 8d       	ldd	r22, Y+25	; 0x19
    41fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e2       	ldi	r20, 0x20	; 32
    4206:	51 e4       	ldi	r21, 0x41	; 65
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	9c 8b       	std	Y+20, r25	; 0x14
    421e:	8b 8b       	std	Y+19, r24	; 0x13
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <main+0xd50>
    4222:	80 e9       	ldi	r24, 0x90	; 144
    4224:	91 e0       	ldi	r25, 0x01	; 1
    4226:	9a 8b       	std	Y+18, r25	; 0x12
    4228:	89 8b       	std	Y+17, r24	; 0x11
    422a:	89 89       	ldd	r24, Y+17	; 0x11
    422c:	9a 89       	ldd	r25, Y+18	; 0x12
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <main+0xd3e>
    4232:	9a 8b       	std	Y+18, r25	; 0x12
    4234:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4236:	8b 89       	ldd	r24, Y+19	; 0x13
    4238:	9c 89       	ldd	r25, Y+20	; 0x14
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	9c 8b       	std	Y+20, r25	; 0x14
    423e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4240:	8b 89       	ldd	r24, Y+19	; 0x13
    4242:	9c 89       	ldd	r25, Y+20	; 0x14
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	69 f7       	brne	.-38     	; 0x4222 <main+0xd32>
    4248:	14 c0       	rjmp	.+40     	; 0x4272 <main+0xd82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	6d 89       	ldd	r22, Y+21	; 0x15
    424c:	7e 89       	ldd	r23, Y+22	; 0x16
    424e:	8f 89       	ldd	r24, Y+23	; 0x17
    4250:	98 8d       	ldd	r25, Y+24	; 0x18
    4252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	9c 8b       	std	Y+20, r25	; 0x14
    425c:	8b 8b       	std	Y+19, r24	; 0x13
    425e:	8b 89       	ldd	r24, Y+19	; 0x13
    4260:	9c 89       	ldd	r25, Y+20	; 0x14
    4262:	98 8b       	std	Y+16, r25	; 0x10
    4264:	8f 87       	std	Y+15, r24	; 0x0f
    4266:	8f 85       	ldd	r24, Y+15	; 0x0f
    4268:	98 89       	ldd	r25, Y+16	; 0x10
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <main+0xd7a>
    426e:	98 8b       	std	Y+16, r25	; 0x10
    4270:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(1000);
							}
						Local_u8StepperIndicator=0;
    4272:	fe 01       	movw	r30, r28
    4274:	ee 5b       	subi	r30, 0xBE	; 190
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	10 82       	st	Z, r1
    427a:	0d c0       	rjmp	.+26     	; 0x4296 <main+0xda6>
						}
						else if(Local_u8PressedKey==3)
    427c:	fe 01       	movw	r30, r28
    427e:	ea 5a       	subi	r30, 0xAA	; 170
    4280:	ff 4f       	sbci	r31, 0xFF	; 255
    4282:	80 81       	ld	r24, Z
    4284:	83 30       	cpi	r24, 0x03	; 3
    4286:	39 f4       	brne	.+14     	; 0x4296 <main+0xda6>
						{
							Local_u8StepperIndicator=0;
    4288:	fe 01       	movw	r30, r28
    428a:	ee 5b       	subi	r30, 0xBE	; 190
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	10 82       	st	Z, r1
							CLCD_voidSendComd(1);
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>


					}

				}
				while(Local_u8StepperIndicator==1&&Local_u8EmergencyIndicator==0)
    4296:	fe 01       	movw	r30, r28
    4298:	ee 5b       	subi	r30, 0xBE	; 190
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	80 81       	ld	r24, Z
    429e:	81 30       	cpi	r24, 0x01	; 1
    42a0:	29 f4       	brne	.+10     	; 0x42ac <main+0xdbc>
    42a2:	80 91 76 01 	lds	r24, 0x0176
    42a6:	88 23       	and	r24, r24
    42a8:	09 f4       	brne	.+2      	; 0x42ac <main+0xdbc>
    42aa:	3e cd       	rjmp	.-1412   	; 0x3d28 <main+0x838>
		}
		CLCD_voidSendComd(1);
		if(Local_u8EnteredPass==Local_u32RealPass&&Local_u8EnteredID==Local_u32RealID)
		{
			 Local_u8PassTrials=TRIALS;
			while(Local_u8EmergencyIndicator==0)
    42ac:	80 91 76 01 	lds	r24, 0x0176
    42b0:	88 23       	and	r24, r24
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <main+0xdc6>
    42b4:	50 cc       	rjmp	.-1888   	; 0x3b56 <main+0x666>
					}

				}
				}
		}
			CLCD_voidSendComd(1);
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
    42bc:	81 c0       	rjmp	.+258    	; 0x43c0 <main+0xed0>
		}

		else if(Local_u8EmergencyIndicator==0)
    42be:	80 91 76 01 	lds	r24, 0x0176
    42c2:	88 23       	and	r24, r24
    42c4:	09 f0       	breq	.+2      	; 0x42c8 <main+0xdd8>
    42c6:	7c c0       	rjmp	.+248    	; 0x43c0 <main+0xed0>
		{
			CLCD_u8SendString("Wrong ID or Pass");
    42c8:	87 e1       	ldi	r24, 0x17	; 23
    42ca:	91 e0       	ldi	r25, 0x01	; 1
    42cc:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	aa e7       	ldi	r26, 0x7A	; 122
    42d6:	b4 e4       	ldi	r27, 0x44	; 68
    42d8:	8b 87       	std	Y+11, r24	; 0x0b
    42da:	9c 87       	std	Y+12, r25	; 0x0c
    42dc:	ad 87       	std	Y+13, r26	; 0x0d
    42de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	4a e7       	ldi	r20, 0x7A	; 122
    42ee:	55 e4       	ldi	r21, 0x45	; 69
    42f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	8f 83       	std	Y+7, r24	; 0x07
    42fa:	98 87       	std	Y+8, r25	; 0x08
    42fc:	a9 87       	std	Y+9, r26	; 0x09
    42fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4300:	6f 81       	ldd	r22, Y+7	; 0x07
    4302:	78 85       	ldd	r23, Y+8	; 0x08
    4304:	89 85       	ldd	r24, Y+9	; 0x09
    4306:	9a 85       	ldd	r25, Y+10	; 0x0a
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	40 e8       	ldi	r20, 0x80	; 128
    430e:	5f e3       	ldi	r21, 0x3F	; 63
    4310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4314:	88 23       	and	r24, r24
    4316:	2c f4       	brge	.+10     	; 0x4322 <main+0xe32>
		__ticks = 1;
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	9e 83       	std	Y+6, r25	; 0x06
    431e:	8d 83       	std	Y+5, r24	; 0x05
    4320:	3f c0       	rjmp	.+126    	; 0x43a0 <main+0xeb0>
	else if (__tmp > 65535)
    4322:	6f 81       	ldd	r22, Y+7	; 0x07
    4324:	78 85       	ldd	r23, Y+8	; 0x08
    4326:	89 85       	ldd	r24, Y+9	; 0x09
    4328:	9a 85       	ldd	r25, Y+10	; 0x0a
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	3f ef       	ldi	r19, 0xFF	; 255
    432e:	4f e7       	ldi	r20, 0x7F	; 127
    4330:	57 e4       	ldi	r21, 0x47	; 71
    4332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4336:	18 16       	cp	r1, r24
    4338:	4c f5       	brge	.+82     	; 0x438c <main+0xe9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433a:	6b 85       	ldd	r22, Y+11	; 0x0b
    433c:	7c 85       	ldd	r23, Y+12	; 0x0c
    433e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4340:	9e 85       	ldd	r25, Y+14	; 0x0e
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e2       	ldi	r20, 0x20	; 32
    4348:	51 e4       	ldi	r21, 0x41	; 65
    434a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	bc 01       	movw	r22, r24
    4354:	cd 01       	movw	r24, r26
    4356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	9e 83       	std	Y+6, r25	; 0x06
    4360:	8d 83       	std	Y+5, r24	; 0x05
    4362:	0f c0       	rjmp	.+30     	; 0x4382 <main+0xe92>
    4364:	80 e9       	ldi	r24, 0x90	; 144
    4366:	91 e0       	ldi	r25, 0x01	; 1
    4368:	9c 83       	std	Y+4, r25	; 0x04
    436a:	8b 83       	std	Y+3, r24	; 0x03
    436c:	8b 81       	ldd	r24, Y+3	; 0x03
    436e:	9c 81       	ldd	r25, Y+4	; 0x04
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	f1 f7       	brne	.-4      	; 0x4370 <main+0xe80>
    4374:	9c 83       	std	Y+4, r25	; 0x04
    4376:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4378:	8d 81       	ldd	r24, Y+5	; 0x05
    437a:	9e 81       	ldd	r25, Y+6	; 0x06
    437c:	01 97       	sbiw	r24, 0x01	; 1
    437e:	9e 83       	std	Y+6, r25	; 0x06
    4380:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4382:	8d 81       	ldd	r24, Y+5	; 0x05
    4384:	9e 81       	ldd	r25, Y+6	; 0x06
    4386:	00 97       	sbiw	r24, 0x00	; 0
    4388:	69 f7       	brne	.-38     	; 0x4364 <main+0xe74>
    438a:	14 c0       	rjmp	.+40     	; 0x43b4 <main+0xec4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438c:	6f 81       	ldd	r22, Y+7	; 0x07
    438e:	78 85       	ldd	r23, Y+8	; 0x08
    4390:	89 85       	ldd	r24, Y+9	; 0x09
    4392:	9a 85       	ldd	r25, Y+10	; 0x0a
    4394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	9e 83       	std	Y+6, r25	; 0x06
    439e:	8d 83       	std	Y+5, r24	; 0x05
    43a0:	8d 81       	ldd	r24, Y+5	; 0x05
    43a2:	9e 81       	ldd	r25, Y+6	; 0x06
    43a4:	9a 83       	std	Y+2, r25	; 0x02
    43a6:	89 83       	std	Y+1, r24	; 0x01
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	9a 81       	ldd	r25, Y+2	; 0x02
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <main+0xebc>
    43b0:	9a 83       	std	Y+2, r25	; 0x02
    43b2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Local_u8PassTrials--;
    43b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    43b6:	81 50       	subi	r24, 0x01	; 1
    43b8:	8b af       	std	Y+59, r24	; 0x3b
			CLCD_voidSendComd(1);
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
		}
		CLCD_voidSendComd(1);
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
    43c6:	11 c0       	rjmp	.+34     	; 0x43ea <main+0xefa>
			}
			else if(Local_u8PassTrials==0)
    43c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    43ca:	88 23       	and	r24, r24
    43cc:	71 f4       	brne	.+28     	; 0x43ea <main+0xefa>
			{
				SSD_u8SetNumber(&Object3,Local_u8PassTrials);
    43ce:	2b ad       	ldd	r18, Y+59	; 0x3b
    43d0:	ce 01       	movw	r24, r28
    43d2:	8a 57       	subi	r24, 0x7A	; 122
    43d4:	9f 4f       	sbci	r25, 0xFF	; 255
    43d6:	62 2f       	mov	r22, r18
    43d8:	0e 94 2b 12 	call	0x2456	; 0x2456 <SSD_u8SetNumber>
				CLCD_u8SendString("System Blocked!");
    43dc:	88 e2       	ldi	r24, 0x28	; 40
    43de:	91 e0       	ldi	r25, 0x01	; 1
    43e0:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
				Local_u8PassTrials--;
    43e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    43e6:	81 50       	subi	r24, 0x01	; 1
    43e8:	8b af       	std	Y+59, r24	; 0x3b
		Local_u8EmergencyIndicator=0;
		Local_u8EnteredID=0;
		Local_u8EnteredPass=0;
		Local_u8Counter1=0;
		Local_u8Counter2=0;
		while(Local_u8EmergencyIndicator==0)
    43ea:	80 91 76 01 	lds	r24, 0x0176
    43ee:	88 23       	and	r24, r24
    43f0:	09 f4       	brne	.+2      	; 0x43f4 <main+0xf04>
    43f2:	0f ca       	rjmp	.-3042   	; 0x3812 <main+0x322>
    43f4:	f5 c9       	rjmp	.-3094   	; 0x37e0 <main+0x2f0>

000043f6 <EmergencyStop>:
			}
	}
	}
}
void EmergencyStop(void)
{
    43f6:	df 93       	push	r29
    43f8:	cf 93       	push	r28
    43fa:	cd b7       	in	r28, 0x3d	; 61
    43fc:	de b7       	in	r29, 0x3e	; 62
	Local_u8EmergencyIndicator=1;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	80 93 76 01 	sts	0x0176, r24
	DCM_u8Stop(&Object1);
    4404:	82 e6       	ldi	r24, 0x62	; 98
    4406:	91 e0       	ldi	r25, 0x01	; 1
    4408:	0e 94 31 0a 	call	0x1462	; 0x1462 <DCM_u8Stop>
}
    440c:	cf 91       	pop	r28
    440e:	df 91       	pop	r29
    4410:	08 95       	ret

00004412 <__mulsi3>:
    4412:	62 9f       	mul	r22, r18
    4414:	d0 01       	movw	r26, r0
    4416:	73 9f       	mul	r23, r19
    4418:	f0 01       	movw	r30, r0
    441a:	82 9f       	mul	r24, r18
    441c:	e0 0d       	add	r30, r0
    441e:	f1 1d       	adc	r31, r1
    4420:	64 9f       	mul	r22, r20
    4422:	e0 0d       	add	r30, r0
    4424:	f1 1d       	adc	r31, r1
    4426:	92 9f       	mul	r25, r18
    4428:	f0 0d       	add	r31, r0
    442a:	83 9f       	mul	r24, r19
    442c:	f0 0d       	add	r31, r0
    442e:	74 9f       	mul	r23, r20
    4430:	f0 0d       	add	r31, r0
    4432:	65 9f       	mul	r22, r21
    4434:	f0 0d       	add	r31, r0
    4436:	99 27       	eor	r25, r25
    4438:	72 9f       	mul	r23, r18
    443a:	b0 0d       	add	r27, r0
    443c:	e1 1d       	adc	r30, r1
    443e:	f9 1f       	adc	r31, r25
    4440:	63 9f       	mul	r22, r19
    4442:	b0 0d       	add	r27, r0
    4444:	e1 1d       	adc	r30, r1
    4446:	f9 1f       	adc	r31, r25
    4448:	bd 01       	movw	r22, r26
    444a:	cf 01       	movw	r24, r30
    444c:	11 24       	eor	r1, r1
    444e:	08 95       	ret

00004450 <__udivmodsi4>:
    4450:	a1 e2       	ldi	r26, 0x21	; 33
    4452:	1a 2e       	mov	r1, r26
    4454:	aa 1b       	sub	r26, r26
    4456:	bb 1b       	sub	r27, r27
    4458:	fd 01       	movw	r30, r26
    445a:	0d c0       	rjmp	.+26     	; 0x4476 <__udivmodsi4_ep>

0000445c <__udivmodsi4_loop>:
    445c:	aa 1f       	adc	r26, r26
    445e:	bb 1f       	adc	r27, r27
    4460:	ee 1f       	adc	r30, r30
    4462:	ff 1f       	adc	r31, r31
    4464:	a2 17       	cp	r26, r18
    4466:	b3 07       	cpc	r27, r19
    4468:	e4 07       	cpc	r30, r20
    446a:	f5 07       	cpc	r31, r21
    446c:	20 f0       	brcs	.+8      	; 0x4476 <__udivmodsi4_ep>
    446e:	a2 1b       	sub	r26, r18
    4470:	b3 0b       	sbc	r27, r19
    4472:	e4 0b       	sbc	r30, r20
    4474:	f5 0b       	sbc	r31, r21

00004476 <__udivmodsi4_ep>:
    4476:	66 1f       	adc	r22, r22
    4478:	77 1f       	adc	r23, r23
    447a:	88 1f       	adc	r24, r24
    447c:	99 1f       	adc	r25, r25
    447e:	1a 94       	dec	r1
    4480:	69 f7       	brne	.-38     	; 0x445c <__udivmodsi4_loop>
    4482:	60 95       	com	r22
    4484:	70 95       	com	r23
    4486:	80 95       	com	r24
    4488:	90 95       	com	r25
    448a:	9b 01       	movw	r18, r22
    448c:	ac 01       	movw	r20, r24
    448e:	bd 01       	movw	r22, r26
    4490:	cf 01       	movw	r24, r30
    4492:	08 95       	ret

00004494 <__divmodsi4>:
    4494:	97 fb       	bst	r25, 7
    4496:	09 2e       	mov	r0, r25
    4498:	05 26       	eor	r0, r21
    449a:	0e d0       	rcall	.+28     	; 0x44b8 <__divmodsi4_neg1>
    449c:	57 fd       	sbrc	r21, 7
    449e:	04 d0       	rcall	.+8      	; 0x44a8 <__divmodsi4_neg2>
    44a0:	d7 df       	rcall	.-82     	; 0x4450 <__udivmodsi4>
    44a2:	0a d0       	rcall	.+20     	; 0x44b8 <__divmodsi4_neg1>
    44a4:	00 1c       	adc	r0, r0
    44a6:	38 f4       	brcc	.+14     	; 0x44b6 <__divmodsi4_exit>

000044a8 <__divmodsi4_neg2>:
    44a8:	50 95       	com	r21
    44aa:	40 95       	com	r20
    44ac:	30 95       	com	r19
    44ae:	21 95       	neg	r18
    44b0:	3f 4f       	sbci	r19, 0xFF	; 255
    44b2:	4f 4f       	sbci	r20, 0xFF	; 255
    44b4:	5f 4f       	sbci	r21, 0xFF	; 255

000044b6 <__divmodsi4_exit>:
    44b6:	08 95       	ret

000044b8 <__divmodsi4_neg1>:
    44b8:	f6 f7       	brtc	.-4      	; 0x44b6 <__divmodsi4_exit>
    44ba:	90 95       	com	r25
    44bc:	80 95       	com	r24
    44be:	70 95       	com	r23
    44c0:	61 95       	neg	r22
    44c2:	7f 4f       	sbci	r23, 0xFF	; 255
    44c4:	8f 4f       	sbci	r24, 0xFF	; 255
    44c6:	9f 4f       	sbci	r25, 0xFF	; 255
    44c8:	08 95       	ret

000044ca <__prologue_saves__>:
    44ca:	2f 92       	push	r2
    44cc:	3f 92       	push	r3
    44ce:	4f 92       	push	r4
    44d0:	5f 92       	push	r5
    44d2:	6f 92       	push	r6
    44d4:	7f 92       	push	r7
    44d6:	8f 92       	push	r8
    44d8:	9f 92       	push	r9
    44da:	af 92       	push	r10
    44dc:	bf 92       	push	r11
    44de:	cf 92       	push	r12
    44e0:	df 92       	push	r13
    44e2:	ef 92       	push	r14
    44e4:	ff 92       	push	r15
    44e6:	0f 93       	push	r16
    44e8:	1f 93       	push	r17
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
    44f2:	ca 1b       	sub	r28, r26
    44f4:	db 0b       	sbc	r29, r27
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
    4500:	09 94       	ijmp

00004502 <__epilogue_restores__>:
    4502:	2a 88       	ldd	r2, Y+18	; 0x12
    4504:	39 88       	ldd	r3, Y+17	; 0x11
    4506:	48 88       	ldd	r4, Y+16	; 0x10
    4508:	5f 84       	ldd	r5, Y+15	; 0x0f
    450a:	6e 84       	ldd	r6, Y+14	; 0x0e
    450c:	7d 84       	ldd	r7, Y+13	; 0x0d
    450e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4510:	9b 84       	ldd	r9, Y+11	; 0x0b
    4512:	aa 84       	ldd	r10, Y+10	; 0x0a
    4514:	b9 84       	ldd	r11, Y+9	; 0x09
    4516:	c8 84       	ldd	r12, Y+8	; 0x08
    4518:	df 80       	ldd	r13, Y+7	; 0x07
    451a:	ee 80       	ldd	r14, Y+6	; 0x06
    451c:	fd 80       	ldd	r15, Y+5	; 0x05
    451e:	0c 81       	ldd	r16, Y+4	; 0x04
    4520:	1b 81       	ldd	r17, Y+3	; 0x03
    4522:	aa 81       	ldd	r26, Y+2	; 0x02
    4524:	b9 81       	ldd	r27, Y+1	; 0x01
    4526:	ce 0f       	add	r28, r30
    4528:	d1 1d       	adc	r29, r1
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	f8 94       	cli
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	cd bf       	out	0x3d, r28	; 61
    4534:	ed 01       	movw	r28, r26
    4536:	08 95       	ret

00004538 <_exit>:
    4538:	f8 94       	cli

0000453a <__stop_program>:
    453a:	ff cf       	rjmp	.-2      	; 0x453a <__stop_program>

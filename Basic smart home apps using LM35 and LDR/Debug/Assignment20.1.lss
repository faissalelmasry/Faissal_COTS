
Assignment20.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00003488  0000351c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000c2  008000c2  0000357e  2**0
                  ALLOC
  3 .stab         0000339c  00000000  00000000  00003580  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014fc  00000000  00000000  0000691c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008107  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b24d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c612  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__vector_1>
       8:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__vector_2>
       c:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 14 	call	0x2964	; 0x2964 <main>
      8a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e9       	ldi	r22, 0x95	; 149
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
#include "ADC_prv.h"
#include "ADC_cfg.h"
#include "ADC_interface.h"

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
#if ADC_VOLTAGE_REF==AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
#elif ADC_VOLTAGE_REF==AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
#else
#error Wrong ADC_VOLTAGE_REF configuration option
#endif

#if ADC_RESOLUTION==EIGHT_BITS
	SET_BIT(ADMUX,ADMUX_ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 62       	ori	r24, 0x20	; 32
     cce:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error Wrong ADC_RESOLUTION configuration option
#endif

	ADCSRA&=PRE_SCALAR_MASK;
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 7f       	andi	r24, 0xF8	; 248
     cdc:	8c 93       	st	X, r24
	ADCSRA|=PRE_SCALAR;
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	87 60       	ori	r24, 0x07	; 7
     cea:	8c 93       	st	X, r24

#if AUTO_TRIGGER==ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADATE);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	8c 93       	st	X, r24
#endif

#if ADC_INTERRUPT==ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#elif ADC_INTERRUPT==DISABLED
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	8c 93       	st	X, r24
#else
#error Wrong ADC_INTERRUPT configuration option
#endif

#if ADEN==ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
#else
#error Wrong ADEN configuration option
#endif

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u16StartConversionSynch>:

uint8 ADC_u16StartConversionSynch(uint8 Copy_u8Channel,uint16* Copy_pu16Result)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	uint8 Local_u8ErrorState=OK;
     d36:	1d 82       	std	Y+5, r1	; 0x05
	if(Copy_pu16Result!=NULL)
     d38:	8f 81       	ldd	r24, Y+7	; 0x07
     d3a:	98 85       	ldd	r25, Y+8	; 0x08
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	09 f4       	brne	.+2      	; 0xd42 <ADC_u16StartConversionSynch+0x26>
     d40:	5d c0       	rjmp	.+186    	; 0xdfc <ADC_u16StartConversionSynch+0xe0>
	{
	uint32 Local_u32TimeoutCounter=0u;
     d42:	19 82       	std	Y+1, r1	; 0x01
     d44:	1a 82       	std	Y+2, r1	; 0x02
     d46:	1b 82       	std	Y+3, r1	; 0x03
     d48:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX&=CHANNEL_MASK;
     d4a:	a7 e2       	ldi	r26, 0x27	; 39
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e2       	ldi	r30, 0x27	; 39
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 7e       	andi	r24, 0xE0	; 224
     d56:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
     d58:	a7 e2       	ldi	r26, 0x27	; 39
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e7 e2       	ldi	r30, 0x27	; 39
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	90 81       	ld	r25, Z
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	89 2b       	or	r24, r25
     d66:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     d68:	a6 e2       	ldi	r26, 0x26	; 38
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e6 e2       	ldi	r30, 0x26	; 38
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	8c 93       	st	X, r24
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <ADC_u16StartConversionSynch+0x72>
	while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32TimeoutCounter<ADC_TIMEOUT))
	{
		Local_u32TimeoutCounter++;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	ab 81       	ldd	r26, Y+3	; 0x03
     d7e:	bc 81       	ldd	r27, Y+4	; 0x04
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	a1 1d       	adc	r26, r1
     d84:	b1 1d       	adc	r27, r1
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	ab 83       	std	Y+3, r26	; 0x03
     d8c:	bc 83       	std	Y+4, r27	; 0x04
	{
	uint32 Local_u32TimeoutCounter=0u;
	ADMUX&=CHANNEL_MASK;
	ADMUX|=Copy_u8Channel;
	SET_BIT(ADCSRA,ADCSRA_ADSC);
	while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32TimeoutCounter<ADC_TIMEOUT))
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 95       	swap	r24
     d96:	8f 70       	andi	r24, 0x0F	; 15
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	61 f4       	brne	.+24     	; 0xdbc <ADC_u16StartConversionSynch+0xa0>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	ab 81       	ldd	r26, Y+3	; 0x03
     daa:	bc 81       	ldd	r27, Y+4	; 0x04
     dac:	80 35       	cpi	r24, 0x50	; 80
     dae:	23 ec       	ldi	r18, 0xC3	; 195
     db0:	92 07       	cpc	r25, r18
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	a2 07       	cpc	r26, r18
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	b2 07       	cpc	r27, r18
     dba:	f0 f2       	brcs	.-68     	; 0xd78 <ADC_u16StartConversionSynch+0x5c>
	{
		Local_u32TimeoutCounter++;
	}
	if(Local_u32TimeoutCounter>=ADC_TIMEOUT)Local_u8ErrorState=TIMEOUT_ERR;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	ab 81       	ldd	r26, Y+3	; 0x03
     dc2:	bc 81       	ldd	r27, Y+4	; 0x04
     dc4:	80 35       	cpi	r24, 0x50	; 80
     dc6:	23 ec       	ldi	r18, 0xC3	; 195
     dc8:	92 07       	cpc	r25, r18
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	a2 07       	cpc	r26, r18
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	b2 07       	cpc	r27, r18
     dd2:	18 f0       	brcs	.+6      	; 0xdda <ADC_u16StartConversionSynch+0xbe>
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	8d 83       	std	Y+5, r24	; 0x05
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <ADC_u16StartConversionSynch+0xe4>
	else
	{
		SET_BIT(ADCSRA,ADCSRA_ADIF);
     dda:	a6 e2       	ldi	r26, 0x26	; 38
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e6 e2       	ldi	r30, 0x26	; 38
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 61       	ori	r24, 0x10	; 16
     de6:	8c 93       	st	X, r24
	#if ADC_RESOLUTION==EIGHT_BITS
		*Copy_pu16Result= ADCH;
     de8:	e5 e2       	ldi	r30, 0x25	; 37
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	ef 81       	ldd	r30, Y+7	; 0x07
     df4:	f8 85       	ldd	r31, Y+8	; 0x08
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <ADC_u16StartConversionSynch+0xe4>
	#else
	#error Wrong ADC_RESOLUTION configuration option
	#endif
	}
	}
	else Local_u8ErrorState=NULL_PTR_ERR;
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e02:	28 96       	adiw	r28, 0x08	; 8
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <ADC_s32Mapping>:
sint32 ADC_s32Mapping(Mapping_t* Object )
{
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <ADC_s32Mapping+0xe>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_s32Mapping+0x10>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <ADC_s32Mapping+0x12>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	9e 83       	std	Y+6, r25	; 0x06
     e2c:	8d 83       	std	Y+5, r24	; 0x05
	sint32 Local_s32OutputValue=((((Object->MaxInput)-(Object->InputValue))*(Object->MaxOutput))/(Object->MaxInput));
     e2e:	ed 81       	ldd	r30, Y+5	; 0x05
     e30:	fe 81       	ldd	r31, Y+6	; 0x06
     e32:	24 81       	ldd	r18, Z+4	; 0x04
     e34:	35 81       	ldd	r19, Z+5	; 0x05
     e36:	46 81       	ldd	r20, Z+6	; 0x06
     e38:	57 81       	ldd	r21, Z+7	; 0x07
     e3a:	ed 81       	ldd	r30, Y+5	; 0x05
     e3c:	fe 81       	ldd	r31, Y+6	; 0x06
     e3e:	80 89       	ldd	r24, Z+16	; 0x10
     e40:	91 89       	ldd	r25, Z+17	; 0x11
     e42:	a2 89       	ldd	r26, Z+18	; 0x12
     e44:	b3 89       	ldd	r27, Z+19	; 0x13
     e46:	79 01       	movw	r14, r18
     e48:	8a 01       	movw	r16, r20
     e4a:	e8 1a       	sub	r14, r24
     e4c:	f9 0a       	sbc	r15, r25
     e4e:	0a 0b       	sbc	r16, r26
     e50:	1b 0b       	sbc	r17, r27
     e52:	d8 01       	movw	r26, r16
     e54:	c7 01       	movw	r24, r14
     e56:	ed 81       	ldd	r30, Y+5	; 0x05
     e58:	fe 81       	ldd	r31, Y+6	; 0x06
     e5a:	24 85       	ldd	r18, Z+12	; 0x0c
     e5c:	35 85       	ldd	r19, Z+13	; 0x0d
     e5e:	46 85       	ldd	r20, Z+14	; 0x0e
     e60:	57 85       	ldd	r21, Z+15	; 0x0f
     e62:	bc 01       	movw	r22, r24
     e64:	cd 01       	movw	r24, r26
     e66:	0e 94 af 19 	call	0x335e	; 0x335e <__mulsi3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	ed 81       	ldd	r30, Y+5	; 0x05
     e70:	fe 81       	ldd	r31, Y+6	; 0x06
     e72:	24 81       	ldd	r18, Z+4	; 0x04
     e74:	35 81       	ldd	r19, Z+5	; 0x05
     e76:	46 81       	ldd	r20, Z+6	; 0x06
     e78:	57 81       	ldd	r21, Z+7	; 0x07
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 ce 19 	call	0x339c	; 0x339c <__divmodsi4>
     e82:	da 01       	movw	r26, r20
     e84:	c9 01       	movw	r24, r18
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	ab 83       	std	Y+3, r26	; 0x03
     e8c:	bc 83       	std	Y+4, r27	; 0x04
	return Local_s32OutputValue;
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	ab 81       	ldd	r26, Y+3	; 0x03
     e94:	bc 81       	ldd	r27, Y+4	; 0x04
}
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	26 96       	adiw	r28, 0x06	; 6
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	08 95       	ret

00000eb4 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

static void voidSendEnablePulse(void)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	2e 97       	sbiw	r28, 0x0e	; 14
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a0 e0       	ldi	r26, 0x00	; 0
     ed8:	b0 e4       	ldi	r27, 0x40	; 64
     eda:	8b 87       	std	Y+11, r24	; 0x0b
     edc:	9c 87       	std	Y+12, r25	; 0x0c
     ede:	ad 87       	std	Y+13, r26	; 0x0d
     ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a e7       	ldi	r20, 0x7A	; 122
     ef0:	55 e4       	ldi	r21, 0x45	; 69
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8f 83       	std	Y+7, r24	; 0x07
     efc:	98 87       	std	Y+8, r25	; 0x08
     efe:	a9 87       	std	Y+9, r26	; 0x09
     f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <voidSendEnablePulse+0x70>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f40:	8d 85       	ldd	r24, Y+13	; 0x0d
     f42:	9e 85       	ldd	r25, Y+14	; 0x0e
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <voidSendEnablePulse+0xd0>
     f66:	80 e9       	ldi	r24, 0x90	; 144
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <voidSendEnablePulse+0xbe>
     f76:	9c 83       	std	Y+4, r25	; 0x04
     f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <voidSendEnablePulse+0xb2>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <voidSendEnablePulse+0xfa>
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
}
     fc0:	2e 96       	adiw	r28, 0x0e	; 14
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	98 2f       	mov	r25, r24
     fe2:	91 70       	andi	r25, 0x01	; 1
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	64 e0       	ldi	r22, 0x04	; 4
     fe8:	49 2f       	mov	r20, r25
     fea:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	86 95       	lsr	r24
     ff2:	98 2f       	mov	r25, r24
     ff4:	91 70       	andi	r25, 0x01	; 1
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	65 e0       	ldi	r22, 0x05	; 5
     ffa:	49 2f       	mov	r20, r25
     ffc:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	98 2f       	mov	r25, r24
    1008:	91 70       	andi	r25, 0x01	; 1
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	66 e0       	ldi	r22, 0x06	; 6
    100e:	49 2f       	mov	r20, r25
    1010:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	86 95       	lsr	r24
    1018:	86 95       	lsr	r24
    101a:	86 95       	lsr	r24
    101c:	98 2f       	mov	r25, r24
    101e:	91 70       	andi	r25, 0x01	; 1
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	67 e0       	ldi	r22, 0x07	; 7
    1024:	49 2f       	mov	r20, r25
    1026:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <CLCD_voidSendComd>:

void CLCD_voidSendComd(uint8 Copy_Cmd)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
    #if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
	/*set command at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_Cmd);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Cmd>>4);
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	82 95       	swap	r24
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    105c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Cmd);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1066:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <voidSendEnablePulse>
	#endif
}
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_Data)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
	#if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
	/*set data at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_Data);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Data>>4);
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	82 95       	swap	r24
    1096:	8f 70       	andi	r24, 0x0F	; 15
    1098:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    109c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Data);
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    10a6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <voidSendEnablePulse>
	#endif

}
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <CLCD_voidInit>:

void CLCD_voidInit(void) /*from datasheet*/
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	2e 97       	sbiw	r28, 0x0e	; 14
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 e2       	ldi	r26, 0x20	; 32
    10cc:	b2 e4       	ldi	r27, 0x42	; 66
    10ce:	8b 87       	std	Y+11, r24	; 0x0b
    10d0:	9c 87       	std	Y+12, r25	; 0x0c
    10d2:	ad 87       	std	Y+13, r26	; 0x0d
    10d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a e7       	ldi	r20, 0x7A	; 122
    10e4:	55 e4       	ldi	r21, 0x45	; 69
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8f 83       	std	Y+7, r24	; 0x07
    10f0:	98 87       	std	Y+8, r25	; 0x08
    10f2:	a9 87       	std	Y+9, r26	; 0x09
    10f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <CLCD_voidInit+0x66>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6b 85       	ldd	r22, Y+11	; 0x0b
    1132:	7c 85       	ldd	r23, Y+12	; 0x0c
    1134:	8d 85       	ldd	r24, Y+13	; 0x0d
    1136:	9e 85       	ldd	r25, Y+14	; 0x0e
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <CLCD_voidInit+0xc6>
    115a:	80 e9       	ldi	r24, 0x90	; 144
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <CLCD_voidInit+0xb4>
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <CLCD_voidInit+0xa8>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <CLCD_voidInit+0xf0>
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*function set command: 2lines(DB3 high) and small font(DB2 low)*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	CLCD_voidSendComd(0b00111000);
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    11b0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    11ba:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    11be:	88 e0       	ldi	r24, 0x08	; 8
    11c0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    11c4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <voidSendEnablePulse>
	#endif

	/*display on/off control command: display enable(DB2 high),cursor(DB1 low),blink(DB0 low)*/
	CLCD_voidSendComd(0b00001100);
    11c8:	8c e0       	ldi	r24, 0x0C	; 12
    11ca:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
	/*display clear command*/
	CLCD_voidSendComd(0b00000001);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
	
}
    11d4:	2e 96       	adiw	r28, 0x0e	; 14
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <CLCD_u8SendString>:
uint8 CLCD_u8SendString(char Copy_chstring[])
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <CLCD_u8SendString+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <CLCD_u8SendString+0x8>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8StateError=OK;
    11f6:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	e1 f0       	breq	.+56     	; 0x1238 <CLCD_u8SendString+0x52>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
    1200:	19 82       	std	Y+1, r1	; 0x01
    1202:	0e c0       	rjmp	.+28     	; 0x1220 <CLCD_u8SendString+0x3a>
	{
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	fc 01       	movw	r30, r24
    1210:	e2 0f       	add	r30, r18
    1212:	f3 1f       	adc	r31, r19
    1214:	80 81       	ld	r24, Z
    1216:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
uint8 CLCD_u8SendString(char Copy_chstring[])
{
	uint8 Local_u8StateError=OK;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	fc 01       	movw	r30, r24
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	80 81       	ld	r24, Z
    1232:	88 23       	and	r24, r24
    1234:	39 f7       	brne	.-50     	; 0x1204 <CLCD_u8SendString+0x1e>
    1236:	02 c0       	rjmp	.+4      	; 0x123c <CLCD_u8SendString+0x56>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8StateError;
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	61 97       	sbiw	r28, 0x11	; 17
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	6e 87       	std	Y+14, r22	; 0x0e
    1262:	7f 87       	std	Y+15, r23	; 0x0f
    1264:	88 8b       	std	Y+16, r24	; 0x10
    1266:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chArray[10];
	sint8 Local_s8Remainder,Local_s8ArrayIndex=0;
    1268:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_s32Number==0)
    126a:	8e 85       	ldd	r24, Y+14	; 0x0e
    126c:	9f 85       	ldd	r25, Y+15	; 0x0f
    126e:	a8 89       	ldd	r26, Y+16	; 0x10
    1270:	b9 89       	ldd	r27, Y+17	; 0x11
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	a1 05       	cpc	r26, r1
    1276:	b1 05       	cpc	r27, r1
    1278:	21 f4       	brne	.+8      	; 0x1282 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData(48);
    127a:	80 e3       	ldi	r24, 0x30	; 48
    127c:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
    1280:	86 c0       	rjmp	.+268    	; 0x138e <CLCD_voidSendNumber+0x142>
	}
	else if(Copy_s32Number>0)
    1282:	8e 85       	ldd	r24, Y+14	; 0x0e
    1284:	9f 85       	ldd	r25, Y+15	; 0x0f
    1286:	a8 89       	ldd	r26, Y+16	; 0x10
    1288:	b9 89       	ldd	r27, Y+17	; 0x11
    128a:	18 16       	cp	r1, r24
    128c:	19 06       	cpc	r1, r25
    128e:	1a 06       	cpc	r1, r26
    1290:	1b 06       	cpc	r1, r27
    1292:	d4 f5       	brge	.+116    	; 0x1308 <CLCD_voidSendNumber+0xbc>
    1294:	30 c0       	rjmp	.+96     	; 0x12f6 <CLCD_voidSendNumber+0xaa>
	{
	while(Copy_s32Number!=0)
	{
		Local_s8Remainder=Copy_s32Number%10;
    1296:	8e 85       	ldd	r24, Y+14	; 0x0e
    1298:	9f 85       	ldd	r25, Y+15	; 0x0f
    129a:	a8 89       	ldd	r26, Y+16	; 0x10
    129c:	b9 89       	ldd	r27, Y+17	; 0x11
    129e:	2a e0       	ldi	r18, 0x0A	; 10
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 ce 19 	call	0x339c	; 0x339c <__divmodsi4>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	8b 83       	std	Y+3, r24	; 0x03
		Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	33 27       	eor	r19, r19
    12ba:	27 fd       	sbrc	r18, 7
    12bc:	30 95       	com	r19
    12be:	4b 81       	ldd	r20, Y+3	; 0x03
    12c0:	ce 01       	movw	r24, r28
    12c2:	04 96       	adiw	r24, 0x04	; 4
    12c4:	fc 01       	movw	r30, r24
    12c6:	e2 0f       	add	r30, r18
    12c8:	f3 1f       	adc	r31, r19
    12ca:	40 83       	st	Z, r20
		Local_s8ArrayIndex++;
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	8f 5f       	subi	r24, 0xFF	; 255
    12d0:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number/=10;
    12d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12d6:	a8 89       	ldd	r26, Y+16	; 0x10
    12d8:	b9 89       	ldd	r27, Y+17	; 0x11
    12da:	2a e0       	ldi	r18, 0x0A	; 10
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 ce 19 	call	0x339c	; 0x339c <__divmodsi4>
    12ea:	da 01       	movw	r26, r20
    12ec:	c9 01       	movw	r24, r18
    12ee:	8e 87       	std	Y+14, r24	; 0x0e
    12f0:	9f 87       	std	Y+15, r25	; 0x0f
    12f2:	a8 8b       	std	Y+16, r26	; 0x10
    12f4:	b9 8b       	std	Y+17, r27	; 0x11
	{
		CLCD_voidSendData(48);
	}
	else if(Copy_s32Number>0)
	{
	while(Copy_s32Number!=0)
    12f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    12fa:	a8 89       	ldd	r26, Y+16	; 0x10
    12fc:	b9 89       	ldd	r27, Y+17	; 0x11
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	a1 05       	cpc	r26, r1
    1302:	b1 05       	cpc	r27, r1
    1304:	41 f6       	brne	.-112    	; 0x1296 <CLCD_voidSendNumber+0x4a>
    1306:	43 c0       	rjmp	.+134    	; 0x138e <CLCD_voidSendNumber+0x142>
		Copy_s32Number/=10;
	}
	}
	else
	{
		CLCD_voidSendData('-');
    1308:	8d e2       	ldi	r24, 0x2D	; 45
    130a:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
    130e:	37 c0       	rjmp	.+110    	; 0x137e <CLCD_voidSendNumber+0x132>
		while(Copy_s32Number!=0)
		{
			Local_s8Remainder=-Copy_s32Number%10;
    1310:	8e 85       	ldd	r24, Y+14	; 0x0e
    1312:	9f 85       	ldd	r25, Y+15	; 0x0f
    1314:	a8 89       	ldd	r26, Y+16	; 0x10
    1316:	b9 89       	ldd	r27, Y+17	; 0x11
    1318:	b0 95       	com	r27
    131a:	a0 95       	com	r26
    131c:	90 95       	com	r25
    131e:	81 95       	neg	r24
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	af 4f       	sbci	r26, 0xFF	; 255
    1324:	bf 4f       	sbci	r27, 0xFF	; 255
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 ce 19 	call	0x339c	; 0x339c <__divmodsi4>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8b 83       	std	Y+3, r24	; 0x03
			Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	33 27       	eor	r19, r19
    1342:	27 fd       	sbrc	r18, 7
    1344:	30 95       	com	r19
    1346:	4b 81       	ldd	r20, Y+3	; 0x03
    1348:	ce 01       	movw	r24, r28
    134a:	04 96       	adiw	r24, 0x04	; 4
    134c:	fc 01       	movw	r30, r24
    134e:	e2 0f       	add	r30, r18
    1350:	f3 1f       	adc	r31, r19
    1352:	40 83       	st	Z, r20
			Local_s8ArrayIndex++;
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	8a 83       	std	Y+2, r24	; 0x02
			Copy_s32Number/=10;
    135a:	8e 85       	ldd	r24, Y+14	; 0x0e
    135c:	9f 85       	ldd	r25, Y+15	; 0x0f
    135e:	a8 89       	ldd	r26, Y+16	; 0x10
    1360:	b9 89       	ldd	r27, Y+17	; 0x11
    1362:	2a e0       	ldi	r18, 0x0A	; 10
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 ce 19 	call	0x339c	; 0x339c <__divmodsi4>
    1372:	da 01       	movw	r26, r20
    1374:	c9 01       	movw	r24, r18
    1376:	8e 87       	std	Y+14, r24	; 0x0e
    1378:	9f 87       	std	Y+15, r25	; 0x0f
    137a:	a8 8b       	std	Y+16, r26	; 0x10
    137c:	b9 8b       	std	Y+17, r27	; 0x11
	}
	}
	else
	{
		CLCD_voidSendData('-');
		while(Copy_s32Number!=0)
    137e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1380:	9f 85       	ldd	r25, Y+15	; 0x0f
    1382:	a8 89       	ldd	r26, Y+16	; 0x10
    1384:	b9 89       	ldd	r27, Y+17	; 0x11
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	a1 05       	cpc	r26, r1
    138a:	b1 05       	cpc	r27, r1
    138c:	09 f6       	brne	.-126    	; 0x1310 <CLCD_voidSendNumber+0xc4>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	81 50       	subi	r24, 0x01	; 1
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <CLCD_voidSendNumber+0x16c>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	33 27       	eor	r19, r19
    139c:	27 fd       	sbrc	r18, 7
    139e:	30 95       	com	r19
    13a0:	ce 01       	movw	r24, r28
    13a2:	04 96       	adiw	r24, 0x04	; 4
    13a4:	fc 01       	movw	r30, r24
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	80 81       	ld	r24, Z
    13ac:	80 5d       	subi	r24, 0xD0	; 208
    13ae:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 50       	subi	r24, 0x01	; 1
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	88 23       	and	r24, r24
    13bc:	64 f7       	brge	.-40     	; 0x1396 <CLCD_voidSendNumber+0x14a>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
	}
	}
}
    13be:	61 96       	adiw	r28, 0x11	; 17
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <CLCD_voidGoToXY+0x6>
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	8a 83       	std	Y+2, r24	; 0x02
    13de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRAMAdd;
	if(Copy_u8YPos==0u)
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	88 23       	and	r24, r24
    13e4:	19 f4       	brne	.+6      	; 0x13ec <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAMAdd=Copy_u8XPos;
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos==1u)
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	19 f4       	brne	.+6      	; 0x13f8 <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRAMAdd=Copy_u8XPos+0x40;
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	80 5c       	subi	r24, 0xC0	; 192
    13f6:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRAMAdd|=1<<7;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	80 68       	ori	r24, 0x80	; 128
    13fc:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendComd(Local_u8DDRAMAdd);
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <CLCD_u8SinWaveSendString>:
uint8 CLCD_u8SinWaveSendString(char Copy_chstring[])
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <CLCD_u8SinWaveSendString+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <CLCD_u8SinWaveSendString+0x8>
    1418:	00 d0       	rcall	.+0      	; 0x141a <CLCD_u8SinWaveSendString+0xa>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Local_u8StateError=OK;
    1422:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_u8XCoordinate=0;
    1424:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8YCoordinate=0;
    1426:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	51 f1       	breq	.+84     	; 0x1484 <CLCD_u8SinWaveSendString+0x74>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    1430:	19 82       	std	Y+1, r1	; 0x01
    1432:	1c c0       	rjmp	.+56     	; 0x146c <CLCD_u8SinWaveSendString+0x5c>
	{
		CLCD_voidGoToXY(Local_u8XCoordinate,Local_u8YCoordinate);
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	6a 81       	ldd	r22, Y+2	; 0x02
    1438:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	fc 01       	movw	r30, r24
    1448:	e2 0f       	add	r30, r18
    144a:	f3 1f       	adc	r31, r19
    144c:	80 81       	ld	r24, Z
    144e:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
		if(Local_u8YCoordinate==0)Local_u8YCoordinate=1;
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	88 23       	and	r24, r24
    1456:	19 f4       	brne	.+6      	; 0x145e <CLCD_u8SinWaveSendString+0x4e>
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <CLCD_u8SinWaveSendString+0x50>
		else Local_u8YCoordinate=0;
    145e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8StateError=OK;
	uint8 Local_u8XCoordinate=0;
	uint8 Local_u8YCoordinate=0;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	8b 83       	std	Y+3, r24	; 0x03
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	fc 01       	movw	r30, r24
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	80 81       	ld	r24, Z
    147e:	88 23       	and	r24, r24
    1480:	c9 f6       	brne	.-78     	; 0x1434 <CLCD_u8SinWaveSendString+0x24>
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <CLCD_u8SinWaveSendString+0x78>
		else Local_u8YCoordinate=0;
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	8c 83       	std	Y+4, r24	; 0x04
	}
	return Local_u8StateError;
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
}
    148a:	26 96       	adiw	r28, 0x06	; 6
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 Copy_u8Pattern[],uint8 Copy_u8PatternNum,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	27 97       	sbiw	r28, 0x07	; 7
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	6d 83       	std	Y+5, r22	; 0x05
    14b6:	4e 83       	std	Y+6, r20	; 0x06
    14b8:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	80 64       	ori	r24, 0x40	; 64
    14d2:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendComd(Local_u8CGRAMAdd);
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	0e c0       	rjmp	.+28     	; 0x14fa <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	fc 01       	movw	r30, r24
    14ea:	e2 0f       	add	r30, r18
    14ec:	f3 1f       	adc	r31, r19
    14ee:	80 81       	ld	r24, Z
    14f0:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
{
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
	CLCD_voidSendComd(Local_u8CGRAMAdd);
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	88 30       	cpi	r24, 0x08	; 8
    14fe:	78 f3       	brcs	.-34     	; 0x14de <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1500:	8e 81       	ldd	r24, Y+6	; 0x06
    1502:	6f 81       	ldd	r22, Y+7	; 0x07
    1504:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNum);
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
}
    150e:	27 96       	adiw	r28, 0x07	; 7
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <CLCD_voidSendBinaryNum>:

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <CLCD_voidSendBinaryNum+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <CLCD_voidSendBinaryNum+0x8>
    1528:	00 d0       	rcall	.+0      	; 0x152a <CLCD_voidSendBinaryNum+0xa>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	6b 83       	std	Y+3, r22	; 0x03
    1530:	7c 83       	std	Y+4, r23	; 0x04
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	9e 83       	std	Y+6, r25	; 0x06
	sint8 Local_s8Counter;
	uint8 Local_u8BitState;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    1536:	8f e1       	ldi	r24, 0x1F	; 31
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	29 c0       	rjmp	.+82     	; 0x158e <CLCD_voidSendBinaryNum+0x6e>
	{
		CLCD_voidGoToXY((31-Local_s8Counter),0);
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	8f e1       	ldi	r24, 0x1F	; 31
    1540:	89 1b       	sub	r24, r25
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
		if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	33 27       	eor	r19, r19
    154e:	27 fd       	sbrc	r18, 7
    1550:	30 95       	com	r19
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	ad 81       	ldd	r26, Y+5	; 0x05
    1558:	be 81       	ldd	r27, Y+6	; 0x06
    155a:	02 2e       	mov	r0, r18
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <CLCD_voidSendBinaryNum+0x46>
    155e:	b5 95       	asr	r27
    1560:	a7 95       	ror	r26
    1562:	97 95       	ror	r25
    1564:	87 95       	ror	r24
    1566:	0a 94       	dec	r0
    1568:	d2 f7       	brpl	.-12     	; 0x155e <CLCD_voidSendBinaryNum+0x3e>
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	90 70       	andi	r25, 0x00	; 0
    156e:	a0 70       	andi	r26, 0x00	; 0
    1570:	b0 70       	andi	r27, 0x00	; 0
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	a1 05       	cpc	r26, r1
    1576:	b1 05       	cpc	r27, r1
    1578:	21 f4       	brne	.+8      	; 0x1582 <CLCD_voidSendBinaryNum+0x62>
		{
			CLCD_voidSendData('0');
    157a:	80 e3       	ldi	r24, 0x30	; 48
    157c:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <CLCD_voidSendBinaryNum+0x68>
		}
		else
		{
			CLCD_voidSendData('1');
    1582:	81 e3       	ldi	r24, 0x31	; 49
    1584:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
	sint8 Local_s8Counter;
	uint8 Local_u8BitState;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	81 50       	subi	r24, 0x01	; 1
    158c:	8a 83       	std	Y+2, r24	; 0x02
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 31       	cpi	r24, 0x10	; 16
    1592:	a4 f6       	brge	.-88     	; 0x153c <CLCD_voidSendBinaryNum+0x1c>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    1594:	8f e0       	ldi	r24, 0x0F	; 15
    1596:	8a 83       	std	Y+2, r24	; 0x02
    1598:	29 c0       	rjmp	.+82     	; 0x15ec <CLCD_voidSendBinaryNum+0xcc>
		{
			CLCD_voidGoToXY((15-Local_s8Counter),1);
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	8f e0       	ldi	r24, 0x0F	; 15
    159e:	89 1b       	sub	r24, r25
    15a0:	61 e0       	ldi	r22, 0x01	; 1
    15a2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
			if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	33 27       	eor	r19, r19
    15ac:	27 fd       	sbrc	r18, 7
    15ae:	30 95       	com	r19
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	ad 81       	ldd	r26, Y+5	; 0x05
    15b6:	be 81       	ldd	r27, Y+6	; 0x06
    15b8:	02 2e       	mov	r0, r18
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <CLCD_voidSendBinaryNum+0xa4>
    15bc:	b5 95       	asr	r27
    15be:	a7 95       	ror	r26
    15c0:	97 95       	ror	r25
    15c2:	87 95       	ror	r24
    15c4:	0a 94       	dec	r0
    15c6:	d2 f7       	brpl	.-12     	; 0x15bc <CLCD_voidSendBinaryNum+0x9c>
    15c8:	81 70       	andi	r24, 0x01	; 1
    15ca:	90 70       	andi	r25, 0x00	; 0
    15cc:	a0 70       	andi	r26, 0x00	; 0
    15ce:	b0 70       	andi	r27, 0x00	; 0
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	a1 05       	cpc	r26, r1
    15d4:	b1 05       	cpc	r27, r1
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <CLCD_voidSendBinaryNum+0xc0>
			{
				CLCD_voidSendData('0');
    15d8:	80 e3       	ldi	r24, 0x30	; 48
    15da:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <CLCD_voidSendBinaryNum+0xc6>
			}
			else
			{
				CLCD_voidSendData('1');
    15e0:	81 e3       	ldi	r24, 0x31	; 49
    15e2:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	81 50       	subi	r24, 0x01	; 1
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	88 23       	and	r24, r24
    15f0:	a4 f6       	brge	.-88     	; 0x159a <CLCD_voidSendBinaryNum+0x7a>
			{
				CLCD_voidSendData('1');
			}

	}
}
    15f2:	26 96       	adiw	r28, 0x06	; 6
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <CLCD_voidSendHexaNum>:

void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	2e 97       	sbiw	r28, 0x0e	; 14
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	6b 87       	std	Y+11, r22	; 0x0b
    161a:	7c 87       	std	Y+12, r23	; 0x0c
    161c:	8d 87       	std	Y+13, r24	; 0x0d
    161e:	9e 87       	std	Y+14, r25	; 0x0e
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    1620:	87 e0       	ldi	r24, 0x07	; 7
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	36 c0       	rjmp	.+108    	; 0x1692 <CLCD_voidSendHexaNum+0x8e>
	{
		Local_u8Remainder=Copy_s32Number%16;
    1626:	8b 85       	ldd	r24, Y+11	; 0x0b
    1628:	8f 70       	andi	r24, 0x0F	; 15
    162a:	8a 83       	std	Y+2, r24	; 0x02
		if(Local_u8Remainder<=9)
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	8a 30       	cpi	r24, 0x0A	; 10
    1630:	78 f4       	brcc	.+30     	; 0x1650 <CLCD_voidSendHexaNum+0x4c>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder+'0';
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	28 2f       	mov	r18, r24
    1636:	33 27       	eor	r19, r19
    1638:	27 fd       	sbrc	r18, 7
    163a:	30 95       	com	r19
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	48 2f       	mov	r20, r24
    1640:	40 5d       	subi	r20, 0xD0	; 208
    1642:	ce 01       	movw	r24, r28
    1644:	03 96       	adiw	r24, 0x03	; 3
    1646:	fc 01       	movw	r30, r24
    1648:	e2 0f       	add	r30, r18
    164a:	f3 1f       	adc	r31, r19
    164c:	40 83       	st	Z, r20
    164e:	0e c0       	rjmp	.+28     	; 0x166c <CLCD_voidSendHexaNum+0x68>
		}
		else
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	33 27       	eor	r19, r19
    1656:	27 fd       	sbrc	r18, 7
    1658:	30 95       	com	r19
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	48 2f       	mov	r20, r24
    165e:	49 5c       	subi	r20, 0xC9	; 201
    1660:	ce 01       	movw	r24, r28
    1662:	03 96       	adiw	r24, 0x03	; 3
    1664:	fc 01       	movw	r30, r24
    1666:	e2 0f       	add	r30, r18
    1668:	f3 1f       	adc	r31, r19
    166a:	40 83       	st	Z, r20
		}
		Copy_s32Number/=16;
    166c:	8b 85       	ldd	r24, Y+11	; 0x0b
    166e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1670:	ad 85       	ldd	r26, Y+13	; 0x0d
    1672:	be 85       	ldd	r27, Y+14	; 0x0e
    1674:	68 94       	set
    1676:	13 f8       	bld	r1, 3
    1678:	b6 95       	lsr	r27
    167a:	a7 95       	ror	r26
    167c:	97 95       	ror	r25
    167e:	87 95       	ror	r24
    1680:	16 94       	lsr	r1
    1682:	d1 f7       	brne	.-12     	; 0x1678 <CLCD_voidSendHexaNum+0x74>
    1684:	8b 87       	std	Y+11, r24	; 0x0b
    1686:	9c 87       	std	Y+12, r25	; 0x0c
    1688:	ad 87       	std	Y+13, r26	; 0x0d
    168a:	be 87       	std	Y+14, r27	; 0x0e
void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	81 50       	subi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 23       	and	r24, r24
    1696:	3c f6       	brge	.-114    	; 0x1626 <CLCD_voidSendHexaNum+0x22>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    1698:	19 82       	std	Y+1, r1	; 0x01
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <CLCD_voidSendHexaNum+0xc0>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	33 27       	eor	r19, r19
    16aa:	27 fd       	sbrc	r18, 7
    16ac:	30 95       	com	r19
    16ae:	ce 01       	movw	r24, r28
    16b0:	03 96       	adiw	r24, 0x03	; 3
    16b2:	fc 01       	movw	r30, r24
    16b4:	e2 0f       	add	r30, r18
    16b6:	f3 1f       	adc	r31, r19
    16b8:	80 81       	ld	r24, Z
    16ba:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	88 30       	cpi	r24, 0x08	; 8
    16c8:	4c f3       	brlt	.-46     	; 0x169c <CLCD_voidSendHexaNum+0x98>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
	}

}
    16ca:	2e 96       	adiw	r28, 0x0e	; 14
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <DCM_u8RotateRight>:
#include "DIO_interface.h"
#include "DCM_prv.h"
#include "DCM_interface.h"

uint8 DCM_u8RotateRight(const DCM_t* Object)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <DCM_u8RotateRight+0x6>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_StateErr=OK;
    16ec:	19 82       	std	Y+1, r1	; 0x01
	if(Object!=NULL)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	39 f1       	breq	.+78     	; 0x1744 <DCM_u8RotateRight+0x68>
	{

		if(Object->Port<=DIO_u8PORTD||Object->Pin1_4<=DIO_u8PIN7||Object->Pin2_3<=DIO_u8PIN7)
    16f6:	ea 81       	ldd	r30, Y+2	; 0x02
    16f8:	fb 81       	ldd	r31, Y+3	; 0x03
    16fa:	80 81       	ld	r24, Z
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	50 f0       	brcs	.+20     	; 0x1714 <DCM_u8RotateRight+0x38>
    1700:	ea 81       	ldd	r30, Y+2	; 0x02
    1702:	fb 81       	ldd	r31, Y+3	; 0x03
    1704:	81 81       	ldd	r24, Z+1	; 0x01
    1706:	88 30       	cpi	r24, 0x08	; 8
    1708:	28 f0       	brcs	.+10     	; 0x1714 <DCM_u8RotateRight+0x38>
    170a:	ea 81       	ldd	r30, Y+2	; 0x02
    170c:	fb 81       	ldd	r31, Y+3	; 0x03
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	88 30       	cpi	r24, 0x08	; 8
    1712:	a8 f4       	brcc	.+42     	; 0x173e <DCM_u8RotateRight+0x62>
		{
			DIO_u8SetPinValue(Object->Port,Object->Pin1_4,DIO_u8PIN_LOW);
    1714:	ea 81       	ldd	r30, Y+2	; 0x02
    1716:	fb 81       	ldd	r31, Y+3	; 0x03
    1718:	80 81       	ld	r24, Z
    171a:	ea 81       	ldd	r30, Y+2	; 0x02
    171c:	fb 81       	ldd	r31, Y+3	; 0x03
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	69 2f       	mov	r22, r25
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
			DIO_u8SetPinValue(Object->Port,Object->Pin2_3,DIO_u8PIN_HIGH);
    1728:	ea 81       	ldd	r30, Y+2	; 0x02
    172a:	fb 81       	ldd	r31, Y+3	; 0x03
    172c:	80 81       	ld	r24, Z
    172e:	ea 81       	ldd	r30, Y+2	; 0x02
    1730:	fb 81       	ldd	r31, Y+3	; 0x03
    1732:	92 81       	ldd	r25, Z+2	; 0x02
    1734:	69 2f       	mov	r22, r25
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <DCM_u8RotateRight+0x6c>
		}
		else
		{
			Local_StateErr=NOK;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DCM_u8RotateRight+0x6c>
		}
	}
	else
	{
		Local_StateErr=NULL_PTR_ERR;
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_StateErr;
    1748:	89 81       	ldd	r24, Y+1	; 0x01
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <DCM_u8RotateLeft>:

uint8 DCM_u8RotateLeft(const DCM_t* Object)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <DCM_u8RotateLeft+0x6>
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	9b 83       	std	Y+3, r25	; 0x03
    1764:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_StateErr=OK;
    1766:	19 82       	std	Y+1, r1	; 0x01
	if(Object!=NULL)
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	9b 81       	ldd	r25, Y+3	; 0x03
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	39 f1       	breq	.+78     	; 0x17be <DCM_u8RotateLeft+0x68>
	{

		if(Object->Port<=DIO_u8PORTD||Object->Pin1_4<=DIO_u8PIN7||Object->Pin2_3<=DIO_u8PIN7)
    1770:	ea 81       	ldd	r30, Y+2	; 0x02
    1772:	fb 81       	ldd	r31, Y+3	; 0x03
    1774:	80 81       	ld	r24, Z
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	50 f0       	brcs	.+20     	; 0x178e <DCM_u8RotateLeft+0x38>
    177a:	ea 81       	ldd	r30, Y+2	; 0x02
    177c:	fb 81       	ldd	r31, Y+3	; 0x03
    177e:	81 81       	ldd	r24, Z+1	; 0x01
    1780:	88 30       	cpi	r24, 0x08	; 8
    1782:	28 f0       	brcs	.+10     	; 0x178e <DCM_u8RotateLeft+0x38>
    1784:	ea 81       	ldd	r30, Y+2	; 0x02
    1786:	fb 81       	ldd	r31, Y+3	; 0x03
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	88 30       	cpi	r24, 0x08	; 8
    178c:	a8 f4       	brcc	.+42     	; 0x17b8 <DCM_u8RotateLeft+0x62>
		{
			DIO_u8SetPinValue(Object->Port,Object->Pin2_3,DIO_u8PIN_LOW);
    178e:	ea 81       	ldd	r30, Y+2	; 0x02
    1790:	fb 81       	ldd	r31, Y+3	; 0x03
    1792:	80 81       	ld	r24, Z
    1794:	ea 81       	ldd	r30, Y+2	; 0x02
    1796:	fb 81       	ldd	r31, Y+3	; 0x03
    1798:	92 81       	ldd	r25, Z+2	; 0x02
    179a:	69 2f       	mov	r22, r25
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
			DIO_u8SetPinValue(Object->Port,Object->Pin1_4,DIO_u8PIN_HIGH);
    17a2:	ea 81       	ldd	r30, Y+2	; 0x02
    17a4:	fb 81       	ldd	r31, Y+3	; 0x03
    17a6:	80 81       	ld	r24, Z
    17a8:	ea 81       	ldd	r30, Y+2	; 0x02
    17aa:	fb 81       	ldd	r31, Y+3	; 0x03
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	69 2f       	mov	r22, r25
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <DCM_u8RotateLeft+0x6c>
		}
		else
		{
			Local_StateErr=NOK;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DCM_u8RotateLeft+0x6c>
		}
	}
	else
	{
		Local_StateErr=NULL_PTR_ERR;
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_StateErr;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <DCM_u8Stop>:

uint8 DCM_u8Stop(const DCM_t* Object)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <DCM_u8Stop+0x6>
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	9b 83       	std	Y+3, r25	; 0x03
    17de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_StateErr=OK;
    17e0:	19 82       	std	Y+1, r1	; 0x01
	if(Object!=NULL)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	9b 81       	ldd	r25, Y+3	; 0x03
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	39 f1       	breq	.+78     	; 0x1838 <DCM_u8Stop+0x68>
	{

		if(Object->Port<=DIO_u8PORTD||Object->Pin1_4<=DIO_u8PIN7||Object->Pin2_3<=DIO_u8PIN7)
    17ea:	ea 81       	ldd	r30, Y+2	; 0x02
    17ec:	fb 81       	ldd	r31, Y+3	; 0x03
    17ee:	80 81       	ld	r24, Z
    17f0:	84 30       	cpi	r24, 0x04	; 4
    17f2:	50 f0       	brcs	.+20     	; 0x1808 <DCM_u8Stop+0x38>
    17f4:	ea 81       	ldd	r30, Y+2	; 0x02
    17f6:	fb 81       	ldd	r31, Y+3	; 0x03
    17f8:	81 81       	ldd	r24, Z+1	; 0x01
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	28 f0       	brcs	.+10     	; 0x1808 <DCM_u8Stop+0x38>
    17fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1800:	fb 81       	ldd	r31, Y+3	; 0x03
    1802:	82 81       	ldd	r24, Z+2	; 0x02
    1804:	88 30       	cpi	r24, 0x08	; 8
    1806:	a8 f4       	brcc	.+42     	; 0x1832 <DCM_u8Stop+0x62>
		{
			DIO_u8SetPinValue(Object->Port,Object->Pin2_3,DIO_u8PIN_LOW);
    1808:	ea 81       	ldd	r30, Y+2	; 0x02
    180a:	fb 81       	ldd	r31, Y+3	; 0x03
    180c:	80 81       	ld	r24, Z
    180e:	ea 81       	ldd	r30, Y+2	; 0x02
    1810:	fb 81       	ldd	r31, Y+3	; 0x03
    1812:	92 81       	ldd	r25, Z+2	; 0x02
    1814:	69 2f       	mov	r22, r25
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
			DIO_u8SetPinValue(Object->Port,Object->Pin1_4,DIO_u8PIN_LOW);
    181c:	ea 81       	ldd	r30, Y+2	; 0x02
    181e:	fb 81       	ldd	r31, Y+3	; 0x03
    1820:	80 81       	ld	r24, Z
    1822:	ea 81       	ldd	r30, Y+2	; 0x02
    1824:	fb 81       	ldd	r31, Y+3	; 0x03
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	69 2f       	mov	r22, r25
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
    1830:	05 c0       	rjmp	.+10     	; 0x183c <DCM_u8Stop+0x6c>
		}
		else
		{
			Local_StateErr=NOK;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DCM_u8Stop+0x6c>
		}
	}
	else
	{
		Local_StateErr=NULL_PTR_ERR;
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_StateErr;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_prv.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	28 97       	sbiw	r28, 0x08	; 8
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	6b 83       	std	Y+3, r22	; 0x03
    1862:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1864:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	88 30       	cpi	r24, 0x08	; 8
    186a:	08 f0       	brcs	.+2      	; 0x186e <DIO_u8SetPinDirection+0x24>
    186c:	f4 c0       	rjmp	.+488    	; 0x1a56 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	88 23       	and	r24, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <DIO_u8SetPinDirection+0x2c>
    1874:	77 c0       	rjmp	.+238    	; 0x1964 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	38 87       	std	Y+8, r19	; 0x08
    187e:	2f 83       	std	Y+7, r18	; 0x07
    1880:	8f 81       	ldd	r24, Y+7	; 0x07
    1882:	98 85       	ldd	r25, Y+8	; 0x08
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	59 f1       	breq	.+86     	; 0x18e0 <DIO_u8SetPinDirection+0x96>
    188a:	2f 81       	ldd	r18, Y+7	; 0x07
    188c:	38 85       	ldd	r19, Y+8	; 0x08
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	2c f4       	brge	.+10     	; 0x189e <DIO_u8SetPinDirection+0x54>
    1894:	8f 81       	ldd	r24, Y+7	; 0x07
    1896:	98 85       	ldd	r25, Y+8	; 0x08
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	69 f0       	breq	.+26     	; 0x18b6 <DIO_u8SetPinDirection+0x6c>
    189c:	60 c0       	rjmp	.+192    	; 0x195e <DIO_u8SetPinDirection+0x114>
    189e:	2f 81       	ldd	r18, Y+7	; 0x07
    18a0:	38 85       	ldd	r19, Y+8	; 0x08
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	89 f1       	breq	.+98     	; 0x190a <DIO_u8SetPinDirection+0xc0>
    18a8:	8f 81       	ldd	r24, Y+7	; 0x07
    18aa:	98 85       	ldd	r25, Y+8	; 0x08
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <DIO_u8SetPinDirection+0x6a>
    18b2:	40 c0       	rjmp	.+128    	; 0x1934 <DIO_u8SetPinDirection+0xea>
    18b4:	54 c0       	rjmp	.+168    	; 0x195e <DIO_u8SetPinDirection+0x114>
			{
			case(DIO_u8PORTA):
					CLR_BIT(DDRA,Copy_u8Pin);
    18b6:	aa e3       	ldi	r26, 0x3A	; 58
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ea e3       	ldi	r30, 0x3A	; 58
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_u8SetPinDirection+0x8a>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_u8SetPinDirection+0x86>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	bd c0       	rjmp	.+378    	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					CLR_BIT(DDRB,Copy_u8Pin);
    18e0:	a7 e3       	ldi	r26, 0x37	; 55
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e7 e3       	ldi	r30, 0x37	; 55
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_u8SetPinDirection+0xb4>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_u8SetPinDirection+0xb0>
    1902:	80 95       	com	r24
    1904:	84 23       	and	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	a8 c0       	rjmp	.+336    	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					CLR_BIT(DDRC,Copy_u8Pin);
    190a:	a4 e3       	ldi	r26, 0x34	; 52
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e4 e3       	ldi	r30, 0x34	; 52
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_u8SetPinDirection+0xde>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_u8SetPinDirection+0xda>
    192c:	80 95       	com	r24
    192e:	84 23       	and	r24, r20
    1930:	8c 93       	st	X, r24
    1932:	93 c0       	rjmp	.+294    	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					CLR_BIT(DDRD,Copy_u8Pin);
    1934:	a1 e3       	ldi	r26, 0x31	; 49
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e1 e3       	ldi	r30, 0x31	; 49
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_u8SetPinDirection+0x108>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_u8SetPinDirection+0x104>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	7e c0       	rjmp	.+252    	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	7b c0       	rjmp	.+246    	; 0x1a5a <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	09 f0       	breq	.+2      	; 0x196c <DIO_u8SetPinDirection+0x122>
    196a:	72 c0       	rjmp	.+228    	; 0x1a50 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3e 83       	std	Y+6, r19	; 0x06
    1974:	2d 83       	std	Y+5, r18	; 0x05
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	49 f1       	breq	.+82     	; 0x19d2 <DIO_u8SetPinDirection+0x188>
    1980:	2d 81       	ldd	r18, Y+5	; 0x05
    1982:	3e 81       	ldd	r19, Y+6	; 0x06
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	2c f4       	brge	.+10     	; 0x1994 <DIO_u8SetPinDirection+0x14a>
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	61 f0       	breq	.+24     	; 0x19aa <DIO_u8SetPinDirection+0x160>
    1992:	5b c0       	rjmp	.+182    	; 0x1a4a <DIO_u8SetPinDirection+0x200>
    1994:	2d 81       	ldd	r18, Y+5	; 0x05
    1996:	3e 81       	ldd	r19, Y+6	; 0x06
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	71 f1       	breq	.+92     	; 0x19fa <DIO_u8SetPinDirection+0x1b0>
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	e9 f1       	breq	.+122    	; 0x1a22 <DIO_u8SetPinDirection+0x1d8>
    19a8:	50 c0       	rjmp	.+160    	; 0x1a4a <DIO_u8SetPinDirection+0x200>
			{
			case(DIO_u8PORTA):
					SET_BIT(DDRA,Copy_u8Pin);
    19aa:	aa e3       	ldi	r26, 0x3A	; 58
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ea e3       	ldi	r30, 0x3A	; 58
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_u8SetPinDirection+0x17e>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <DIO_u8SetPinDirection+0x17a>
    19cc:	84 2b       	or	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	44 c0       	rjmp	.+136    	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					SET_BIT(DDRB,Copy_u8Pin);
    19d2:	a7 e3       	ldi	r26, 0x37	; 55
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e7 e3       	ldi	r30, 0x37	; 55
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_u8SetPinDirection+0x1a6>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_u8SetPinDirection+0x1a2>
    19f4:	84 2b       	or	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	30 c0       	rjmp	.+96     	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					SET_BIT(DDRC,Copy_u8Pin);
    19fa:	a4 e3       	ldi	r26, 0x34	; 52
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e4 e3       	ldi	r30, 0x34	; 52
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_u8SetPinDirection+0x1ce>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_u8SetPinDirection+0x1ca>
    1a1c:	84 2b       	or	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	1c c0       	rjmp	.+56     	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					SET_BIT(DDRD,Copy_u8Pin);
    1a22:	a1 e3       	ldi	r26, 0x31	; 49
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e1 e3       	ldi	r30, 0x31	; 49
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <DIO_u8SetPinDirection+0x1f6>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <DIO_u8SetPinDirection+0x1f2>
    1a44:	84 2b       	or	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	08 c0       	rjmp	.+16     	; 0x1a5a <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	05 c0       	rjmp	.+10     	; 0x1a5a <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_u8SetPinDirection+0x210>


	}
	else
	{
		 Local_u8ErrorState= NOK;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5c:	28 96       	adiw	r28, 0x08	; 8
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Value)
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	28 97       	sbiw	r28, 0x08	; 8
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	8a 83       	std	Y+2, r24	; 0x02
    1a84:	6b 83       	std	Y+3, r22	; 0x03
    1a86:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1a88:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	88 30       	cpi	r24, 0x08	; 8
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <DIO_u8SetPinValue+0x24>
    1a90:	f4 c0       	rjmp	.+488    	; 0x1c7a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    1a92:	8c 81       	ldd	r24, Y+4	; 0x04
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <DIO_u8SetPinValue+0x2c>
    1a98:	72 c0       	rjmp	.+228    	; 0x1b7e <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	38 87       	std	Y+8, r19	; 0x08
    1aa2:	2f 83       	std	Y+7, r18	; 0x07
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	98 85       	ldd	r25, Y+8	; 0x08
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	91 05       	cpc	r25, r1
    1aac:	49 f1       	breq	.+82     	; 0x1b00 <DIO_u8SetPinValue+0x92>
    1aae:	2f 81       	ldd	r18, Y+7	; 0x07
    1ab0:	38 85       	ldd	r19, Y+8	; 0x08
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <DIO_u8SetPinValue+0x54>
    1ab8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aba:	98 85       	ldd	r25, Y+8	; 0x08
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <DIO_u8SetPinValue+0x6a>
    1ac0:	5b c0       	rjmp	.+182    	; 0x1b78 <DIO_u8SetPinValue+0x10a>
    1ac2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ac4:	38 85       	ldd	r19, Y+8	; 0x08
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	71 f1       	breq	.+92     	; 0x1b28 <DIO_u8SetPinValue+0xba>
    1acc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ace:	98 85       	ldd	r25, Y+8	; 0x08
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	e9 f1       	breq	.+122    	; 0x1b50 <DIO_u8SetPinValue+0xe2>
    1ad6:	50 c0       	rjmp	.+160    	; 0x1b78 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    1ad8:	ab e3       	ldi	r26, 0x3B	; 59
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	eb e3       	ldi	r30, 0x3B	; 59
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <DIO_u8SetPinValue+0x88>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <DIO_u8SetPinValue+0x84>
    1afa:	84 2b       	or	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	bf c0       	rjmp	.+382    	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    1b00:	a8 e3       	ldi	r26, 0x38	; 56
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e8 e3       	ldi	r30, 0x38	; 56
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <DIO_u8SetPinValue+0xb0>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <DIO_u8SetPinValue+0xac>
    1b22:	84 2b       	or	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	ab c0       	rjmp	.+342    	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    1b28:	a5 e3       	ldi	r26, 0x35	; 53
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e3       	ldi	r30, 0x35	; 53
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <DIO_u8SetPinValue+0xd8>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <DIO_u8SetPinValue+0xd4>
    1b4a:	84 2b       	or	r24, r20
    1b4c:	8c 93       	st	X, r24
    1b4e:	97 c0       	rjmp	.+302    	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				SET_BIT(PORTD,Copy_u8Pin);
    1b50:	a2 e3       	ldi	r26, 0x32	; 50
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e2 e3       	ldi	r30, 0x32	; 50
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <DIO_u8SetPinValue+0x100>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <DIO_u8SetPinValue+0xfc>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	83 c0       	rjmp	.+262    	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	80 c0       	rjmp	.+256    	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	88 23       	and	r24, r24
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <DIO_u8SetPinValue+0x118>
    1b84:	77 c0       	rjmp	.+238    	; 0x1c74 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3e 83       	std	Y+6, r19	; 0x06
    1b8e:	2d 83       	std	Y+5, r18	; 0x05
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	59 f1       	breq	.+86     	; 0x1bf0 <DIO_u8SetPinValue+0x182>
    1b9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <DIO_u8SetPinValue+0x140>
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f0       	breq	.+26     	; 0x1bc6 <DIO_u8SetPinValue+0x158>
    1bac:	60 c0       	rjmp	.+192    	; 0x1c6e <DIO_u8SetPinValue+0x200>
    1bae:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb0:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	89 f1       	breq	.+98     	; 0x1c1a <DIO_u8SetPinValue+0x1ac>
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	83 30       	cpi	r24, 0x03	; 3
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <DIO_u8SetPinValue+0x156>
    1bc2:	40 c0       	rjmp	.+128    	; 0x1c44 <DIO_u8SetPinValue+0x1d6>
    1bc4:	54 c0       	rjmp	.+168    	; 0x1c6e <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:
				CLR_BIT(PORTA,Copy_u8Pin);
    1bc6:	ab e3       	ldi	r26, 0x3B	; 59
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	eb e3       	ldi	r30, 0x3B	; 59
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_u8SetPinValue+0x176>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_u8SetPinValue+0x172>
    1be8:	80 95       	com	r24
    1bea:	84 23       	and	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	47 c0       	rjmp	.+142    	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				CLR_BIT(PORTB,Copy_u8Pin);
    1bf0:	a8 e3       	ldi	r26, 0x38	; 56
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e8 e3       	ldi	r30, 0x38	; 56
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_u8SetPinValue+0x1a0>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_u8SetPinValue+0x19c>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	32 c0       	rjmp	.+100    	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				CLR_BIT(PORTC,Copy_u8Pin);
    1c1a:	a5 e3       	ldi	r26, 0x35	; 53
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e5 e3       	ldi	r30, 0x35	; 53
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_u8SetPinValue+0x1ca>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_u8SetPinValue+0x1c6>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	1d c0       	rjmp	.+58     	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				CLR_BIT(PORTD,Copy_u8Pin);
    1c44:	a2 e3       	ldi	r26, 0x32	; 50
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e2 e3       	ldi	r30, 0x32	; 50
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <DIO_u8SetPinValue+0x1f4>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <DIO_u8SetPinValue+0x1f0>
    1c66:	80 95       	com	r24
    1c68:	84 23       	and	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState= NOK;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c80:	28 96       	adiw	r28, 0x08	; 8
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	27 97       	sbiw	r28, 0x07	; 7
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	8a 83       	std	Y+2, r24	; 0x02
    1ca8:	6b 83       	std	Y+3, r22	; 0x03
    1caa:	5d 83       	std	Y+5, r21	; 0x05
    1cac:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1cae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <DIO_u8GetPinValue+0x28>
    1cb8:	7b c0       	rjmp	.+246    	; 0x1db0 <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_u8Pin<=DIO_u8PIN7)
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	88 30       	cpi	r24, 0x08	; 8
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <DIO_u8GetPinValue+0x30>
    1cc0:	74 c0       	rjmp	.+232    	; 0x1daa <DIO_u8GetPinValue+0x118>
		{
			switch (Copy_u8Port)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3f 83       	std	Y+7, r19	; 0x07
    1cca:	2e 83       	std	Y+6, r18	; 0x06
    1ccc:	4e 81       	ldd	r20, Y+6	; 0x06
    1cce:	5f 81       	ldd	r21, Y+7	; 0x07
    1cd0:	41 30       	cpi	r20, 0x01	; 1
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	59 f1       	breq	.+86     	; 0x1d2c <DIO_u8GetPinValue+0x9a>
    1cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	91 05       	cpc	r25, r1
    1cde:	34 f4       	brge	.+12     	; 0x1cec <DIO_u8GetPinValue+0x5a>
    1ce0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce4:	21 15       	cp	r18, r1
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	69 f0       	breq	.+26     	; 0x1d04 <DIO_u8GetPinValue+0x72>
    1cea:	5c c0       	rjmp	.+184    	; 0x1da4 <DIO_u8GetPinValue+0x112>
    1cec:	4e 81       	ldd	r20, Y+6	; 0x06
    1cee:	5f 81       	ldd	r21, Y+7	; 0x07
    1cf0:	42 30       	cpi	r20, 0x02	; 2
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	79 f1       	breq	.+94     	; 0x1d54 <DIO_u8GetPinValue+0xc2>
    1cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <DIO_u8GetPinValue+0x70>
    1d00:	3d c0       	rjmp	.+122    	; 0x1d7c <DIO_u8GetPinValue+0xea>
    1d02:	50 c0       	rjmp	.+160    	; 0x1da4 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:
				*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);
    1d04:	e9 e3       	ldi	r30, 0x39	; 57
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a9 01       	movw	r20, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_u8GetPinValue+0x8a>
    1d18:	55 95       	asr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	8a 95       	dec	r24
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_u8GetPinValue+0x86>
    1d20:	ca 01       	movw	r24, r20
    1d22:	81 70       	andi	r24, 0x01	; 1
    1d24:	ec 81       	ldd	r30, Y+4	; 0x04
    1d26:	fd 81       	ldd	r31, Y+5	; 0x05
    1d28:	80 83       	st	Z, r24
    1d2a:	44 c0       	rjmp	.+136    	; 0x1db4 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTB:
				*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);
    1d2c:	e6 e3       	ldi	r30, 0x36	; 54
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_u8GetPinValue+0xb2>
    1d40:	55 95       	asr	r21
    1d42:	47 95       	ror	r20
    1d44:	8a 95       	dec	r24
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_u8GetPinValue+0xae>
    1d48:	ca 01       	movw	r24, r20
    1d4a:	81 70       	andi	r24, 0x01	; 1
    1d4c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d4e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d50:	80 83       	st	Z, r24
    1d52:	30 c0       	rjmp	.+96     	; 0x1db4 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTC:
				*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);
    1d54:	e3 e3       	ldi	r30, 0x33	; 51
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a9 01       	movw	r20, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_u8GetPinValue+0xda>
    1d68:	55 95       	asr	r21
    1d6a:	47 95       	ror	r20
    1d6c:	8a 95       	dec	r24
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_u8GetPinValue+0xd6>
    1d70:	ca 01       	movw	r24, r20
    1d72:	81 70       	andi	r24, 0x01	; 1
    1d74:	ec 81       	ldd	r30, Y+4	; 0x04
    1d76:	fd 81       	ldd	r31, Y+5	; 0x05
    1d78:	80 83       	st	Z, r24
    1d7a:	1c c0       	rjmp	.+56     	; 0x1db4 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTD:
				*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);
    1d7c:	e0 e3       	ldi	r30, 0x30	; 48
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a9 01       	movw	r20, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_u8GetPinValue+0x102>
    1d90:	55 95       	asr	r21
    1d92:	47 95       	ror	r20
    1d94:	8a 95       	dec	r24
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_u8GetPinValue+0xfe>
    1d98:	ca 01       	movw	r24, r20
    1d9a:	81 70       	andi	r24, 0x01	; 1
    1d9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1da0:	80 83       	st	Z, r24
    1da2:	08 c0       	rjmp	.+16     	; 0x1db4 <DIO_u8GetPinValue+0x122>
				break;
			default:
				Local_u8ErrorState= NOK;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db6:	27 96       	adiw	r28, 0x07	; 7
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port,uint8 Copy_u8Direction)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <DIO_u8SetPortDirection+0x6>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <DIO_u8SetPortDirection+0x8>
    1dd0:	0f 92       	push	r0
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
    1dd8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=0;
    1dda:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	3d 83       	std	Y+5, r19	; 0x05
    1de4:	2c 83       	std	Y+4, r18	; 0x04
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	91 05       	cpc	r25, r1
    1dee:	d1 f0       	breq	.+52     	; 0x1e24 <DIO_u8SetPortDirection+0x5c>
    1df0:	2c 81       	ldd	r18, Y+4	; 0x04
    1df2:	3d 81       	ldd	r19, Y+5	; 0x05
    1df4:	22 30       	cpi	r18, 0x02	; 2
    1df6:	31 05       	cpc	r19, r1
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <DIO_u8SetPortDirection+0x3c>
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	61 f0       	breq	.+24     	; 0x1e1a <DIO_u8SetPortDirection+0x52>
    1e02:	1f c0       	rjmp	.+62     	; 0x1e42 <DIO_u8SetPortDirection+0x7a>
    1e04:	2c 81       	ldd	r18, Y+4	; 0x04
    1e06:	3d 81       	ldd	r19, Y+5	; 0x05
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	81 f0       	breq	.+32     	; 0x1e2e <DIO_u8SetPortDirection+0x66>
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	91 05       	cpc	r25, r1
    1e16:	81 f0       	breq	.+32     	; 0x1e38 <DIO_u8SetPortDirection+0x70>
    1e18:	14 c0       	rjmp	.+40     	; 0x1e42 <DIO_u8SetPortDirection+0x7a>
		{
		case(DIO_u8PORTA):
				DDRA=Copy_u8Direction;
    1e1a:	ea e3       	ldi	r30, 0x3A	; 58
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	80 83       	st	Z, r24
    1e22:	11 c0       	rjmp	.+34     	; 0x1e46 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTB):
				DDRB=Copy_u8Direction;
    1e24:	e7 e3       	ldi	r30, 0x37	; 55
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	80 83       	st	Z, r24
    1e2c:	0c c0       	rjmp	.+24     	; 0x1e46 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTC):
				DDRC=Copy_u8Direction;
    1e2e:	e4 e3       	ldi	r30, 0x34	; 52
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	80 83       	st	Z, r24
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTD):
				DDRD=Copy_u8Direction;
    1e38:	e1 e3       	ldi	r30, 0x31	; 49
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	80 83       	st	Z, r24
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_u8SetPortDirection+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	return Local_u8ErrorState;
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <DIO_u8SetPortValue+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <DIO_u8SetPortValue+0x8>
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	8a 83       	std	Y+2, r24	; 0x02
    1e68:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=0;
    1e6a:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3d 83       	std	Y+5, r19	; 0x05
    1e74:	2c 83       	std	Y+4, r18	; 0x04
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	d1 f0       	breq	.+52     	; 0x1eb4 <DIO_u8SetPortValue+0x5c>
    1e80:	2c 81       	ldd	r18, Y+4	; 0x04
    1e82:	3d 81       	ldd	r19, Y+5	; 0x05
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <DIO_u8SetPortValue+0x3c>
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <DIO_u8SetPortValue+0x52>
    1e92:	1f c0       	rjmp	.+62     	; 0x1ed2 <DIO_u8SetPortValue+0x7a>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	81 f0       	breq	.+32     	; 0x1ebe <DIO_u8SetPortValue+0x66>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	81 f0       	breq	.+32     	; 0x1ec8 <DIO_u8SetPortValue+0x70>
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <DIO_u8SetPortValue+0x7a>
		{
		case(DIO_u8PORTA):
				PORTA=Copy_u8Value;
    1eaa:	eb e3       	ldi	r30, 0x3B	; 59
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	80 83       	st	Z, r24
    1eb2:	11 c0       	rjmp	.+34     	; 0x1ed6 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTB):
				PORTB=Copy_u8Value;
    1eb4:	e8 e3       	ldi	r30, 0x38	; 56
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	80 83       	st	Z, r24
    1ebc:	0c c0       	rjmp	.+24     	; 0x1ed6 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTC):
				PORTC=Copy_u8Value;
    1ebe:	e5 e3       	ldi	r30, 0x35	; 53
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	80 83       	st	Z, r24
    1ec6:	07 c0       	rjmp	.+14     	; 0x1ed6 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTD):
				PORTD=Copy_u8Value;
    1ec8:	e2 e3       	ldi	r30, 0x32	; 50
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	80 83       	st	Z, r24
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <DIO_u8SetPortValue+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <DIO_u8TogglePinValue+0x6>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <DIO_u8TogglePinValue+0x8>
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <DIO_u8TogglePinValue+0xa>
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState= OK;
    1efa:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8BitState;
		if(Copy_u8Pin<=DIO_u8PIN7)
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	88 30       	cpi	r24, 0x08	; 8
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <DIO_u8TogglePinValue+0x1c>
    1f02:	1a c1       	rjmp	.+564    	; 0x2138 <DIO_u8TogglePinValue+0x250>
		{
			switch (Copy_u8Port)
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	3e 83       	std	Y+6, r19	; 0x06
    1f0c:	2d 83       	std	Y+5, r18	; 0x05
    1f0e:	4d 81       	ldd	r20, Y+5	; 0x05
    1f10:	5e 81       	ldd	r21, Y+6	; 0x06
    1f12:	41 30       	cpi	r20, 0x01	; 1
    1f14:	51 05       	cpc	r21, r1
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <DIO_u8TogglePinValue+0x32>
    1f18:	55 c0       	rjmp	.+170    	; 0x1fc4 <DIO_u8TogglePinValue+0xdc>
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	91 05       	cpc	r25, r1
    1f22:	34 f4       	brge	.+12     	; 0x1f30 <DIO_u8TogglePinValue+0x48>
    1f24:	2d 81       	ldd	r18, Y+5	; 0x05
    1f26:	3e 81       	ldd	r19, Y+6	; 0x06
    1f28:	21 15       	cp	r18, r1
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	71 f0       	breq	.+28     	; 0x1f4a <DIO_u8TogglePinValue+0x62>
    1f2e:	01 c1       	rjmp	.+514    	; 0x2132 <DIO_u8TogglePinValue+0x24a>
    1f30:	4d 81       	ldd	r20, Y+5	; 0x05
    1f32:	5e 81       	ldd	r21, Y+6	; 0x06
    1f34:	42 30       	cpi	r20, 0x02	; 2
    1f36:	51 05       	cpc	r21, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <DIO_u8TogglePinValue+0x54>
    1f3a:	81 c0       	rjmp	.+258    	; 0x203e <DIO_u8TogglePinValue+0x156>
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <DIO_u8TogglePinValue+0x60>
    1f46:	b8 c0       	rjmp	.+368    	; 0x20b8 <DIO_u8TogglePinValue+0x1d0>
    1f48:	f4 c0       	rjmp	.+488    	; 0x2132 <DIO_u8TogglePinValue+0x24a>
			{
			case DIO_u8PORTA:
				Local_u8BitState=GET_BIT(PORTA,Copy_u8Pin);
    1f4a:	eb e3       	ldi	r30, 0x3B	; 59
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	8c 81       	ldd	r24, Y+4	; 0x04
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a9 01       	movw	r20, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <DIO_u8TogglePinValue+0x7a>
    1f5e:	55 95       	asr	r21
    1f60:	47 95       	ror	r20
    1f62:	8a 95       	dec	r24
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <DIO_u8TogglePinValue+0x76>
    1f66:	ca 01       	movw	r24, r20
    1f68:	81 70       	andi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	a9 f4       	brne	.+42     	; 0x1f9c <DIO_u8TogglePinValue+0xb4>
				{
					CLR_BIT(PORTA,Copy_u8Pin);
    1f72:	ab e3       	ldi	r26, 0x3B	; 59
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	eb e3       	ldi	r30, 0x3B	; 59
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <DIO_u8TogglePinValue+0xa8>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <DIO_u8TogglePinValue+0xa4>
    1f94:	80 95       	com	r24
    1f96:	84 23       	and	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	d0 c0       	rjmp	.+416    	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTA,Copy_u8Pin);
    1f9c:	ab e3       	ldi	r26, 0x3B	; 59
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	eb e3       	ldi	r30, 0x3B	; 59
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <DIO_u8TogglePinValue+0xd2>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <DIO_u8TogglePinValue+0xce>
    1fbe:	84 2b       	or	r24, r20
    1fc0:	8c 93       	st	X, r24
    1fc2:	bc c0       	rjmp	.+376    	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTB:
				Local_u8BitState=GET_BIT(PORTB,Copy_u8Pin);
    1fc4:	e8 e3       	ldi	r30, 0x38	; 56
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a9 01       	movw	r20, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <DIO_u8TogglePinValue+0xf4>
    1fd8:	55 95       	asr	r21
    1fda:	47 95       	ror	r20
    1fdc:	8a 95       	dec	r24
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <DIO_u8TogglePinValue+0xf0>
    1fe0:	ca 01       	movw	r24, r20
    1fe2:	81 70       	andi	r24, 0x01	; 1
    1fe4:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	a9 f4       	brne	.+42     	; 0x2016 <DIO_u8TogglePinValue+0x12e>
				{
					CLR_BIT(PORTB,Copy_u8Pin);
    1fec:	a8 e3       	ldi	r26, 0x38	; 56
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e8 e3       	ldi	r30, 0x38	; 56
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	48 2f       	mov	r20, r24
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	02 2e       	mov	r0, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <DIO_u8TogglePinValue+0x122>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <DIO_u8TogglePinValue+0x11e>
    200e:	80 95       	com	r24
    2010:	84 23       	and	r24, r20
    2012:	8c 93       	st	X, r24
    2014:	93 c0       	rjmp	.+294    	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTB,Copy_u8Pin);
    2016:	a8 e3       	ldi	r26, 0x38	; 56
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e8 e3       	ldi	r30, 0x38	; 56
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	48 2f       	mov	r20, r24
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	02 2e       	mov	r0, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <DIO_u8TogglePinValue+0x14c>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	0a 94       	dec	r0
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <DIO_u8TogglePinValue+0x148>
    2038:	84 2b       	or	r24, r20
    203a:	8c 93       	st	X, r24
    203c:	7f c0       	rjmp	.+254    	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTC:
				Local_u8BitState=GET_BIT(PORTC,Copy_u8Pin);
    203e:	e5 e3       	ldi	r30, 0x35	; 53
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a9 01       	movw	r20, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <DIO_u8TogglePinValue+0x16e>
    2052:	55 95       	asr	r21
    2054:	47 95       	ror	r20
    2056:	8a 95       	dec	r24
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <DIO_u8TogglePinValue+0x16a>
    205a:	ca 01       	movw	r24, r20
    205c:	81 70       	andi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	a9 f4       	brne	.+42     	; 0x2090 <DIO_u8TogglePinValue+0x1a8>
				{
					CLR_BIT(PORTC,Copy_u8Pin);
    2066:	a5 e3       	ldi	r26, 0x35	; 53
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e5 e3       	ldi	r30, 0x35	; 53
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	48 2f       	mov	r20, r24
    2072:	8c 81       	ldd	r24, Y+4	; 0x04
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 2e       	mov	r0, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <DIO_u8TogglePinValue+0x19c>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <DIO_u8TogglePinValue+0x198>
    2088:	80 95       	com	r24
    208a:	84 23       	and	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	56 c0       	rjmp	.+172    	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTC,Copy_u8Pin);
    2090:	a5 e3       	ldi	r26, 0x35	; 53
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e5 e3       	ldi	r30, 0x35	; 53
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	48 2f       	mov	r20, r24
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 2e       	mov	r0, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <DIO_u8TogglePinValue+0x1c6>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <DIO_u8TogglePinValue+0x1c2>
    20b2:	84 2b       	or	r24, r20
    20b4:	8c 93       	st	X, r24
    20b6:	42 c0       	rjmp	.+132    	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTD:
				Local_u8BitState=GET_BIT(PORTD,Copy_u8Pin);
    20b8:	e2 e3       	ldi	r30, 0x32	; 50
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <DIO_u8TogglePinValue+0x1e8>
    20cc:	55 95       	asr	r21
    20ce:	47 95       	ror	r20
    20d0:	8a 95       	dec	r24
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <DIO_u8TogglePinValue+0x1e4>
    20d4:	ca 01       	movw	r24, r20
    20d6:	81 70       	andi	r24, 0x01	; 1
    20d8:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	a9 f4       	brne	.+42     	; 0x210a <DIO_u8TogglePinValue+0x222>
				{
					CLR_BIT(PORTD,Copy_u8Pin);
    20e0:	a2 e3       	ldi	r26, 0x32	; 50
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e2 e3       	ldi	r30, 0x32	; 50
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	48 2f       	mov	r20, r24
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 2e       	mov	r0, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_u8TogglePinValue+0x216>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_u8TogglePinValue+0x212>
    2102:	80 95       	com	r24
    2104:	84 23       	and	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	19 c0       	rjmp	.+50     	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTD,Copy_u8Pin);
    210a:	a2 e3       	ldi	r26, 0x32	; 50
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e2 e3       	ldi	r30, 0x32	; 50
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <DIO_u8TogglePinValue+0x240>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <DIO_u8TogglePinValue+0x23c>
    212c:	84 2b       	or	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	05 c0       	rjmp	.+10     	; 0x213c <DIO_u8TogglePinValue+0x254>
				}
				break;
			default:
				Local_u8ErrorState= NOK;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	8a 83       	std	Y+2, r24	; 0x02
    2136:	02 c0       	rjmp	.+4      	; 0x213c <DIO_u8TogglePinValue+0x254>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	8a 83       	std	Y+2, r24	; 0x02
		}

	return Local_u8ErrorState;
    213c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    213e:	26 96       	adiw	r28, 0x06	; 6
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <EXTI_voidInit>:
#include "EXTI_prv.h"

static void (*EXTI_pfIntFuncPtr[3]) (void)={NULL};

void EXTI_voidInit(void)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
#if INT0_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    2158:	a5 e5       	ldi	r26, 0x55	; 85
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e5 e5       	ldi	r30, 0x55	; 85
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	8e 7f       	andi	r24, 0xFE	; 254
    2164:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    2166:	a5 e5       	ldi	r26, 0x55	; 85
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e5 e5       	ldi	r30, 0x55	; 85
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	82 60       	ori	r24, 0x02	; 2
    2172:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
#else
#error Wrong INT0_SENSE_CTRL configuration option
#endif
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
    2174:	ab e5       	ldi	r26, 0x5B	; 91
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	eb e5       	ldi	r30, 0x5B	; 91
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 64       	ori	r24, 0x40	; 64
    2180:	8c 93       	st	X, r24
#else
#error Wrong INT0_INITIAL_STATE configuration option
#endif

#if INT1_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    2182:	a5 e5       	ldi	r26, 0x55	; 85
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e5 e5       	ldi	r30, 0x55	; 85
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	8b 7f       	andi	r24, 0xFB	; 251
    218e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    2190:	a5 e5       	ldi	r26, 0x55	; 85
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e5 e5       	ldi	r30, 0x55	; 85
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	88 60       	ori	r24, 0x08	; 8
    219c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
#else
#error Wrong INT1_SENSE_CTRL configuration option
#endif
#if INT1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
    219e:	ab e5       	ldi	r26, 0x5B	; 91
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	eb e5       	ldi	r30, 0x5B	; 91
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	80 68       	ori	r24, 0x80	; 128
    21aa:	8c 93       	st	X, r24
#else
#error Wrong INT1_INITIAL_STATE configuration option
#endif

#if INT2_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUSCR,MCUSCR_ISC2);
    21ac:	a4 e5       	ldi	r26, 0x54	; 84
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e4 e5       	ldi	r30, 0x54	; 84
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 7b       	andi	r24, 0xBF	; 191
    21b8:	8c 93       	st	X, r24
	SET_BIT(MCUSCR,MCUSCR_ISC2);
#else
#error Wrong INT2_SENSE_CTRL configuration option
#endif
#if INT2_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
    21ba:	ab e5       	ldi	r26, 0x5B	; 91
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	eb e5       	ldi	r30, 0x5B	; 91
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 62       	ori	r24, 0x20	; 32
    21c6:	8c 93       	st	X, r24
#else
#error Wrong INT2_INITIAL_STATE configuration option
#endif


}
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <EXTI_u8SetSenseControl>:

uint8 EXTI_u8SetSenseControl(uint8 Copy_u8Int,uint8 Copy_u8SenseControl)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	2b 97       	sbiw	r28, 0x0b	; 11
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	8a 83       	std	Y+2, r24	; 0x02
    21e4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    21e6:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	3b 87       	std	Y+11, r19	; 0x0b
    21f0:	2a 87       	std	Y+10, r18	; 0x0a
    21f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f6:	81 30       	cpi	r24, 0x01	; 1
    21f8:	91 05       	cpc	r25, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <EXTI_u8SetSenseControl+0x30>
    21fc:	6a c0       	rjmp	.+212    	; 0x22d2 <EXTI_u8SetSenseControl+0x104>
    21fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2200:	3b 85       	ldd	r19, Y+11	; 0x0b
    2202:	22 30       	cpi	r18, 0x02	; 2
    2204:	31 05       	cpc	r19, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <EXTI_u8SetSenseControl+0x3c>
    2208:	c3 c0       	rjmp	.+390    	; 0x2390 <EXTI_u8SetSenseControl+0x1c2>
    220a:	8a 85       	ldd	r24, Y+10	; 0x0a
    220c:	9b 85       	ldd	r25, Y+11	; 0x0b
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	09 f0       	breq	.+2      	; 0x2214 <EXTI_u8SetSenseControl+0x46>
    2212:	e1 c0       	rjmp	.+450    	; 0x23d6 <EXTI_u8SetSenseControl+0x208>
	{
	case EXTI_u8INT0:
		switch(Copy_u8SenseControl)
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	39 87       	std	Y+9, r19	; 0x09
    221c:	28 87       	std	Y+8, r18	; 0x08
    221e:	88 85       	ldd	r24, Y+8	; 0x08
    2220:	99 85       	ldd	r25, Y+9	; 0x09
    2222:	82 30       	cpi	r24, 0x02	; 2
    2224:	91 05       	cpc	r25, r1
    2226:	29 f1       	breq	.+74     	; 0x2272 <EXTI_u8SetSenseControl+0xa4>
    2228:	28 85       	ldd	r18, Y+8	; 0x08
    222a:	39 85       	ldd	r19, Y+9	; 0x09
    222c:	23 30       	cpi	r18, 0x03	; 3
    222e:	31 05       	cpc	r19, r1
    2230:	34 f4       	brge	.+12     	; 0x223e <EXTI_u8SetSenseControl+0x70>
    2232:	88 85       	ldd	r24, Y+8	; 0x08
    2234:	99 85       	ldd	r25, Y+9	; 0x09
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	91 05       	cpc	r25, r1
    223a:	61 f0       	breq	.+24     	; 0x2254 <EXTI_u8SetSenseControl+0x86>
    223c:	47 c0       	rjmp	.+142    	; 0x22cc <EXTI_u8SetSenseControl+0xfe>
    223e:	28 85       	ldd	r18, Y+8	; 0x08
    2240:	39 85       	ldd	r19, Y+9	; 0x09
    2242:	23 30       	cpi	r18, 0x03	; 3
    2244:	31 05       	cpc	r19, r1
    2246:	21 f1       	breq	.+72     	; 0x2290 <EXTI_u8SetSenseControl+0xc2>
    2248:	88 85       	ldd	r24, Y+8	; 0x08
    224a:	99 85       	ldd	r25, Y+9	; 0x09
    224c:	84 30       	cpi	r24, 0x04	; 4
    224e:	91 05       	cpc	r25, r1
    2250:	71 f1       	breq	.+92     	; 0x22ae <EXTI_u8SetSenseControl+0xe0>
    2252:	3c c0       	rjmp	.+120    	; 0x22cc <EXTI_u8SetSenseControl+0xfe>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    2254:	a5 e5       	ldi	r26, 0x55	; 85
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e5 e5       	ldi	r30, 0x55	; 85
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	81 60       	ori	r24, 0x01	; 1
    2260:	8c 93       	st	X, r24
    2262:	a5 e5       	ldi	r26, 0x55	; 85
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e5 e5       	ldi	r30, 0x55	; 85
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	82 60       	ori	r24, 0x02	; 2
    226e:	8c 93       	st	X, r24
    2270:	b4 c0       	rjmp	.+360    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    2272:	a5 e5       	ldi	r26, 0x55	; 85
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e5 e5       	ldi	r30, 0x55	; 85
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8e 7f       	andi	r24, 0xFE	; 254
    227e:	8c 93       	st	X, r24
    2280:	a5 e5       	ldi	r26, 0x55	; 85
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e5 e5       	ldi	r30, 0x55	; 85
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	8c 93       	st	X, r24
    228e:	a5 c0       	rjmp	.+330    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    2290:	a5 e5       	ldi	r26, 0x55	; 85
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e5 e5       	ldi	r30, 0x55	; 85
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	8e 7f       	andi	r24, 0xFE	; 254
    229c:	8c 93       	st	X, r24
    229e:	a5 e5       	ldi	r26, 0x55	; 85
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e5 e5       	ldi	r30, 0x55	; 85
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	8d 7f       	andi	r24, 0xFD	; 253
    22aa:	8c 93       	st	X, r24
    22ac:	96 c0       	rjmp	.+300    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOGICAL_CHANGE:SET_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    22ae:	a5 e5       	ldi	r26, 0x55	; 85
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e5 e5       	ldi	r30, 0x55	; 85
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	81 60       	ori	r24, 0x01	; 1
    22ba:	8c 93       	st	X, r24
    22bc:	a5 e5       	ldi	r26, 0x55	; 85
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e5 e5       	ldi	r30, 0x55	; 85
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8d 7f       	andi	r24, 0xFD	; 253
    22c8:	8c 93       	st	X, r24
    22ca:	87 c0       	rjmp	.+270    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	84 c0       	rjmp	.+264    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	case EXTI_u8INT1:
		switch(Copy_u8SenseControl)
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	3f 83       	std	Y+7, r19	; 0x07
    22da:	2e 83       	std	Y+6, r18	; 0x06
    22dc:	8e 81       	ldd	r24, Y+6	; 0x06
    22de:	9f 81       	ldd	r25, Y+7	; 0x07
    22e0:	82 30       	cpi	r24, 0x02	; 2
    22e2:	91 05       	cpc	r25, r1
    22e4:	29 f1       	breq	.+74     	; 0x2330 <EXTI_u8SetSenseControl+0x162>
    22e6:	2e 81       	ldd	r18, Y+6	; 0x06
    22e8:	3f 81       	ldd	r19, Y+7	; 0x07
    22ea:	23 30       	cpi	r18, 0x03	; 3
    22ec:	31 05       	cpc	r19, r1
    22ee:	34 f4       	brge	.+12     	; 0x22fc <EXTI_u8SetSenseControl+0x12e>
    22f0:	8e 81       	ldd	r24, Y+6	; 0x06
    22f2:	9f 81       	ldd	r25, Y+7	; 0x07
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	61 f0       	breq	.+24     	; 0x2312 <EXTI_u8SetSenseControl+0x144>
    22fa:	47 c0       	rjmp	.+142    	; 0x238a <EXTI_u8SetSenseControl+0x1bc>
    22fc:	2e 81       	ldd	r18, Y+6	; 0x06
    22fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2300:	23 30       	cpi	r18, 0x03	; 3
    2302:	31 05       	cpc	r19, r1
    2304:	21 f1       	breq	.+72     	; 0x234e <EXTI_u8SetSenseControl+0x180>
    2306:	8e 81       	ldd	r24, Y+6	; 0x06
    2308:	9f 81       	ldd	r25, Y+7	; 0x07
    230a:	84 30       	cpi	r24, 0x04	; 4
    230c:	91 05       	cpc	r25, r1
    230e:	71 f1       	breq	.+92     	; 0x236c <EXTI_u8SetSenseControl+0x19e>
    2310:	3c c0       	rjmp	.+120    	; 0x238a <EXTI_u8SetSenseControl+0x1bc>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    2312:	a5 e5       	ldi	r26, 0x55	; 85
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e5 e5       	ldi	r30, 0x55	; 85
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	84 60       	ori	r24, 0x04	; 4
    231e:	8c 93       	st	X, r24
    2320:	a5 e5       	ldi	r26, 0x55	; 85
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e5 e5       	ldi	r30, 0x55	; 85
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	88 60       	ori	r24, 0x08	; 8
    232c:	8c 93       	st	X, r24
    232e:	55 c0       	rjmp	.+170    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    2330:	a5 e5       	ldi	r26, 0x55	; 85
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e5 e5       	ldi	r30, 0x55	; 85
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	8b 7f       	andi	r24, 0xFB	; 251
    233c:	8c 93       	st	X, r24
    233e:	a5 e5       	ldi	r26, 0x55	; 85
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 e5       	ldi	r30, 0x55	; 85
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	88 60       	ori	r24, 0x08	; 8
    234a:	8c 93       	st	X, r24
    234c:	46 c0       	rjmp	.+140    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    234e:	a5 e5       	ldi	r26, 0x55	; 85
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e5 e5       	ldi	r30, 0x55	; 85
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8b 7f       	andi	r24, 0xFB	; 251
    235a:	8c 93       	st	X, r24
    235c:	a5 e5       	ldi	r26, 0x55	; 85
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e5 e5       	ldi	r30, 0x55	; 85
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	87 7f       	andi	r24, 0xF7	; 247
    2368:	8c 93       	st	X, r24
    236a:	37 c0       	rjmp	.+110    	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOGICAL_CHANGE:SET_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    236c:	a5 e5       	ldi	r26, 0x55	; 85
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e5 e5       	ldi	r30, 0x55	; 85
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	84 60       	ori	r24, 0x04	; 4
    2378:	8c 93       	st	X, r24
    237a:	a5 e5       	ldi	r26, 0x55	; 85
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e5 e5       	ldi	r30, 0x55	; 85
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	87 7f       	andi	r24, 0xF7	; 247
    2386:	8c 93       	st	X, r24
    2388:	28 c0       	rjmp	.+80     	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	25 c0       	rjmp	.+74     	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	case EXTI_u8INT2:
		switch(Copy_u8SenseControl)
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3d 83       	std	Y+5, r19	; 0x05
    2398:	2c 83       	std	Y+4, r18	; 0x04
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	91 05       	cpc	r25, r1
    23a2:	31 f0       	breq	.+12     	; 0x23b0 <EXTI_u8SetSenseControl+0x1e2>
    23a4:	2c 81       	ldd	r18, Y+4	; 0x04
    23a6:	3d 81       	ldd	r19, Y+5	; 0x05
    23a8:	22 30       	cpi	r18, 0x02	; 2
    23aa:	31 05       	cpc	r19, r1
    23ac:	49 f0       	breq	.+18     	; 0x23c0 <EXTI_u8SetSenseControl+0x1f2>
    23ae:	10 c0       	rjmp	.+32     	; 0x23d0 <EXTI_u8SetSenseControl+0x202>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUSCR,MCUSCR_ISC2);break;
    23b0:	a4 e5       	ldi	r26, 0x54	; 84
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e4 e5       	ldi	r30, 0x54	; 84
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	80 64       	ori	r24, 0x40	; 64
    23bc:	8c 93       	st	X, r24
    23be:	0d c0       	rjmp	.+26     	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUSCR,MCUSCR_ISC2);break;
    23c0:	a4 e5       	ldi	r26, 0x54	; 84
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e4 e5       	ldi	r30, 0x54	; 84
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8f 7b       	andi	r24, 0xBF	; 191
    23cc:	8c 93       	st	X, r24
    23ce:	05 c0       	rjmp	.+10     	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	default  :
		Local_u8ErrorState=NOK;break;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    23da:	89 81       	ldd	r24, Y+1	; 0x01
}
    23dc:	2b 96       	adiw	r28, 0x0b	; 11
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable(uint8 Copy_u8Int)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <EXTI_u8IntEnable+0x6>
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <EXTI_u8IntEnable+0x8>
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    23fc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3c 83       	std	Y+4, r19	; 0x04
    2406:	2b 83       	std	Y+3, r18	; 0x03
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	89 f0       	breq	.+34     	; 0x2434 <EXTI_u8IntEnable+0x46>
    2412:	2b 81       	ldd	r18, Y+3	; 0x03
    2414:	3c 81       	ldd	r19, Y+4	; 0x04
    2416:	22 30       	cpi	r18, 0x02	; 2
    2418:	31 05       	cpc	r19, r1
    241a:	a1 f0       	breq	.+40     	; 0x2444 <EXTI_u8IntEnable+0x56>
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	c1 f4       	brne	.+48     	; 0x2454 <EXTI_u8IntEnable+0x66>
	{
	case EXTI_u8INT0:SET_BIT(GICR,GICR_INT0);break;
    2424:	ab e5       	ldi	r26, 0x5B	; 91
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	eb e5       	ldi	r30, 0x5B	; 91
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	80 64       	ori	r24, 0x40	; 64
    2430:	8c 93       	st	X, r24
    2432:	12 c0       	rjmp	.+36     	; 0x2458 <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT1:SET_BIT(GICR,GICR_INT1);break;
    2434:	ab e5       	ldi	r26, 0x5B	; 91
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	eb e5       	ldi	r30, 0x5B	; 91
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	80 68       	ori	r24, 0x80	; 128
    2440:	8c 93       	st	X, r24
    2442:	0a c0       	rjmp	.+20     	; 0x2458 <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT2:SET_BIT(GICR,GICR_INT2);break;
    2444:	ab e5       	ldi	r26, 0x5B	; 91
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	eb e5       	ldi	r30, 0x5B	; 91
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	80 62       	ori	r24, 0x20	; 32
    2450:	8c 93       	st	X, r24
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <EXTI_u8IntEnable+0x6a>
	default  : Local_u8ErrorState=NOK;break;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2458:	89 81       	ldd	r24, Y+1	; 0x01
}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <EXTI_u8IntDisable>:

uint8 EXTI_u8IntDisable(uint8 Copy_u8Int)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <EXTI_u8IntDisable+0x6>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <EXTI_u8IntDisable+0x8>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    2476:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	3c 83       	std	Y+4, r19	; 0x04
    2480:	2b 83       	std	Y+3, r18	; 0x03
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	91 05       	cpc	r25, r1
    248a:	89 f0       	breq	.+34     	; 0x24ae <EXTI_u8IntDisable+0x46>
    248c:	2b 81       	ldd	r18, Y+3	; 0x03
    248e:	3c 81       	ldd	r19, Y+4	; 0x04
    2490:	22 30       	cpi	r18, 0x02	; 2
    2492:	31 05       	cpc	r19, r1
    2494:	a1 f0       	breq	.+40     	; 0x24be <EXTI_u8IntDisable+0x56>
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	c1 f4       	brne	.+48     	; 0x24ce <EXTI_u8IntDisable+0x66>
	{
	case EXTI_u8INT0:CLR_BIT(GICR,GICR_INT0);break;
    249e:	ab e5       	ldi	r26, 0x5B	; 91
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	eb e5       	ldi	r30, 0x5B	; 91
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 7b       	andi	r24, 0xBF	; 191
    24aa:	8c 93       	st	X, r24
    24ac:	12 c0       	rjmp	.+36     	; 0x24d2 <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT1:CLR_BIT(GICR,GICR_INT1);break;
    24ae:	ab e5       	ldi	r26, 0x5B	; 91
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	eb e5       	ldi	r30, 0x5B	; 91
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	8f 77       	andi	r24, 0x7F	; 127
    24ba:	8c 93       	st	X, r24
    24bc:	0a c0       	rjmp	.+20     	; 0x24d2 <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT2:CLR_BIT(GICR,GICR_INT2);break;
    24be:	ab e5       	ldi	r26, 0x5B	; 91
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	eb e5       	ldi	r30, 0x5B	; 91
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	8f 7d       	andi	r24, 0xDF	; 223
    24ca:	8c 93       	st	X, r24
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <EXTI_u8IntDisable+0x6a>
	default  : Local_u8ErrorState=NOK;break;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <EXTI_u8SetCallBack>:
uint8 EXTI_u8SetCallBack(uint8 Copy_u8Int,void (*Copy_pfFuncPtr)(void))
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <EXTI_u8SetCallBack+0x6>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <EXTI_u8SetCallBack+0x8>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	8a 83       	std	Y+2, r24	; 0x02
    24f0:	7c 83       	std	Y+4, r23	; 0x04
    24f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8StateError=OK;
    24f4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pfFuncPtr!=NULL)
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	99 f0       	breq	.+38     	; 0x2524 <EXTI_u8SetCallBack+0x42>
	{
		if(Copy_u8Int<=EXTI_u8INT2)
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	83 30       	cpi	r24, 0x03	; 3
    2502:	68 f4       	brcc	.+26     	; 0x251e <EXTI_u8SetCallBack+0x3c>
		{
			EXTI_pfIntFuncPtr[Copy_u8Int]=Copy_pfFuncPtr;
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	fc 01       	movw	r30, r24
    2510:	ee 53       	subi	r30, 0x3E	; 62
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <EXTI_u8SetCallBack+0x46>
		}
		else Local_u8StateError=NOK;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <EXTI_u8SetCallBack+0x46>
	}
	else Local_u8StateError=NULL_PTR_ERR;
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8StateError;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    2538:	1f 92       	push	r1
    253a:	0f 92       	push	r0
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	0f 92       	push	r0
    2540:	11 24       	eor	r1, r1
    2542:	2f 93       	push	r18
    2544:	3f 93       	push	r19
    2546:	4f 93       	push	r20
    2548:	5f 93       	push	r21
    254a:	6f 93       	push	r22
    254c:	7f 93       	push	r23
    254e:	8f 93       	push	r24
    2550:	9f 93       	push	r25
    2552:	af 93       	push	r26
    2554:	bf 93       	push	r27
    2556:	ef 93       	push	r30
    2558:	ff 93       	push	r31
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT0]!=NULL)
    2562:	80 91 c2 00 	lds	r24, 0x00C2
    2566:	90 91 c3 00 	lds	r25, 0x00C3
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	29 f0       	breq	.+10     	; 0x2578 <__vector_1+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT0]();
    256e:	e0 91 c2 00 	lds	r30, 0x00C2
    2572:	f0 91 c3 00 	lds	r31, 0x00C3
    2576:	09 95       	icall
	}
}
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	ff 91       	pop	r31
    257e:	ef 91       	pop	r30
    2580:	bf 91       	pop	r27
    2582:	af 91       	pop	r26
    2584:	9f 91       	pop	r25
    2586:	8f 91       	pop	r24
    2588:	7f 91       	pop	r23
    258a:	6f 91       	pop	r22
    258c:	5f 91       	pop	r21
    258e:	4f 91       	pop	r20
    2590:	3f 91       	pop	r19
    2592:	2f 91       	pop	r18
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	1f 90       	pop	r1
    259c:	18 95       	reti

0000259e <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    259e:	1f 92       	push	r1
    25a0:	0f 92       	push	r0
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	0f 92       	push	r0
    25a6:	11 24       	eor	r1, r1
    25a8:	2f 93       	push	r18
    25aa:	3f 93       	push	r19
    25ac:	4f 93       	push	r20
    25ae:	5f 93       	push	r21
    25b0:	6f 93       	push	r22
    25b2:	7f 93       	push	r23
    25b4:	8f 93       	push	r24
    25b6:	9f 93       	push	r25
    25b8:	af 93       	push	r26
    25ba:	bf 93       	push	r27
    25bc:	ef 93       	push	r30
    25be:	ff 93       	push	r31
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT1]!=NULL)
    25c8:	80 91 c4 00 	lds	r24, 0x00C4
    25cc:	90 91 c5 00 	lds	r25, 0x00C5
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	29 f0       	breq	.+10     	; 0x25de <__vector_2+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT1]();
    25d4:	e0 91 c4 00 	lds	r30, 0x00C4
    25d8:	f0 91 c5 00 	lds	r31, 0x00C5
    25dc:	09 95       	icall
	}

}
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	ff 91       	pop	r31
    25e4:	ef 91       	pop	r30
    25e6:	bf 91       	pop	r27
    25e8:	af 91       	pop	r26
    25ea:	9f 91       	pop	r25
    25ec:	8f 91       	pop	r24
    25ee:	7f 91       	pop	r23
    25f0:	6f 91       	pop	r22
    25f2:	5f 91       	pop	r21
    25f4:	4f 91       	pop	r20
    25f6:	3f 91       	pop	r19
    25f8:	2f 91       	pop	r18
    25fa:	0f 90       	pop	r0
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	0f 90       	pop	r0
    2600:	1f 90       	pop	r1
    2602:	18 95       	reti

00002604 <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    2604:	1f 92       	push	r1
    2606:	0f 92       	push	r0
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	0f 92       	push	r0
    260c:	11 24       	eor	r1, r1
    260e:	2f 93       	push	r18
    2610:	3f 93       	push	r19
    2612:	4f 93       	push	r20
    2614:	5f 93       	push	r21
    2616:	6f 93       	push	r22
    2618:	7f 93       	push	r23
    261a:	8f 93       	push	r24
    261c:	9f 93       	push	r25
    261e:	af 93       	push	r26
    2620:	bf 93       	push	r27
    2622:	ef 93       	push	r30
    2624:	ff 93       	push	r31
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT2]!=NULL)
    262e:	80 91 c6 00 	lds	r24, 0x00C6
    2632:	90 91 c7 00 	lds	r25, 0x00C7
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	29 f0       	breq	.+10     	; 0x2644 <__vector_3+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT2]();
    263a:	e0 91 c6 00 	lds	r30, 0x00C6
    263e:	f0 91 c7 00 	lds	r31, 0x00C7
    2642:	09 95       	icall
	}

}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	bf 91       	pop	r27
    264e:	af 91       	pop	r26
    2650:	9f 91       	pop	r25
    2652:	8f 91       	pop	r24
    2654:	7f 91       	pop	r23
    2656:	6f 91       	pop	r22
    2658:	5f 91       	pop	r21
    265a:	4f 91       	pop	r20
    265c:	3f 91       	pop	r19
    265e:	2f 91       	pop	r18
    2660:	0f 90       	pop	r0
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	0f 90       	pop	r0
    2666:	1f 90       	pop	r1
    2668:	18 95       	reti

0000266a <GIE_voidEnableGlobal>:
#include "STD_TYPES.h"
#include "GIE_reg.h"
#include "GIE_interface.h"

void GIE_voidEnableGlobal(void)
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	__asm  __volatile("SEI");
    2672:	78 94       	sei
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG,SREG_I);
	__asm  __volatile("CLI");
    2682:	f8 94       	cli
}
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <KPD_u8GetPressedKey>:
#include "KPD_prv.h"


/*required all row pins are input pulledup and cols pins are output high*/
uint8 KPD_u8GetPressedKey(void)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <KPD_u8GetPressedKey+0x6>
    2690:	00 d0       	rcall	.+0      	; 0x2692 <KPD_u8GetPressedKey+0x8>
    2692:	0f 92       	push	r0
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8PressedKey=KPD_u8NO_PRESSED_KEY_VAL;
    2698:	8f ef       	ldi	r24, 0xFF	; 255
    269a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ColCouter;
	uint8 Local_u8KeyState;
	static uint8 Local_u8ColArr[KPD_COLS_NUM]={KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN,KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
    269c:	19 82       	std	Y+1, r1	; 0x01
    269e:	5e c0       	rjmp	.+188    	; 0x275c <KPD_u8GetPressedKey+0xd2>
	{
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_LOW);
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	fc 01       	movw	r30, r24
    26a8:	ef 54       	subi	r30, 0x4F	; 79
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	90 81       	ld	r25, Z
    26ae:	83 e0       	ldi	r24, 0x03	; 3
    26b0:	69 2f       	mov	r22, r25
    26b2:	40 e0       	ldi	r20, 0x00	; 0
    26b4:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
		for(Local_u8RowCouter=0;Local_u8RowCouter<KPD_ROWS_NUM;Local_u8RowCouter++)
    26b8:	1a 82       	std	Y+2, r1	; 0x02
    26ba:	3d c0       	rjmp	.+122    	; 0x2736 <KPD_u8GetPressedKey+0xac>
		{
			DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	88 2f       	mov	r24, r24
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	fc 01       	movw	r30, r24
    26c4:	e3 55       	subi	r30, 0x53	; 83
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	90 81       	ld	r25, Z
    26ca:	9e 01       	movw	r18, r28
    26cc:	2c 5f       	subi	r18, 0xFC	; 252
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	69 2f       	mov	r22, r25
    26d4:	a9 01       	movw	r20, r18
    26d6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_u8GetPinValue>
			if(Local_u8KeyState==DIO_u8PIN_LOW)
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	88 23       	and	r24, r24
    26de:	41 f5       	brne	.+80     	; 0x2730 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowCouter][Local_u8ColCouter];
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	48 2f       	mov	r20, r24
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	ca 01       	movw	r24, r20
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	82 0f       	add	r24, r18
    26f8:	93 1f       	adc	r25, r19
    26fa:	fc 01       	movw	r30, r24
    26fc:	e3 56       	subi	r30, 0x63	; 99
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	8b 83       	std	Y+3, r24	; 0x03
    2704:	0f c0       	rjmp	.+30     	; 0x2724 <KPD_u8GetPressedKey+0x9a>
				/*wait until the key is released*/
				while(Local_u8KeyState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	fc 01       	movw	r30, r24
    270e:	e3 55       	subi	r30, 0x53	; 83
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	90 81       	ld	r25, Z
    2714:	9e 01       	movw	r18, r28
    2716:	2c 5f       	subi	r18, 0xFC	; 252
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	69 2f       	mov	r22, r25
    271e:	a9 01       	movw	r20, r18
    2720:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
			if(Local_u8KeyState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowCouter][Local_u8ColCouter];
				/*wait until the key is released*/
				while(Local_u8KeyState==DIO_u8PIN_LOW)
    2724:	8c 81       	ldd	r24, Y+4	; 0x04
    2726:	88 23       	and	r24, r24
    2728:	71 f3       	breq	.-36     	; 0x2706 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
				}
				return Local_u8PressedKey;
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	1c c0       	rjmp	.+56     	; 0x2768 <KPD_u8GetPressedKey+0xde>
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
	{
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_LOW);
		for(Local_u8RowCouter=0;Local_u8RowCouter<KPD_ROWS_NUM;Local_u8RowCouter++)
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	8f 5f       	subi	r24, 0xFF	; 255
    2734:	8a 83       	std	Y+2, r24	; 0x02
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	84 30       	cpi	r24, 0x04	; 4
    273a:	08 f4       	brcc	.+2      	; 0x273e <KPD_u8GetPressedKey+0xb4>
    273c:	bf cf       	rjmp	.-130    	; 0x26bc <KPD_u8GetPressedKey+0x32>
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_HIGH);
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	fc 01       	movw	r30, r24
    2746:	ef 54       	subi	r30, 0x4F	; 79
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	90 81       	ld	r25, Z
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	69 2f       	mov	r22, r25
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
	uint8 Local_u8ColCouter;
	uint8 Local_u8KeyState;
	static uint8 Local_u8ColArr[KPD_COLS_NUM]={KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN,KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	84 30       	cpi	r24, 0x04	; 4
    2760:	08 f4       	brcc	.+2      	; 0x2764 <KPD_u8GetPressedKey+0xda>
    2762:	9e cf       	rjmp	.-196    	; 0x26a0 <KPD_u8GetPressedKey+0x16>
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
}
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <LDR_u16GetAnalogmilVolt>:
#include "PORT_interface.h"
#include "LDR_cfg.h"
#include "ADC_interface.h"

uint16 LDR_u16GetAnalogmilVolt(uint8 Copy_u8ADCChannel)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	69 97       	sbiw	r28, 0x19	; 25
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	89 8f       	std	Y+25, r24	; 0x19
	uint16 Local_u16MappingObject;
	uint16 Local_u16Temp;
	Mapping_t Object1;
	Object1.MinInput=MIN_INPUT_VAL;
    2790:	1d 82       	std	Y+5, r1	; 0x05
    2792:	1e 82       	std	Y+6, r1	; 0x06
    2794:	1f 82       	std	Y+7, r1	; 0x07
    2796:	18 86       	std	Y+8, r1	; 0x08
	Object1.MinOutput=MIN_OUTPUT_VAL;
    2798:	1d 86       	std	Y+13, r1	; 0x0d
    279a:	1e 86       	std	Y+14, r1	; 0x0e
    279c:	1f 86       	std	Y+15, r1	; 0x0f
    279e:	18 8a       	std	Y+16, r1	; 0x10
	Object1.MaxInput=MAX_INPUT_VAL;
    27a0:	8f ef       	ldi	r24, 0xFF	; 255
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e0       	ldi	r26, 0x00	; 0
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	89 87       	std	Y+9, r24	; 0x09
    27aa:	9a 87       	std	Y+10, r25	; 0x0a
    27ac:	ab 87       	std	Y+11, r26	; 0x0b
    27ae:	bc 87       	std	Y+12, r27	; 0x0c
	Object1.MaxOutput=MAX_OUTPUT_VAL;
    27b0:	88 e8       	ldi	r24, 0x88	; 136
    27b2:	93 e1       	ldi	r25, 0x13	; 19
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	89 8b       	std	Y+17, r24	; 0x11
    27ba:	9a 8b       	std	Y+18, r25	; 0x12
    27bc:	ab 8b       	std	Y+19, r26	; 0x13
    27be:	bc 8b       	std	Y+20, r27	; 0x14
	ADC_u16StartConversionSynch(Copy_u8ADCChannel,(uint16*)&Local_u16Temp);
    27c0:	9e 01       	movw	r18, r28
    27c2:	2d 5f       	subi	r18, 0xFD	; 253
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	89 8d       	ldd	r24, Y+25	; 0x19
    27c8:	b9 01       	movw	r22, r18
    27ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u16StartConversionSynch>
	Object1.InputValue=Local_u16Temp;
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	9c 81       	ldd	r25, Y+4	; 0x04
    27d2:	cc 01       	movw	r24, r24
    27d4:	a0 e0       	ldi	r26, 0x00	; 0
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	8d 8b       	std	Y+21, r24	; 0x15
    27da:	9e 8b       	std	Y+22, r25	; 0x16
    27dc:	af 8b       	std	Y+23, r26	; 0x17
    27de:	b8 8f       	std	Y+24, r27	; 0x18
	Local_u16MappingObject=ADC_s32Mapping(&Object1);
    27e0:	ce 01       	movw	r24, r28
    27e2:	05 96       	adiw	r24, 0x05	; 5
    27e4:	0e 94 0a 07 	call	0xe14	; 0xe14 <ADC_s32Mapping>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16MappingObject;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27f4:	69 96       	adiw	r28, 0x19	; 25
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <LM35_u16GetTemp>:
#include "ADC_interface.h"
#include "LM35_interface.h"


uint16 LM35_u16GetTemp(uint8 Copy_u8ADCChannel)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	00 d0       	rcall	.+0      	; 0x280c <LM35_u16GetTemp+0x6>
    280c:	00 d0       	rcall	.+0      	; 0x280e <LM35_u16GetTemp+0x8>
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8AnalogReading;
	uint16 Local_u16TempReading;
	ADC_u16StartConversionSynch(Copy_u8ADCChannel,(uint16*)&Local_u8AnalogReading);
    2814:	9e 01       	movw	r18, r28
    2816:	2d 5f       	subi	r18, 0xFD	; 253
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	b9 01       	movw	r22, r18
    281e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u16StartConversionSynch>
	Local_u16TempReading=(uint16)((uint32)Local_u8AnalogReading*500ul/256ul);
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 e0       	ldi	r26, 0x00	; 0
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	24 ef       	ldi	r18, 0xF4	; 244
    282e:	31 e0       	ldi	r19, 0x01	; 1
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 af 19 	call	0x335e	; 0x335e <__mulsi3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	89 2f       	mov	r24, r25
    2842:	9a 2f       	mov	r25, r26
    2844:	ab 2f       	mov	r26, r27
    2846:	bb 27       	eor	r27, r27
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01
	return 	Local_u16TempReading;
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_prv.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    2866:	ea e3       	ldi	r30, 0x3A	; 58
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	87 e0       	ldi	r24, 0x07	; 7
    286c:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    286e:	e7 e3       	ldi	r30, 0x37	; 55
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	83 ef       	ldi	r24, 0xF3	; 243
    2874:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    2876:	e4 e3       	ldi	r30, 0x34	; 52
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    287e:	e1 e3       	ldi	r30, 0x31	; 49
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 ef       	ldi	r24, 0xF0	; 240
    2884:	80 83       	st	Z, r24

	PORTA=PORTA_INITIAL_VALUE;
    2886:	eb e3       	ldi	r30, 0x3B	; 59
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    288c:	e8 e3       	ldi	r30, 0x38	; 56
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	84 e0       	ldi	r24, 0x04	; 4
    2892:	80 83       	st	Z, r24
	PORTC=PORTC_INITIAL_VALUE;
    2894:	e5 e3       	ldi	r30, 0x35	; 53
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    289a:	e2 e3       	ldi	r30, 0x32	; 50
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	80 83       	st	Z, r24


}
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <SSD_u8SetNumber>:

uint8 SSD_u8Arr[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE}; //seven segment values


uint8 SSD_u8SetNumber(const SSD_t* Copy_SSDObject,uint8 Copy_u8Number)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <SSD_u8SetNumber+0x6>
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <SSD_u8SetNumber+0x8>
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9b 83       	std	Y+3, r25	; 0x03
    28b6:	8a 83       	std	Y+2, r24	; 0x02
    28b8:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8StateError=OK;
    28ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSDObject!=NULL&&Copy_u8Number<=9)
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <SSD_u8SetNumber+0x1e>
    28c4:	45 c0       	rjmp	.+138    	; 0x2950 <SSD_u8SetNumber+0xa8>
    28c6:	8c 81       	ldd	r24, Y+4	; 0x04
    28c8:	8a 30       	cpi	r24, 0x0A	; 10
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <SSD_u8SetNumber+0x26>
    28cc:	41 c0       	rjmp	.+130    	; 0x2950 <SSD_u8SetNumber+0xa8>
	{
		if(Copy_SSDObject->Type==ANODE)
    28ce:	ea 81       	ldd	r30, Y+2	; 0x02
    28d0:	fb 81       	ldd	r31, Y+3	; 0x03
    28d2:	80 81       	ld	r24, Z
    28d4:	88 23       	and	r24, r24
    28d6:	d9 f4       	brne	.+54     	; 0x290e <SSD_u8SetNumber+0x66>
		{
			DIO_u8SetPortValue(Copy_SSDObject->Port,~SSD_u8Arr[Copy_u8Number]);
    28d8:	ea 81       	ldd	r30, Y+2	; 0x02
    28da:	fb 81       	ldd	r31, Y+3	; 0x03
    28dc:	21 81       	ldd	r18, Z+1	; 0x01
    28de:	8c 81       	ldd	r24, Y+4	; 0x04
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	fc 01       	movw	r30, r24
    28e6:	eb 54       	subi	r30, 0x4B	; 75
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	98 2f       	mov	r25, r24
    28ee:	90 95       	com	r25
    28f0:	82 2f       	mov	r24, r18
    28f2:	69 2f       	mov	r22, r25
    28f4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
			DIO_u8SetPinValue(Copy_SSDObject->EnablePort,Copy_SSDObject->EnablePin,DIO_u8PIN_HIGH);
    28f8:	ea 81       	ldd	r30, Y+2	; 0x02
    28fa:	fb 81       	ldd	r31, Y+3	; 0x03
    28fc:	83 81       	ldd	r24, Z+3	; 0x03
    28fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2900:	fb 81       	ldd	r31, Y+3	; 0x03
    2902:	94 81       	ldd	r25, Z+4	; 0x04
    2904:	69 2f       	mov	r22, r25
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
    290c:	23 c0       	rjmp	.+70     	; 0x2954 <SSD_u8SetNumber+0xac>
		}
		else if(Copy_SSDObject->Type==CATHODE)
    290e:	ea 81       	ldd	r30, Y+2	; 0x02
    2910:	fb 81       	ldd	r31, Y+3	; 0x03
    2912:	80 81       	ld	r24, Z
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	c9 f4       	brne	.+50     	; 0x294a <SSD_u8SetNumber+0xa2>
		{
			DIO_u8SetPortValue(Copy_SSDObject->Port,SSD_u8Arr[Copy_u8Number]);
    2918:	ea 81       	ldd	r30, Y+2	; 0x02
    291a:	fb 81       	ldd	r31, Y+3	; 0x03
    291c:	21 81       	ldd	r18, Z+1	; 0x01
    291e:	8c 81       	ldd	r24, Y+4	; 0x04
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	fc 01       	movw	r30, r24
    2926:	eb 54       	subi	r30, 0x4B	; 75
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	90 81       	ld	r25, Z
    292c:	82 2f       	mov	r24, r18
    292e:	69 2f       	mov	r22, r25
    2930:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
			DIO_u8SetPinValue(Copy_SSDObject->EnablePort,Copy_SSDObject->EnablePin,DIO_u8PIN_LOW);
    2934:	ea 81       	ldd	r30, Y+2	; 0x02
    2936:	fb 81       	ldd	r31, Y+3	; 0x03
    2938:	83 81       	ldd	r24, Z+3	; 0x03
    293a:	ea 81       	ldd	r30, Y+2	; 0x02
    293c:	fb 81       	ldd	r31, Y+3	; 0x03
    293e:	94 81       	ldd	r25, Z+4	; 0x04
    2940:	69 2f       	mov	r22, r25
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <DIO_u8SetPinValue>
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <SSD_u8SetNumber+0xac>
		}
		else
		{
			Local_u8StateError=NOK;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <SSD_u8SetNumber+0xac>
		}
		
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8StateError;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
		
}
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <main>:
#include "LM35_interface.h"
#define TRIALS 3u
void Reset(void);
uint8 Local_u8Reset=0;
void main(void)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	cb 56       	subi	r28, 0x6B	; 107
    296e:	d0 40       	sbci	r29, 0x00	; 0
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    297a:	0e 94 2f 14 	call	0x285e	; 0x285e <PORT_voidInit>
	CLCD_voidInit();
    297e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <CLCD_voidInit>
	ADC_voidInit();
    2982:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	GIE_voidEnableGlobal();
    2986:	0e 94 35 13 	call	0x266a	; 0x266a <GIE_voidEnableGlobal>
	EXTI_voidInit();
    298a:	0e 94 a8 10 	call	0x2150	; 0x2150 <EXTI_voidInit>
	EXTI_u8SetCallBack(EXTI_u8INT2,&Reset);
    298e:	25 ea       	ldi	r18, 0xA5	; 165
    2990:	39 e1       	ldi	r19, 0x19	; 25
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	b9 01       	movw	r22, r18
    2996:	0e 94 71 12 	call	0x24e2	; 0x24e2 <EXTI_u8SetCallBack>
	DCM_t DCM_Object={DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN1};
    299a:	ce 01       	movw	r24, r28
    299c:	80 5b       	subi	r24, 0xB0	; 176
    299e:	9f 4f       	sbci	r25, 0xFF	; 255
    29a0:	a9 96       	adiw	r28, 0x29	; 41
    29a2:	9f af       	std	Y+63, r25	; 0x3f
    29a4:	8e af       	std	Y+62, r24	; 0x3e
    29a6:	a9 97       	sbiw	r28, 0x29	; 41
    29a8:	8f eb       	ldi	r24, 0xBF	; 191
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	ab 96       	adiw	r28, 0x2b	; 43
    29ae:	9f af       	std	Y+63, r25	; 0x3f
    29b0:	8e af       	std	Y+62, r24	; 0x3e
    29b2:	ab 97       	sbiw	r28, 0x2b	; 43
    29b4:	93 e0       	ldi	r25, 0x03	; 3
    29b6:	ac 96       	adiw	r28, 0x2c	; 44
    29b8:	9f af       	std	Y+63, r25	; 0x3f
    29ba:	ac 97       	sbiw	r28, 0x2c	; 44
    29bc:	ab 96       	adiw	r28, 0x2b	; 43
    29be:	ee ad       	ldd	r30, Y+62	; 0x3e
    29c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    29c2:	ab 97       	sbiw	r28, 0x2b	; 43
    29c4:	00 80       	ld	r0, Z
    29c6:	ab 96       	adiw	r28, 0x2b	; 43
    29c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    29ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    29cc:	ab 97       	sbiw	r28, 0x2b	; 43
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	ab 96       	adiw	r28, 0x2b	; 43
    29d2:	9f af       	std	Y+63, r25	; 0x3f
    29d4:	8e af       	std	Y+62, r24	; 0x3e
    29d6:	ab 97       	sbiw	r28, 0x2b	; 43
    29d8:	a9 96       	adiw	r28, 0x29	; 41
    29da:	ee ad       	ldd	r30, Y+62	; 0x3e
    29dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    29de:	a9 97       	sbiw	r28, 0x29	; 41
    29e0:	00 82       	st	Z, r0
    29e2:	a9 96       	adiw	r28, 0x29	; 41
    29e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    29e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    29e8:	a9 97       	sbiw	r28, 0x29	; 41
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	a9 96       	adiw	r28, 0x29	; 41
    29ee:	9f af       	std	Y+63, r25	; 0x3f
    29f0:	8e af       	std	Y+62, r24	; 0x3e
    29f2:	a9 97       	sbiw	r28, 0x29	; 41
    29f4:	ac 96       	adiw	r28, 0x2c	; 44
    29f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    29f8:	ac 97       	sbiw	r28, 0x2c	; 44
    29fa:	91 50       	subi	r25, 0x01	; 1
    29fc:	ac 96       	adiw	r28, 0x2c	; 44
    29fe:	9f af       	std	Y+63, r25	; 0x3f
    2a00:	ac 97       	sbiw	r28, 0x2c	; 44
    2a02:	ac 96       	adiw	r28, 0x2c	; 44
    2a04:	ef ad       	ldd	r30, Y+63	; 0x3f
    2a06:	ac 97       	sbiw	r28, 0x2c	; 44
    2a08:	ee 23       	and	r30, r30
    2a0a:	c1 f6       	brne	.-80     	; 0x29bc <main+0x58>
	uint8 Local_u8PressedKey;
	uint8 Local_u8IDArr[10];
	uint8 Local_u8PassArr[10];
	uint8 Local_u8IDLen=0;
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e2 5b       	subi	r30, 0xB2	; 178
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	10 82       	st	Z, r1
	uint8 Local_u8IDCounter=0;
    2a14:	fe 01       	movw	r30, r28
    2a16:	e3 5b       	subi	r30, 0xB3	; 179
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	10 82       	st	Z, r1
	uint8 Local_u8PassLen=0;
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e4 5b       	subi	r30, 0xB4	; 180
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	10 82       	st	Z, r1
	uint8 Local_u8PassCounter=0;
    2a24:	fe 01       	movw	r30, r28
    2a26:	e5 5b       	subi	r30, 0xB5	; 181
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	10 82       	st	Z, r1
	uint32 Local_u8EnteredID;
	uint32 Local_u8EnteredPass;
	uint32 Local_u8RealID=12;
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ff 96       	adiw	r30, 0x3f	; 63
    2a30:	8c e0       	ldi	r24, 0x0C	; 12
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e0       	ldi	r26, 0x00	; 0
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	80 83       	st	Z, r24
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	a2 83       	std	Z+2, r26	; 0x02
    2a3e:	b3 83       	std	Z+3, r27	; 0x03
	uint32 Local_u8RealPass=12;
    2a40:	8c e0       	ldi	r24, 0x0C	; 12
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e0       	ldi	r26, 0x00	; 0
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	8b af       	std	Y+59, r24	; 0x3b
    2a4a:	9c af       	std	Y+60, r25	; 0x3c
    2a4c:	ad af       	std	Y+61, r26	; 0x3d
    2a4e:	be af       	std	Y+62, r27	; 0x3e
	uint16 Local_u16Temp;
	uint16 Local_u16Light;
	uint8 Local_u8Trials=TRIALS;
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	8e ab       	std	Y+54, r24	; 0x36
	uint8 Local_u8indicator=0;
    2a54:	1d aa       	std	Y+53, r1	; 0x35
	CLCD_u8SendString("WELCOME!");
    2a56:	80 e6       	ldi	r24, 0x60	; 96
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_u8SendString>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	aa e7       	ldi	r26, 0x7A	; 122
    2a64:	b4 e4       	ldi	r27, 0x44	; 68
    2a66:	89 ab       	std	Y+49, r24	; 0x31
    2a68:	9a ab       	std	Y+50, r25	; 0x32
    2a6a:	ab ab       	std	Y+51, r26	; 0x33
    2a6c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a70:	7a a9       	ldd	r23, Y+50	; 0x32
    2a72:	8b a9       	ldd	r24, Y+51	; 0x33
    2a74:	9c a9       	ldd	r25, Y+52	; 0x34
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a e7       	ldi	r20, 0x7A	; 122
    2a7c:	55 e4       	ldi	r21, 0x45	; 69
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8d a7       	std	Y+45, r24	; 0x2d
    2a88:	9e a7       	std	Y+46, r25	; 0x2e
    2a8a:	af a7       	std	Y+47, r26	; 0x2f
    2a8c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2a8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a90:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a94:	98 a9       	ldd	r25, Y+48	; 0x30
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <main+0x14c>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9c a7       	std	Y+44, r25	; 0x2c
    2aac:	8b a7       	std	Y+43, r24	; 0x2b
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <main+0x1ca>
	else if (__tmp > 65535)
    2ab0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ab2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <main+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aca:	7a a9       	ldd	r23, Y+50	; 0x32
    2acc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ace:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9c a7       	std	Y+44, r25	; 0x2c
    2aee:	8b a7       	std	Y+43, r24	; 0x2b
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <main+0x1ac>
    2af2:	80 e9       	ldi	r24, 0x90	; 144
    2af4:	91 e0       	ldi	r25, 0x01	; 1
    2af6:	9a a7       	std	Y+42, r25	; 0x2a
    2af8:	89 a7       	std	Y+41, r24	; 0x29
    2afa:	89 a5       	ldd	r24, Y+41	; 0x29
    2afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <main+0x19a>
    2b02:	9a a7       	std	Y+42, r25	; 0x2a
    2b04:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b08:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	9c a7       	std	Y+44, r25	; 0x2c
    2b0e:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <main+0x18e>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <main+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b1c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b20:	98 a9       	ldd	r25, Y+48	; 0x30
    2b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9c a7       	std	Y+44, r25	; 0x2c
    2b2c:	8b a7       	std	Y+43, r24	; 0x2b
    2b2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b30:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b32:	98 a7       	std	Y+40, r25	; 0x28
    2b34:	8f a3       	std	Y+39, r24	; 0x27
    2b36:	8f a1       	ldd	r24, Y+39	; 0x27
    2b38:	98 a5       	ldd	r25, Y+40	; 0x28
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <main+0x1d6>
    2b3e:	98 a7       	std	Y+40, r25	; 0x28
    2b40:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1000);
	while(1)
	{
		if(Local_u8Trials!=0)
    2b42:	8e a9       	ldd	r24, Y+54	; 0x36
    2b44:	88 23       	and	r24, r24
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <main+0x1e6>
    2b48:	4a c3       	rjmp	.+1684   	; 0x31de <main+0x87a>
		{
		Local_u8EnteredPass=0;
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 5b       	subi	r30, 0xBD	; 189
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	10 82       	st	Z, r1
    2b52:	11 82       	std	Z+1, r1	; 0x01
    2b54:	12 82       	std	Z+2, r1	; 0x02
    2b56:	13 82       	std	Z+3, r1	; 0x03
		Local_u8EnteredID=0;
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e9 5b       	subi	r30, 0xB9	; 185
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	10 82       	st	Z, r1
    2b60:	11 82       	std	Z+1, r1	; 0x01
    2b62:	12 82       	std	Z+2, r1	; 0x02
    2b64:	13 82       	std	Z+3, r1	; 0x03
		DCM_u8Stop(&DCM_Object);
    2b66:	ce 01       	movw	r24, r28
    2b68:	80 5b       	subi	r24, 0xB0	; 176
    2b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DCM_u8Stop>
		DIO_u8SetPortValue(DIO_u8PORTC,0);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
		Local_u8Reset=0;
    2b78:	10 92 c8 00 	sts	0x00C8, r1
		Local_u8IDLen=0;
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e2 5b       	subi	r30, 0xB2	; 178
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	10 82       	st	Z, r1
		Local_u8PassLen=0;
    2b84:	fe 01       	movw	r30, r28
    2b86:	e4 5b       	subi	r30, 0xB4	; 180
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	10 82       	st	Z, r1
		CLCD_voidSendComd(1);
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
		Local_u8PressedKey=KPD_u8GetPressedKey();
    2b92:	0e 94 45 13 	call	0x268a	; 0x268a <KPD_u8GetPressedKey>
    2b96:	fe 01       	movw	r30, r28
    2b98:	e1 5b       	subi	r30, 0xB1	; 177
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 83       	st	Z, r24
		CLCD_u8SendString("ID:");
    2b9e:	89 e6       	ldi	r24, 0x69	; 105
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_u8SendString>
    2ba6:	36 c0       	rjmp	.+108    	; 0x2c14 <main+0x2b0>
		while(Local_u8PressedKey!='e'&&Local_u8Reset==0)
		{
		if(Local_u8PressedKey!=0xff)
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e1 5b       	subi	r30, 0xB1	; 177
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb2:	51 f1       	breq	.+84     	; 0x2c08 <main+0x2a4>
		{
			while(KPD_u8GetPressedKey()!=0xff);
    2bb4:	0e 94 45 13 	call	0x268a	; 0x268a <KPD_u8GetPressedKey>
    2bb8:	8f 3f       	cpi	r24, 0xFF	; 255
    2bba:	e1 f7       	brne	.-8      	; 0x2bb4 <main+0x250>
			CLCD_voidSendNumber(Local_u8PressedKey);
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e1 5b       	subi	r30, 0xB1	; 177
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 2f       	mov	r24, r24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 26 09 	call	0x124c	; 0x124c <CLCD_voidSendNumber>
			Local_u8IDArr[Local_u8IDLen]=Local_u8PressedKey;
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e2 5b       	subi	r30, 0xB2	; 178
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	ce 01       	movw	r24, r28
    2be2:	8d 5a       	subi	r24, 0xAD	; 173
    2be4:	9f 4f       	sbci	r25, 0xFF	; 255
    2be6:	dc 01       	movw	r26, r24
    2be8:	a2 0f       	add	r26, r18
    2bea:	b3 1f       	adc	r27, r19
    2bec:	fe 01       	movw	r30, r28
    2bee:	e1 5b       	subi	r30, 0xB1	; 177
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8c 93       	st	X, r24
			Local_u8IDLen++;
    2bf6:	de 01       	movw	r26, r28
    2bf8:	a2 5b       	subi	r26, 0xB2	; 178
    2bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e2 5b       	subi	r30, 0xB2	; 178
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	8c 93       	st	X, r24
		}
		Local_u8PressedKey=KPD_u8GetPressedKey();
    2c08:	0e 94 45 13 	call	0x268a	; 0x268a <KPD_u8GetPressedKey>
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e1 5b       	subi	r30, 0xB1	; 177
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 83       	st	Z, r24
		Local_u8IDLen=0;
		Local_u8PassLen=0;
		CLCD_voidSendComd(1);
		Local_u8PressedKey=KPD_u8GetPressedKey();
		CLCD_u8SendString("ID:");
		while(Local_u8PressedKey!='e'&&Local_u8Reset==0)
    2c14:	fe 01       	movw	r30, r28
    2c16:	e1 5b       	subi	r30, 0xB1	; 177
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	85 36       	cpi	r24, 0x65	; 101
    2c1e:	29 f0       	breq	.+10     	; 0x2c2a <main+0x2c6>
    2c20:	80 91 c8 00 	lds	r24, 0x00C8
    2c24:	88 23       	and	r24, r24
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <main+0x2c6>
    2c28:	bf cf       	rjmp	.-130    	; 0x2ba8 <main+0x244>
			Local_u8IDArr[Local_u8IDLen]=Local_u8PressedKey;
			Local_u8IDLen++;
		}
		Local_u8PressedKey=KPD_u8GetPressedKey();
		}
		CLCD_voidSendComd(1);
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
		Local_u8PressedKey=KPD_u8GetPressedKey();
    2c30:	0e 94 45 13 	call	0x268a	; 0x268a <KPD_u8GetPressedKey>
    2c34:	fe 01       	movw	r30, r28
    2c36:	e1 5b       	subi	r30, 0xB1	; 177
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 83       	st	Z, r24
		CLCD_u8SendString("Pass:");
    2c3c:	8d e6       	ldi	r24, 0x6D	; 109
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_u8SendString>
    2c44:	3c c0       	rjmp	.+120    	; 0x2cbe <main+0x35a>
		while(Local_u8PressedKey!='e'&&Local_u8Reset==0)
		{
		if(Local_u8PressedKey!=0xff)
    2c46:	fe 01       	movw	r30, r28
    2c48:	e1 5b       	subi	r30, 0xB1	; 177
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	80 81       	ld	r24, Z
    2c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c50:	81 f1       	breq	.+96     	; 0x2cb2 <main+0x34e>
		{
			while(KPD_u8GetPressedKey()!=0xff);
    2c52:	0e 94 45 13 	call	0x268a	; 0x268a <KPD_u8GetPressedKey>
    2c56:	8f 3f       	cpi	r24, 0xFF	; 255
    2c58:	e1 f7       	brne	.-8      	; 0x2c52 <main+0x2ee>
			CLCD_voidSendNumber(Local_u8PressedKey);
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e1 5b       	subi	r30, 0xB1	; 177
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a0 e0       	ldi	r26, 0x00	; 0
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 26 09 	call	0x124c	; 0x124c <CLCD_voidSendNumber>
			Local_u8PassArr[Local_u8PassLen]=Local_u8PressedKey;
    2c72:	fe 01       	movw	r30, r28
    2c74:	e4 5b       	subi	r30, 0xB4	; 180
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	80 81       	ld	r24, Z
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	ce 01       	movw	r24, r28
    2c80:	83 5a       	subi	r24, 0xA3	; 163
    2c82:	9f 4f       	sbci	r25, 0xFF	; 255
    2c84:	dc 01       	movw	r26, r24
    2c86:	a2 0f       	add	r26, r18
    2c88:	b3 1f       	adc	r27, r19
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e1 5b       	subi	r30, 0xB1	; 177
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	8c 93       	st	X, r24
			Local_u8PassLen++;
    2c94:	de 01       	movw	r26, r28
    2c96:	a4 5b       	subi	r26, 0xB4	; 180
    2c98:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e4 5b       	subi	r30, 0xB4	; 180
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	8c 93       	st	X, r24
			Local_u8PressedKey=KPD_u8GetPressedKey();
    2ca6:	0e 94 45 13 	call	0x268a	; 0x268a <KPD_u8GetPressedKey>
    2caa:	fe 01       	movw	r30, r28
    2cac:	e1 5b       	subi	r30, 0xB1	; 177
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 83       	st	Z, r24
		}
		Local_u8PressedKey=KPD_u8GetPressedKey();
    2cb2:	0e 94 45 13 	call	0x268a	; 0x268a <KPD_u8GetPressedKey>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e1 5b       	subi	r30, 0xB1	; 177
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 83       	st	Z, r24
		Local_u8PressedKey=KPD_u8GetPressedKey();
		}
		CLCD_voidSendComd(1);
		Local_u8PressedKey=KPD_u8GetPressedKey();
		CLCD_u8SendString("Pass:");
		while(Local_u8PressedKey!='e'&&Local_u8Reset==0)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e1 5b       	subi	r30, 0xB1	; 177
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	85 36       	cpi	r24, 0x65	; 101
    2cc8:	29 f0       	breq	.+10     	; 0x2cd4 <main+0x370>
    2cca:	80 91 c8 00 	lds	r24, 0x00C8
    2cce:	88 23       	and	r24, r24
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <main+0x370>
    2cd2:	b9 cf       	rjmp	.-142    	; 0x2c46 <main+0x2e2>
			Local_u8PassLen++;
			Local_u8PressedKey=KPD_u8GetPressedKey();
		}
		Local_u8PressedKey=KPD_u8GetPressedKey();
		}
		CLCD_voidSendComd(1);
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
		if(Local_u8IDLen>0)Local_u8EnteredID=Local_u8IDArr[0];
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e2 5b       	subi	r30, 0xB2	; 178
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	88 23       	and	r24, r24
    2ce4:	79 f0       	breq	.+30     	; 0x2d04 <main+0x3a0>
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	ed 5a       	subi	r30, 0xAD	; 173
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	80 81       	ld	r24, Z
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e9 5b       	subi	r30, 0xB9	; 185
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	88 2f       	mov	r24, r24
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a0 e0       	ldi	r26, 0x00	; 0
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	80 83       	st	Z, r24
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	a2 83       	std	Z+2, r26	; 0x02
    2d02:	b3 83       	std	Z+3, r27	; 0x03
		for(Local_u8IDCounter=1;Local_u8IDCounter<Local_u8IDLen;Local_u8IDCounter++)
    2d04:	fe 01       	movw	r30, r28
    2d06:	e3 5b       	subi	r30, 0xB3	; 179
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	80 83       	st	Z, r24
    2d0e:	36 c0       	rjmp	.+108    	; 0x2d7c <main+0x418>
		{
			Local_u8EnteredID=Local_u8EnteredID*10+Local_u8IDArr[Local_u8IDCounter];
    2d10:	fe 01       	movw	r30, r28
    2d12:	e9 5b       	subi	r30, 0xB9	; 185
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 81       	ld	r24, Z
    2d18:	91 81       	ldd	r25, Z+1	; 0x01
    2d1a:	a2 81       	ldd	r26, Z+2	; 0x02
    2d1c:	b3 81       	ldd	r27, Z+3	; 0x03
    2d1e:	2a e0       	ldi	r18, 0x0A	; 10
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 af 19 	call	0x335e	; 0x335e <__mulsi3>
    2d2e:	ab 01       	movw	r20, r22
    2d30:	bc 01       	movw	r22, r24
    2d32:	fe 01       	movw	r30, r28
    2d34:	e3 5b       	subi	r30, 0xB3	; 179
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	ce 01       	movw	r24, r28
    2d40:	8d 5a       	subi	r24, 0xAD	; 173
    2d42:	9f 4f       	sbci	r25, 0xFF	; 255
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	a0 e0       	ldi	r26, 0x00	; 0
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	fe 01       	movw	r30, r28
    2d56:	e9 5b       	subi	r30, 0xB9	; 185
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	84 0f       	add	r24, r20
    2d5c:	95 1f       	adc	r25, r21
    2d5e:	a6 1f       	adc	r26, r22
    2d60:	b7 1f       	adc	r27, r23
    2d62:	80 83       	st	Z, r24
    2d64:	91 83       	std	Z+1, r25	; 0x01
    2d66:	a2 83       	std	Z+2, r26	; 0x02
    2d68:	b3 83       	std	Z+3, r27	; 0x03
		}
		Local_u8PressedKey=KPD_u8GetPressedKey();
		}
		CLCD_voidSendComd(1);
		if(Local_u8IDLen>0)Local_u8EnteredID=Local_u8IDArr[0];
		for(Local_u8IDCounter=1;Local_u8IDCounter<Local_u8IDLen;Local_u8IDCounter++)
    2d6a:	de 01       	movw	r26, r28
    2d6c:	a3 5b       	subi	r26, 0xB3	; 179
    2d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d70:	fe 01       	movw	r30, r28
    2d72:	e3 5b       	subi	r30, 0xB3	; 179
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	8f 5f       	subi	r24, 0xFF	; 255
    2d7a:	8c 93       	st	X, r24
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e3 5b       	subi	r30, 0xB3	; 179
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	de 01       	movw	r26, r28
    2d84:	a2 5b       	subi	r26, 0xB2	; 178
    2d86:	bf 4f       	sbci	r27, 0xFF	; 255
    2d88:	90 81       	ld	r25, Z
    2d8a:	8c 91       	ld	r24, X
    2d8c:	98 17       	cp	r25, r24
    2d8e:	08 f4       	brcc	.+2      	; 0x2d92 <main+0x42e>
    2d90:	bf cf       	rjmp	.-130    	; 0x2d10 <main+0x3ac>
		{
			Local_u8EnteredID=Local_u8EnteredID*10+Local_u8IDArr[Local_u8IDCounter];
		}
		if(Local_u8PassLen>0)Local_u8EnteredPass=Local_u8PassArr[0];
    2d92:	fe 01       	movw	r30, r28
    2d94:	e4 5b       	subi	r30, 0xB4	; 180
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 81       	ld	r24, Z
    2d9a:	88 23       	and	r24, r24
    2d9c:	79 f0       	breq	.+30     	; 0x2dbc <main+0x458>
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e3 5a       	subi	r30, 0xA3	; 163
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	fe 01       	movw	r30, r28
    2da8:	ed 5b       	subi	r30, 0xBD	; 189
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	a0 e0       	ldi	r26, 0x00	; 0
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	80 83       	st	Z, r24
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	a2 83       	std	Z+2, r26	; 0x02
    2dba:	b3 83       	std	Z+3, r27	; 0x03
		for(Local_u8PassCounter=1;Local_u8PassCounter<Local_u8PassLen;Local_u8PassCounter++)
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e5 5b       	subi	r30, 0xB5	; 181
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 83       	st	Z, r24
    2dc6:	36 c0       	rjmp	.+108    	; 0x2e34 <main+0x4d0>
		{
			Local_u8EnteredPass=Local_u8EnteredPass*10+Local_u8PassArr[Local_u8PassCounter];
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ed 5b       	subi	r30, 0xBD	; 189
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	a2 81       	ldd	r26, Z+2	; 0x02
    2dd4:	b3 81       	ldd	r27, Z+3	; 0x03
    2dd6:	2a e0       	ldi	r18, 0x0A	; 10
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 af 19 	call	0x335e	; 0x335e <__mulsi3>
    2de6:	ab 01       	movw	r20, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	fe 01       	movw	r30, r28
    2dec:	e5 5b       	subi	r30, 0xB5	; 181
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 81       	ld	r24, Z
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	ce 01       	movw	r24, r28
    2df8:	83 5a       	subi	r24, 0xA3	; 163
    2dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	e2 0f       	add	r30, r18
    2e00:	f3 1f       	adc	r31, r19
    2e02:	80 81       	ld	r24, Z
    2e04:	88 2f       	mov	r24, r24
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a0 e0       	ldi	r26, 0x00	; 0
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ed 5b       	subi	r30, 0xBD	; 189
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	84 0f       	add	r24, r20
    2e14:	95 1f       	adc	r25, r21
    2e16:	a6 1f       	adc	r26, r22
    2e18:	b7 1f       	adc	r27, r23
    2e1a:	80 83       	st	Z, r24
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	a2 83       	std	Z+2, r26	; 0x02
    2e20:	b3 83       	std	Z+3, r27	; 0x03
		for(Local_u8IDCounter=1;Local_u8IDCounter<Local_u8IDLen;Local_u8IDCounter++)
		{
			Local_u8EnteredID=Local_u8EnteredID*10+Local_u8IDArr[Local_u8IDCounter];
		}
		if(Local_u8PassLen>0)Local_u8EnteredPass=Local_u8PassArr[0];
		for(Local_u8PassCounter=1;Local_u8PassCounter<Local_u8PassLen;Local_u8PassCounter++)
    2e22:	de 01       	movw	r26, r28
    2e24:	a5 5b       	subi	r26, 0xB5	; 181
    2e26:	bf 4f       	sbci	r27, 0xFF	; 255
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e5 5b       	subi	r30, 0xB5	; 181
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 5f       	subi	r24, 0xFF	; 255
    2e32:	8c 93       	st	X, r24
    2e34:	fe 01       	movw	r30, r28
    2e36:	e5 5b       	subi	r30, 0xB5	; 181
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	de 01       	movw	r26, r28
    2e3c:	a4 5b       	subi	r26, 0xB4	; 180
    2e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e40:	90 81       	ld	r25, Z
    2e42:	8c 91       	ld	r24, X
    2e44:	98 17       	cp	r25, r24
    2e46:	08 f4       	brcc	.+2      	; 0x2e4a <main+0x4e6>
    2e48:	bf cf       	rjmp	.-130    	; 0x2dc8 <main+0x464>
    2e4a:	a0 c1       	rjmp	.+832    	; 0x318c <main+0x828>
		{
			Local_u8EnteredPass=Local_u8EnteredPass*10+Local_u8PassArr[Local_u8PassCounter];
		}
		while(Local_u8EnteredPass==Local_u8RealPass&&Local_u8EnteredID==Local_u8RealID&&Local_u8Reset==0)
		{
			Local_u8Trials=TRIALS;
    2e4c:	83 e0       	ldi	r24, 0x03	; 3
    2e4e:	8e ab       	std	Y+54, r24	; 0x36
			Local_u16Temp=LM35_u16GetTemp(ADC_SINGLE_ENDED_CH3);
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	0e 94 03 14 	call	0x2806	; 0x2806 <LM35_u16GetTemp>
    2e56:	9a af       	std	Y+58, r25	; 0x3a
    2e58:	89 af       	std	Y+57, r24	; 0x39
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e8       	ldi	r26, 0x80	; 128
    2e60:	bf e3       	ldi	r27, 0x3F	; 63
    2e62:	8b a3       	std	Y+35, r24	; 0x23
    2e64:	9c a3       	std	Y+36, r25	; 0x24
    2e66:	ad a3       	std	Y+37, r26	; 0x25
    2e68:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e70:	9e a1       	ldd	r25, Y+38	; 0x26
    2e72:	2b ea       	ldi	r18, 0xAB	; 171
    2e74:	3a ea       	ldi	r19, 0xAA	; 170
    2e76:	4a ea       	ldi	r20, 0xAA	; 170
    2e78:	50 e4       	ldi	r21, 0x40	; 64
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8f 8f       	std	Y+31, r24	; 0x1f
    2e84:	98 a3       	std	Y+32, r25	; 0x20
    2e86:	a9 a3       	std	Y+33, r26	; 0x21
    2e88:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2e8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e8c:	78 a1       	ldd	r23, Y+32	; 0x20
    2e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e90:	9a a1       	ldd	r25, Y+34	; 0x22
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	1c f4       	brge	.+6      	; 0x2ea8 <main+0x544>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ea6:	91 c0       	rjmp	.+290    	; 0x2fca <main+0x666>
	else if (__tmp > 255)
    2ea8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2eaa:	78 a1       	ldd	r23, Y+32	; 0x20
    2eac:	89 a1       	ldd	r24, Y+33	; 0x21
    2eae:	9a a1       	ldd	r25, Y+34	; 0x22
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	53 e4       	ldi	r21, 0x43	; 67
    2eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	0c f0       	brlt	.+2      	; 0x2ec2 <main+0x55e>
    2ec0:	7b c0       	rjmp	.+246    	; 0x2fb8 <main+0x654>
	{
		_delay_ms(__us / 1000.0);
    2ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4a e7       	ldi	r20, 0x7A	; 122
    2ed0:	54 e4       	ldi	r21, 0x44	; 68
    2ed2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	8a 8f       	std	Y+26, r24	; 0x1a
    2edc:	9b 8f       	std	Y+27, r25	; 0x1b
    2ede:	ac 8f       	std	Y+28, r26	; 0x1c
    2ee0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ee4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ee6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ee8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	4a e7       	ldi	r20, 0x7A	; 122
    2ef0:	55 e4       	ldi	r21, 0x45	; 69
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	8e 8b       	std	Y+22, r24	; 0x16
    2efc:	9f 8b       	std	Y+23, r25	; 0x17
    2efe:	a8 8f       	std	Y+24, r26	; 0x18
    2f00:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2f02:	6e 89       	ldd	r22, Y+22	; 0x16
    2f04:	7f 89       	ldd	r23, Y+23	; 0x17
    2f06:	88 8d       	ldd	r24, Y+24	; 0x18
    2f08:	99 8d       	ldd	r25, Y+25	; 0x19
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5f e3       	ldi	r21, 0x3F	; 63
    2f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f16:	88 23       	and	r24, r24
    2f18:	2c f4       	brge	.+10     	; 0x2f24 <main+0x5c0>
		__ticks = 1;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	9d 8b       	std	Y+21, r25	; 0x15
    2f20:	8c 8b       	std	Y+20, r24	; 0x14
    2f22:	3f c0       	rjmp	.+126    	; 0x2fa2 <main+0x63e>
	else if (__tmp > 65535)
    2f24:	6e 89       	ldd	r22, Y+22	; 0x16
    2f26:	7f 89       	ldd	r23, Y+23	; 0x17
    2f28:	88 8d       	ldd	r24, Y+24	; 0x18
    2f2a:	99 8d       	ldd	r25, Y+25	; 0x19
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	3f ef       	ldi	r19, 0xFF	; 255
    2f30:	4f e7       	ldi	r20, 0x7F	; 127
    2f32:	57 e4       	ldi	r21, 0x47	; 71
    2f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f38:	18 16       	cp	r1, r24
    2f3a:	4c f5       	brge	.+82     	; 0x2f8e <main+0x62a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2f3e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2f40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f42:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e2       	ldi	r20, 0x20	; 32
    2f4a:	51 e4       	ldi	r21, 0x41	; 65
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	bc 01       	movw	r22, r24
    2f56:	cd 01       	movw	r24, r26
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9d 8b       	std	Y+21, r25	; 0x15
    2f62:	8c 8b       	std	Y+20, r24	; 0x14
    2f64:	0f c0       	rjmp	.+30     	; 0x2f84 <main+0x620>
    2f66:	80 e9       	ldi	r24, 0x90	; 144
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	9b 8b       	std	Y+19, r25	; 0x13
    2f6c:	8a 8b       	std	Y+18, r24	; 0x12
    2f6e:	8a 89       	ldd	r24, Y+18	; 0x12
    2f70:	9b 89       	ldd	r25, Y+19	; 0x13
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <main+0x60e>
    2f76:	9b 8b       	std	Y+19, r25	; 0x13
    2f78:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7a:	8c 89       	ldd	r24, Y+20	; 0x14
    2f7c:	9d 89       	ldd	r25, Y+21	; 0x15
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	9d 8b       	std	Y+21, r25	; 0x15
    2f82:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f84:	8c 89       	ldd	r24, Y+20	; 0x14
    2f86:	9d 89       	ldd	r25, Y+21	; 0x15
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	69 f7       	brne	.-38     	; 0x2f66 <main+0x602>
    2f8c:	24 c0       	rjmp	.+72     	; 0x2fd6 <main+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8e:	6e 89       	ldd	r22, Y+22	; 0x16
    2f90:	7f 89       	ldd	r23, Y+23	; 0x17
    2f92:	88 8d       	ldd	r24, Y+24	; 0x18
    2f94:	99 8d       	ldd	r25, Y+25	; 0x19
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9d 8b       	std	Y+21, r25	; 0x15
    2fa0:	8c 8b       	std	Y+20, r24	; 0x14
    2fa2:	8c 89       	ldd	r24, Y+20	; 0x14
    2fa4:	9d 89       	ldd	r25, Y+21	; 0x15
    2fa6:	99 8b       	std	Y+17, r25	; 0x11
    2fa8:	88 8b       	std	Y+16, r24	; 0x10
    2faa:	88 89       	ldd	r24, Y+16	; 0x10
    2fac:	99 89       	ldd	r25, Y+17	; 0x11
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <main+0x64a>
    2fb2:	99 8b       	std	Y+17, r25	; 0x11
    2fb4:	88 8b       	std	Y+16, r24	; 0x10
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <main+0x672>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fb8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2fba:	78 a1       	ldd	r23, Y+32	; 0x20
    2fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	8e 8f       	std	Y+30, r24	; 0x1e
    2fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fcc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd0:	8a 95       	dec	r24
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <main+0x66c>
    2fd4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_us(1);
			Local_u16Light=LDR_u16GetAnalogmilVolt(ADC_SINGLE_ENDED_CH4);
    2fd6:	84 e0       	ldi	r24, 0x04	; 4
    2fd8:	0e 94 bd 13 	call	0x277a	; 0x277a <LDR_u16GetAnalogmilVolt>
    2fdc:	98 af       	std	Y+56, r25	; 0x38
    2fde:	8f ab       	std	Y+55, r24	; 0x37
			CLCD_voidGoToXY(0,0);
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(Local_u16Temp);
    2fe8:	89 ad       	ldd	r24, Y+57	; 0x39
    2fea:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fec:	cc 01       	movw	r24, r24
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 26 09 	call	0x124c	; 0x124c <CLCD_voidSendNumber>
			CLCD_u8SendString("  ");
    2ffa:	83 e7       	ldi	r24, 0x73	; 115
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_u8SendString>
			CLCD_voidGoToXY(0,1);
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	61 e0       	ldi	r22, 0x01	; 1
    3006:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(Local_u16Light);
    300a:	8f a9       	ldd	r24, Y+55	; 0x37
    300c:	98 ad       	ldd	r25, Y+56	; 0x38
    300e:	cc 01       	movw	r24, r24
    3010:	a0 e0       	ldi	r26, 0x00	; 0
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	0e 94 26 09 	call	0x124c	; 0x124c <CLCD_voidSendNumber>
			CLCD_u8SendString("   ");
    301c:	86 e7       	ldi	r24, 0x76	; 118
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_u8SendString>
			if(Local_u16Temp>=35)
    3024:	89 ad       	ldd	r24, Y+57	; 0x39
    3026:	9a ad       	ldd	r25, Y+58	; 0x3a
    3028:	83 32       	cpi	r24, 0x23	; 35
    302a:	91 05       	cpc	r25, r1
    302c:	60 f0       	brcs	.+24     	; 0x3046 <main+0x6e2>
			{
				DCM_u8RotateRight(&DCM_Object);
    302e:	ce 01       	movw	r24, r28
    3030:	80 5b       	subi	r24, 0xB0	; 176
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DCM_u8RotateRight>
				CLCD_voidGoToXY(15,0);
    3038:	8f e0       	ldi	r24, 0x0F	; 15
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
				CLCD_voidSendData('M');
    3040:	8d e4       	ldi	r24, 0x4D	; 77
    3042:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
			}
			if(Local_u16Temp<30)
    3046:	89 ad       	ldd	r24, Y+57	; 0x39
    3048:	9a ad       	ldd	r25, Y+58	; 0x3a
    304a:	8e 31       	cpi	r24, 0x1E	; 30
    304c:	91 05       	cpc	r25, r1
    304e:	60 f4       	brcc	.+24     	; 0x3068 <main+0x704>
			{
				DCM_u8Stop(&DCM_Object);
    3050:	ce 01       	movw	r24, r28
    3052:	80 5b       	subi	r24, 0xB0	; 176
    3054:	9f 4f       	sbci	r25, 0xFF	; 255
    3056:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DCM_u8Stop>
				CLCD_voidGoToXY(15,0);
    305a:	8f e0       	ldi	r24, 0x0F	; 15
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    3062:	80 e2       	ldi	r24, 0x20	; 32
    3064:	0e 94 39 08 	call	0x1072	; 0x1072 <CLCD_voidSendData>
			}
			if(Local_u16Light<625)DIO_u8SetPortValue(DIO_u8PORTC,0);
    3068:	8f a9       	ldd	r24, Y+55	; 0x37
    306a:	98 ad       	ldd	r25, Y+56	; 0x38
    306c:	f2 e0       	ldi	r31, 0x02	; 2
    306e:	81 37       	cpi	r24, 0x71	; 113
    3070:	9f 07       	cpc	r25, r31
    3072:	28 f4       	brcc	.+10     	; 0x307e <main+0x71a>
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	60 e0       	ldi	r22, 0x00	; 0
    3078:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    307c:	87 c0       	rjmp	.+270    	; 0x318c <main+0x828>
			else if(Local_u16Light>=625&&Local_u16Light<1250)DIO_u8SetPortValue(DIO_u8PORTC,1);
    307e:	8f a9       	ldd	r24, Y+55	; 0x37
    3080:	98 ad       	ldd	r25, Y+56	; 0x38
    3082:	22 e0       	ldi	r18, 0x02	; 2
    3084:	81 37       	cpi	r24, 0x71	; 113
    3086:	92 07       	cpc	r25, r18
    3088:	58 f0       	brcs	.+22     	; 0x30a0 <main+0x73c>
    308a:	8f a9       	ldd	r24, Y+55	; 0x37
    308c:	98 ad       	ldd	r25, Y+56	; 0x38
    308e:	e4 e0       	ldi	r30, 0x04	; 4
    3090:	82 3e       	cpi	r24, 0xE2	; 226
    3092:	9e 07       	cpc	r25, r30
    3094:	28 f4       	brcc	.+10     	; 0x30a0 <main+0x73c>
    3096:	82 e0       	ldi	r24, 0x02	; 2
    3098:	61 e0       	ldi	r22, 0x01	; 1
    309a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    309e:	76 c0       	rjmp	.+236    	; 0x318c <main+0x828>
			else if(Local_u16Light>=1250&&Local_u16Light<1875)DIO_u8SetPortValue(DIO_u8PORTC,3);
    30a0:	8f a9       	ldd	r24, Y+55	; 0x37
    30a2:	98 ad       	ldd	r25, Y+56	; 0x38
    30a4:	f4 e0       	ldi	r31, 0x04	; 4
    30a6:	82 3e       	cpi	r24, 0xE2	; 226
    30a8:	9f 07       	cpc	r25, r31
    30aa:	58 f0       	brcs	.+22     	; 0x30c2 <main+0x75e>
    30ac:	8f a9       	ldd	r24, Y+55	; 0x37
    30ae:	98 ad       	ldd	r25, Y+56	; 0x38
    30b0:	27 e0       	ldi	r18, 0x07	; 7
    30b2:	83 35       	cpi	r24, 0x53	; 83
    30b4:	92 07       	cpc	r25, r18
    30b6:	28 f4       	brcc	.+10     	; 0x30c2 <main+0x75e>
    30b8:	82 e0       	ldi	r24, 0x02	; 2
    30ba:	63 e0       	ldi	r22, 0x03	; 3
    30bc:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    30c0:	65 c0       	rjmp	.+202    	; 0x318c <main+0x828>
			else if(Local_u16Light>=1875&&Local_u16Light<2500)DIO_u8SetPortValue(DIO_u8PORTC,7);
    30c2:	8f a9       	ldd	r24, Y+55	; 0x37
    30c4:	98 ad       	ldd	r25, Y+56	; 0x38
    30c6:	e7 e0       	ldi	r30, 0x07	; 7
    30c8:	83 35       	cpi	r24, 0x53	; 83
    30ca:	9e 07       	cpc	r25, r30
    30cc:	58 f0       	brcs	.+22     	; 0x30e4 <main+0x780>
    30ce:	8f a9       	ldd	r24, Y+55	; 0x37
    30d0:	98 ad       	ldd	r25, Y+56	; 0x38
    30d2:	f9 e0       	ldi	r31, 0x09	; 9
    30d4:	84 3c       	cpi	r24, 0xC4	; 196
    30d6:	9f 07       	cpc	r25, r31
    30d8:	28 f4       	brcc	.+10     	; 0x30e4 <main+0x780>
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	67 e0       	ldi	r22, 0x07	; 7
    30de:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    30e2:	54 c0       	rjmp	.+168    	; 0x318c <main+0x828>
			else if(Local_u16Light>=2500&&Local_u16Light<3125)DIO_u8SetPortValue(DIO_u8PORTC,15);
    30e4:	8f a9       	ldd	r24, Y+55	; 0x37
    30e6:	98 ad       	ldd	r25, Y+56	; 0x38
    30e8:	29 e0       	ldi	r18, 0x09	; 9
    30ea:	84 3c       	cpi	r24, 0xC4	; 196
    30ec:	92 07       	cpc	r25, r18
    30ee:	58 f0       	brcs	.+22     	; 0x3106 <main+0x7a2>
    30f0:	8f a9       	ldd	r24, Y+55	; 0x37
    30f2:	98 ad       	ldd	r25, Y+56	; 0x38
    30f4:	ec e0       	ldi	r30, 0x0C	; 12
    30f6:	85 33       	cpi	r24, 0x35	; 53
    30f8:	9e 07       	cpc	r25, r30
    30fa:	28 f4       	brcc	.+10     	; 0x3106 <main+0x7a2>
    30fc:	82 e0       	ldi	r24, 0x02	; 2
    30fe:	6f e0       	ldi	r22, 0x0F	; 15
    3100:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    3104:	43 c0       	rjmp	.+134    	; 0x318c <main+0x828>
			else if(Local_u16Light>=3125&&Local_u16Light<3750)DIO_u8SetPortValue(DIO_u8PORTC,31);
    3106:	8f a9       	ldd	r24, Y+55	; 0x37
    3108:	98 ad       	ldd	r25, Y+56	; 0x38
    310a:	fc e0       	ldi	r31, 0x0C	; 12
    310c:	85 33       	cpi	r24, 0x35	; 53
    310e:	9f 07       	cpc	r25, r31
    3110:	58 f0       	brcs	.+22     	; 0x3128 <main+0x7c4>
    3112:	8f a9       	ldd	r24, Y+55	; 0x37
    3114:	98 ad       	ldd	r25, Y+56	; 0x38
    3116:	2e e0       	ldi	r18, 0x0E	; 14
    3118:	86 3a       	cpi	r24, 0xA6	; 166
    311a:	92 07       	cpc	r25, r18
    311c:	28 f4       	brcc	.+10     	; 0x3128 <main+0x7c4>
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	6f e1       	ldi	r22, 0x1F	; 31
    3122:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    3126:	32 c0       	rjmp	.+100    	; 0x318c <main+0x828>
			else if(Local_u16Light>=3750&&Local_u16Light<4375)DIO_u8SetPortValue(DIO_u8PORTC,63);
    3128:	8f a9       	ldd	r24, Y+55	; 0x37
    312a:	98 ad       	ldd	r25, Y+56	; 0x38
    312c:	ee e0       	ldi	r30, 0x0E	; 14
    312e:	86 3a       	cpi	r24, 0xA6	; 166
    3130:	9e 07       	cpc	r25, r30
    3132:	58 f0       	brcs	.+22     	; 0x314a <main+0x7e6>
    3134:	8f a9       	ldd	r24, Y+55	; 0x37
    3136:	98 ad       	ldd	r25, Y+56	; 0x38
    3138:	f1 e1       	ldi	r31, 0x11	; 17
    313a:	87 31       	cpi	r24, 0x17	; 23
    313c:	9f 07       	cpc	r25, r31
    313e:	28 f4       	brcc	.+10     	; 0x314a <main+0x7e6>
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	6f e3       	ldi	r22, 0x3F	; 63
    3144:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    3148:	21 c0       	rjmp	.+66     	; 0x318c <main+0x828>
			else if(Local_u16Light>=4375&&Local_u16Light<4500)DIO_u8SetPortValue(DIO_u8PORTC,127);
    314a:	8f a9       	ldd	r24, Y+55	; 0x37
    314c:	98 ad       	ldd	r25, Y+56	; 0x38
    314e:	21 e1       	ldi	r18, 0x11	; 17
    3150:	87 31       	cpi	r24, 0x17	; 23
    3152:	92 07       	cpc	r25, r18
    3154:	58 f0       	brcs	.+22     	; 0x316c <main+0x808>
    3156:	8f a9       	ldd	r24, Y+55	; 0x37
    3158:	98 ad       	ldd	r25, Y+56	; 0x38
    315a:	e1 e1       	ldi	r30, 0x11	; 17
    315c:	84 39       	cpi	r24, 0x94	; 148
    315e:	9e 07       	cpc	r25, r30
    3160:	28 f4       	brcc	.+10     	; 0x316c <main+0x808>
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	6f e7       	ldi	r22, 0x7F	; 127
    3166:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
    316a:	10 c0       	rjmp	.+32     	; 0x318c <main+0x828>
			else if(Local_u16Light>=4500&&Local_u16Light<5000)DIO_u8SetPortValue(DIO_u8PORTC,255);
    316c:	8f a9       	ldd	r24, Y+55	; 0x37
    316e:	98 ad       	ldd	r25, Y+56	; 0x38
    3170:	f1 e1       	ldi	r31, 0x11	; 17
    3172:	84 39       	cpi	r24, 0x94	; 148
    3174:	9f 07       	cpc	r25, r31
    3176:	50 f0       	brcs	.+20     	; 0x318c <main+0x828>
    3178:	8f a9       	ldd	r24, Y+55	; 0x37
    317a:	98 ad       	ldd	r25, Y+56	; 0x38
    317c:	23 e1       	ldi	r18, 0x13	; 19
    317e:	88 38       	cpi	r24, 0x88	; 136
    3180:	92 07       	cpc	r25, r18
    3182:	20 f4       	brcc	.+8      	; 0x318c <main+0x828>
    3184:	82 e0       	ldi	r24, 0x02	; 2
    3186:	6f ef       	ldi	r22, 0xFF	; 255
    3188:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_u8SetPortValue>
		if(Local_u8PassLen>0)Local_u8EnteredPass=Local_u8PassArr[0];
		for(Local_u8PassCounter=1;Local_u8PassCounter<Local_u8PassLen;Local_u8PassCounter++)
		{
			Local_u8EnteredPass=Local_u8EnteredPass*10+Local_u8PassArr[Local_u8PassCounter];
		}
		while(Local_u8EnteredPass==Local_u8RealPass&&Local_u8EnteredID==Local_u8RealID&&Local_u8Reset==0)
    318c:	fe 01       	movw	r30, r28
    318e:	ed 5b       	subi	r30, 0xBD	; 189
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	20 81       	ld	r18, Z
    3194:	31 81       	ldd	r19, Z+1	; 0x01
    3196:	42 81       	ldd	r20, Z+2	; 0x02
    3198:	53 81       	ldd	r21, Z+3	; 0x03
    319a:	8b ad       	ldd	r24, Y+59	; 0x3b
    319c:	9c ad       	ldd	r25, Y+60	; 0x3c
    319e:	ad ad       	ldd	r26, Y+61	; 0x3d
    31a0:	be ad       	ldd	r27, Y+62	; 0x3e
    31a2:	28 17       	cp	r18, r24
    31a4:	39 07       	cpc	r19, r25
    31a6:	4a 07       	cpc	r20, r26
    31a8:	5b 07       	cpc	r21, r27
    31aa:	41 f5       	brne	.+80     	; 0x31fc <main+0x898>
    31ac:	fe 01       	movw	r30, r28
    31ae:	e9 5b       	subi	r30, 0xB9	; 185
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	de 01       	movw	r26, r28
    31b4:	df 96       	adiw	r26, 0x3f	; 63
    31b6:	20 81       	ld	r18, Z
    31b8:	31 81       	ldd	r19, Z+1	; 0x01
    31ba:	42 81       	ldd	r20, Z+2	; 0x02
    31bc:	53 81       	ldd	r21, Z+3	; 0x03
    31be:	8d 91       	ld	r24, X+
    31c0:	9d 91       	ld	r25, X+
    31c2:	0d 90       	ld	r0, X+
    31c4:	bc 91       	ld	r27, X
    31c6:	a0 2d       	mov	r26, r0
    31c8:	28 17       	cp	r18, r24
    31ca:	39 07       	cpc	r19, r25
    31cc:	4a 07       	cpc	r20, r26
    31ce:	5b 07       	cpc	r21, r27
    31d0:	a9 f4       	brne	.+42     	; 0x31fc <main+0x898>
    31d2:	80 91 c8 00 	lds	r24, 0x00C8
    31d6:	88 23       	and	r24, r24
    31d8:	09 f4       	brne	.+2      	; 0x31dc <main+0x878>
    31da:	38 ce       	rjmp	.-912    	; 0x2e4c <main+0x4e8>
    31dc:	0f c0       	rjmp	.+30     	; 0x31fc <main+0x898>
			else if(Local_u16Light>=3750&&Local_u16Light<4375)DIO_u8SetPortValue(DIO_u8PORTC,63);
			else if(Local_u16Light>=4375&&Local_u16Light<4500)DIO_u8SetPortValue(DIO_u8PORTC,127);
			else if(Local_u16Light>=4500&&Local_u16Light<5000)DIO_u8SetPortValue(DIO_u8PORTC,255);
		}
		}
		else if(Local_u8Trials==0)
    31de:	8e a9       	ldd	r24, Y+54	; 0x36
    31e0:	88 23       	and	r24, r24
    31e2:	61 f4       	brne	.+24     	; 0x31fc <main+0x898>
		{
			if(Local_u8indicator==0)
    31e4:	8d a9       	ldd	r24, Y+53	; 0x35
    31e6:	88 23       	and	r24, r24
    31e8:	49 f4       	brne	.+18     	; 0x31fc <main+0x898>
			{
			Local_u8indicator=1;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	8d ab       	std	Y+53, r24	; 0x35
			CLCD_voidSendComd(1);
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	0e 94 19 08 	call	0x1032	; 0x1032 <CLCD_voidSendComd>
			CLCD_u8SendString("System Blocked!");
    31f4:	8a e7       	ldi	r24, 0x7A	; 122
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_u8SendString>
			}
		}
		if((Local_u8EnteredPass!=Local_u8RealPass||Local_u8EnteredID!=Local_u8RealID)&&Local_u8Trials!=0&&Local_u8Reset==0)
    31fc:	fe 01       	movw	r30, r28
    31fe:	ed 5b       	subi	r30, 0xBD	; 189
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	20 81       	ld	r18, Z
    3204:	31 81       	ldd	r19, Z+1	; 0x01
    3206:	42 81       	ldd	r20, Z+2	; 0x02
    3208:	53 81       	ldd	r21, Z+3	; 0x03
    320a:	8b ad       	ldd	r24, Y+59	; 0x3b
    320c:	9c ad       	ldd	r25, Y+60	; 0x3c
    320e:	ad ad       	ldd	r26, Y+61	; 0x3d
    3210:	be ad       	ldd	r27, Y+62	; 0x3e
    3212:	28 17       	cp	r18, r24
    3214:	39 07       	cpc	r19, r25
    3216:	4a 07       	cpc	r20, r26
    3218:	5b 07       	cpc	r21, r27
    321a:	a1 f4       	brne	.+40     	; 0x3244 <main+0x8e0>
    321c:	fe 01       	movw	r30, r28
    321e:	e9 5b       	subi	r30, 0xB9	; 185
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	de 01       	movw	r26, r28
    3224:	df 96       	adiw	r26, 0x3f	; 63
    3226:	20 81       	ld	r18, Z
    3228:	31 81       	ldd	r19, Z+1	; 0x01
    322a:	42 81       	ldd	r20, Z+2	; 0x02
    322c:	53 81       	ldd	r21, Z+3	; 0x03
    322e:	8d 91       	ld	r24, X+
    3230:	9d 91       	ld	r25, X+
    3232:	0d 90       	ld	r0, X+
    3234:	bc 91       	ld	r27, X
    3236:	a0 2d       	mov	r26, r0
    3238:	28 17       	cp	r18, r24
    323a:	39 07       	cpc	r19, r25
    323c:	4a 07       	cpc	r20, r26
    323e:	5b 07       	cpc	r21, r27
    3240:	09 f4       	brne	.+2      	; 0x3244 <main+0x8e0>
    3242:	7f cc       	rjmp	.-1794   	; 0x2b42 <main+0x1de>
    3244:	8e a9       	ldd	r24, Y+54	; 0x36
    3246:	88 23       	and	r24, r24
    3248:	09 f4       	brne	.+2      	; 0x324c <main+0x8e8>
    324a:	7b cc       	rjmp	.-1802   	; 0x2b42 <main+0x1de>
    324c:	80 91 c8 00 	lds	r24, 0x00C8
    3250:	88 23       	and	r24, r24
    3252:	09 f0       	breq	.+2      	; 0x3256 <main+0x8f2>
    3254:	76 cc       	rjmp	.-1812   	; 0x2b42 <main+0x1de>
		{
			CLCD_u8SendString("wrong Pass");
    3256:	8a e8       	ldi	r24, 0x8A	; 138
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_u8SendString>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	aa e7       	ldi	r26, 0x7A	; 122
    3264:	b4 e4       	ldi	r27, 0x44	; 68
    3266:	8b 87       	std	Y+11, r24	; 0x0b
    3268:	9c 87       	std	Y+12, r25	; 0x0c
    326a:	ad 87       	std	Y+13, r26	; 0x0d
    326c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3270:	7c 85       	ldd	r23, Y+12	; 0x0c
    3272:	8d 85       	ldd	r24, Y+13	; 0x0d
    3274:	9e 85       	ldd	r25, Y+14	; 0x0e
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4a e7       	ldi	r20, 0x7A	; 122
    327c:	55 e4       	ldi	r21, 0x45	; 69
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	8f 83       	std	Y+7, r24	; 0x07
    3288:	98 87       	std	Y+8, r25	; 0x08
    328a:	a9 87       	std	Y+9, r26	; 0x09
    328c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    328e:	6f 81       	ldd	r22, Y+7	; 0x07
    3290:	78 85       	ldd	r23, Y+8	; 0x08
    3292:	89 85       	ldd	r24, Y+9	; 0x09
    3294:	9a 85       	ldd	r25, Y+10	; 0x0a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e8       	ldi	r20, 0x80	; 128
    329c:	5f e3       	ldi	r21, 0x3F	; 63
    329e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a2:	88 23       	and	r24, r24
    32a4:	2c f4       	brge	.+10     	; 0x32b0 <main+0x94c>
		__ticks = 1;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
    32ae:	3f c0       	rjmp	.+126    	; 0x332e <main+0x9ca>
	else if (__tmp > 65535)
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	3f ef       	ldi	r19, 0xFF	; 255
    32bc:	4f e7       	ldi	r20, 0x7F	; 127
    32be:	57 e4       	ldi	r21, 0x47	; 71
    32c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c4:	18 16       	cp	r1, r24
    32c6:	4c f5       	brge	.+82     	; 0x331a <main+0x9b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    32cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e2       	ldi	r20, 0x20	; 32
    32d6:	51 e4       	ldi	r21, 0x41	; 65
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	8d 83       	std	Y+5, r24	; 0x05
    32f0:	0f c0       	rjmp	.+30     	; 0x3310 <main+0x9ac>
    32f2:	80 e9       	ldi	r24, 0x90	; 144
    32f4:	91 e0       	ldi	r25, 0x01	; 1
    32f6:	9c 83       	std	Y+4, r25	; 0x04
    32f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <main+0x99a>
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	9e 81       	ldd	r25, Y+6	; 0x06
    3314:	00 97       	sbiw	r24, 0x00	; 0
    3316:	69 f7       	brne	.-38     	; 0x32f2 <main+0x98e>
    3318:	14 c0       	rjmp	.+40     	; 0x3342 <main+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	9a 81       	ldd	r25, Y+2	; 0x02
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <main+0x9d6>
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Local_u8Trials--;
    3342:	8e a9       	ldd	r24, Y+54	; 0x36
    3344:	81 50       	subi	r24, 0x01	; 1
    3346:	8e ab       	std	Y+54, r24	; 0x36
    3348:	fc cb       	rjmp	.-2056   	; 0x2b42 <main+0x1de>

0000334a <Reset>:

}
}

void Reset(void)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
	Local_u8Reset=1;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	80 93 c8 00 	sts	0x00C8, r24
}
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	08 95       	ret

0000335e <__mulsi3>:
    335e:	62 9f       	mul	r22, r18
    3360:	d0 01       	movw	r26, r0
    3362:	73 9f       	mul	r23, r19
    3364:	f0 01       	movw	r30, r0
    3366:	82 9f       	mul	r24, r18
    3368:	e0 0d       	add	r30, r0
    336a:	f1 1d       	adc	r31, r1
    336c:	64 9f       	mul	r22, r20
    336e:	e0 0d       	add	r30, r0
    3370:	f1 1d       	adc	r31, r1
    3372:	92 9f       	mul	r25, r18
    3374:	f0 0d       	add	r31, r0
    3376:	83 9f       	mul	r24, r19
    3378:	f0 0d       	add	r31, r0
    337a:	74 9f       	mul	r23, r20
    337c:	f0 0d       	add	r31, r0
    337e:	65 9f       	mul	r22, r21
    3380:	f0 0d       	add	r31, r0
    3382:	99 27       	eor	r25, r25
    3384:	72 9f       	mul	r23, r18
    3386:	b0 0d       	add	r27, r0
    3388:	e1 1d       	adc	r30, r1
    338a:	f9 1f       	adc	r31, r25
    338c:	63 9f       	mul	r22, r19
    338e:	b0 0d       	add	r27, r0
    3390:	e1 1d       	adc	r30, r1
    3392:	f9 1f       	adc	r31, r25
    3394:	bd 01       	movw	r22, r26
    3396:	cf 01       	movw	r24, r30
    3398:	11 24       	eor	r1, r1
    339a:	08 95       	ret

0000339c <__divmodsi4>:
    339c:	97 fb       	bst	r25, 7
    339e:	09 2e       	mov	r0, r25
    33a0:	05 26       	eor	r0, r21
    33a2:	0e d0       	rcall	.+28     	; 0x33c0 <__divmodsi4_neg1>
    33a4:	57 fd       	sbrc	r21, 7
    33a6:	04 d0       	rcall	.+8      	; 0x33b0 <__divmodsi4_neg2>
    33a8:	14 d0       	rcall	.+40     	; 0x33d2 <__udivmodsi4>
    33aa:	0a d0       	rcall	.+20     	; 0x33c0 <__divmodsi4_neg1>
    33ac:	00 1c       	adc	r0, r0
    33ae:	38 f4       	brcc	.+14     	; 0x33be <__divmodsi4_exit>

000033b0 <__divmodsi4_neg2>:
    33b0:	50 95       	com	r21
    33b2:	40 95       	com	r20
    33b4:	30 95       	com	r19
    33b6:	21 95       	neg	r18
    33b8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ba:	4f 4f       	sbci	r20, 0xFF	; 255
    33bc:	5f 4f       	sbci	r21, 0xFF	; 255

000033be <__divmodsi4_exit>:
    33be:	08 95       	ret

000033c0 <__divmodsi4_neg1>:
    33c0:	f6 f7       	brtc	.-4      	; 0x33be <__divmodsi4_exit>
    33c2:	90 95       	com	r25
    33c4:	80 95       	com	r24
    33c6:	70 95       	com	r23
    33c8:	61 95       	neg	r22
    33ca:	7f 4f       	sbci	r23, 0xFF	; 255
    33cc:	8f 4f       	sbci	r24, 0xFF	; 255
    33ce:	9f 4f       	sbci	r25, 0xFF	; 255
    33d0:	08 95       	ret

000033d2 <__udivmodsi4>:
    33d2:	a1 e2       	ldi	r26, 0x21	; 33
    33d4:	1a 2e       	mov	r1, r26
    33d6:	aa 1b       	sub	r26, r26
    33d8:	bb 1b       	sub	r27, r27
    33da:	fd 01       	movw	r30, r26
    33dc:	0d c0       	rjmp	.+26     	; 0x33f8 <__udivmodsi4_ep>

000033de <__udivmodsi4_loop>:
    33de:	aa 1f       	adc	r26, r26
    33e0:	bb 1f       	adc	r27, r27
    33e2:	ee 1f       	adc	r30, r30
    33e4:	ff 1f       	adc	r31, r31
    33e6:	a2 17       	cp	r26, r18
    33e8:	b3 07       	cpc	r27, r19
    33ea:	e4 07       	cpc	r30, r20
    33ec:	f5 07       	cpc	r31, r21
    33ee:	20 f0       	brcs	.+8      	; 0x33f8 <__udivmodsi4_ep>
    33f0:	a2 1b       	sub	r26, r18
    33f2:	b3 0b       	sbc	r27, r19
    33f4:	e4 0b       	sbc	r30, r20
    33f6:	f5 0b       	sbc	r31, r21

000033f8 <__udivmodsi4_ep>:
    33f8:	66 1f       	adc	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	88 1f       	adc	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	1a 94       	dec	r1
    3402:	69 f7       	brne	.-38     	; 0x33de <__udivmodsi4_loop>
    3404:	60 95       	com	r22
    3406:	70 95       	com	r23
    3408:	80 95       	com	r24
    340a:	90 95       	com	r25
    340c:	9b 01       	movw	r18, r22
    340e:	ac 01       	movw	r20, r24
    3410:	bd 01       	movw	r22, r26
    3412:	cf 01       	movw	r24, r30
    3414:	08 95       	ret

00003416 <__prologue_saves__>:
    3416:	2f 92       	push	r2
    3418:	3f 92       	push	r3
    341a:	4f 92       	push	r4
    341c:	5f 92       	push	r5
    341e:	6f 92       	push	r6
    3420:	7f 92       	push	r7
    3422:	8f 92       	push	r8
    3424:	9f 92       	push	r9
    3426:	af 92       	push	r10
    3428:	bf 92       	push	r11
    342a:	cf 92       	push	r12
    342c:	df 92       	push	r13
    342e:	ef 92       	push	r14
    3430:	ff 92       	push	r15
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	ca 1b       	sub	r28, r26
    3440:	db 0b       	sbc	r29, r27
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
    344c:	09 94       	ijmp

0000344e <__epilogue_restores__>:
    344e:	2a 88       	ldd	r2, Y+18	; 0x12
    3450:	39 88       	ldd	r3, Y+17	; 0x11
    3452:	48 88       	ldd	r4, Y+16	; 0x10
    3454:	5f 84       	ldd	r5, Y+15	; 0x0f
    3456:	6e 84       	ldd	r6, Y+14	; 0x0e
    3458:	7d 84       	ldd	r7, Y+13	; 0x0d
    345a:	8c 84       	ldd	r8, Y+12	; 0x0c
    345c:	9b 84       	ldd	r9, Y+11	; 0x0b
    345e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3460:	b9 84       	ldd	r11, Y+9	; 0x09
    3462:	c8 84       	ldd	r12, Y+8	; 0x08
    3464:	df 80       	ldd	r13, Y+7	; 0x07
    3466:	ee 80       	ldd	r14, Y+6	; 0x06
    3468:	fd 80       	ldd	r15, Y+5	; 0x05
    346a:	0c 81       	ldd	r16, Y+4	; 0x04
    346c:	1b 81       	ldd	r17, Y+3	; 0x03
    346e:	aa 81       	ldd	r26, Y+2	; 0x02
    3470:	b9 81       	ldd	r27, Y+1	; 0x01
    3472:	ce 0f       	add	r28, r30
    3474:	d1 1d       	adc	r29, r1
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	ed 01       	movw	r28, r26
    3482:	08 95       	ret

00003484 <_exit>:
    3484:	f8 94       	cli

00003486 <__stop_program>:
    3486:	ff cf       	rjmp	.-2      	; 0x3486 <__stop_program>


Assignment9.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00002a2c  00002aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002118  00000000  00000000  00002acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f4b  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000096c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a27b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <main>
      7a:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e6       	ldi	r26, 0x6A	; 106
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e6       	ldi	r24, 0x6A	; 106
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

static void voidSendEnablePulse(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e4       	ldi	r27, 0x40	; 64
     b5c:	8b 87       	std	Y+11, r24	; 0x0b
     b5e:	9c 87       	std	Y+12, r25	; 0x0c
     b60:	ad 87       	std	Y+13, r26	; 0x0d
     b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b64:	6b 85       	ldd	r22, Y+11	; 0x0b
     b66:	7c 85       	ldd	r23, Y+12	; 0x0c
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	4a e7       	ldi	r20, 0x7A	; 122
     b72:	55 e4       	ldi	r21, 0x45	; 69
     b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	a9 87       	std	Y+9, r26	; 0x09
     b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b84:	6f 81       	ldd	r22, Y+7	; 0x07
     b86:	78 85       	ldd	r23, Y+8	; 0x08
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e8       	ldi	r20, 0x80	; 128
     b92:	5f e3       	ldi	r21, 0x3F	; 63
     b94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     b98:	88 23       	and	r24, r24
     b9a:	2c f4       	brge	.+10     	; 0xba6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	9e 83       	std	Y+6, r25	; 0x06
     ba2:	8d 83       	std	Y+5, r24	; 0x05
     ba4:	3f c0       	rjmp	.+126    	; 0xc24 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     ba6:	6f 81       	ldd	r22, Y+7	; 0x07
     ba8:	78 85       	ldd	r23, Y+8	; 0x08
     baa:	89 85       	ldd	r24, Y+9	; 0x09
     bac:	9a 85       	ldd	r25, Y+10	; 0x0a
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	3f ef       	ldi	r19, 0xFF	; 255
     bb2:	4f e7       	ldi	r20, 0x7F	; 127
     bb4:	57 e4       	ldi	r21, 0x47	; 71
     bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bba:	18 16       	cp	r1, r24
     bbc:	4c f5       	brge	.+82     	; 0xc10 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e2       	ldi	r20, 0x20	; 32
     bcc:	51 e4       	ldi	r21, 0x41	; 65
     bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <voidSendEnablePulse+0xd0>
     be8:	80 e9       	ldi	r24, 0x90	; 144
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <voidSendEnablePulse+0xbe>
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	9e 83       	std	Y+6, r25	; 0x06
     c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	69 f7       	brne	.-38     	; 0xbe8 <voidSendEnablePulse+0xb2>
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <voidSendEnablePulse+0xfa>
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
}
     c42:	2e 96       	adiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	98 2f       	mov	r25, r24
     c64:	91 70       	andi	r25, 0x01	; 1
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	64 e0       	ldi	r22, 0x04	; 4
     c6a:	49 2f       	mov	r20, r25
     c6c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	86 95       	lsr	r24
     c74:	98 2f       	mov	r25, r24
     c76:	91 70       	andi	r25, 0x01	; 1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	65 e0       	ldi	r22, 0x05	; 5
     c7c:	49 2f       	mov	r20, r25
     c7e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	98 2f       	mov	r25, r24
     c8a:	91 70       	andi	r25, 0x01	; 1
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	66 e0       	ldi	r22, 0x06	; 6
     c90:	49 2f       	mov	r20, r25
     c92:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	86 95       	lsr	r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	91 70       	andi	r25, 0x01	; 1
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	67 e0       	ldi	r22, 0x07	; 7
     ca6:	49 2f       	mov	r20, r25
     ca8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendComd>:

void CLCD_voidSendComd(uint8 Copy_Cmd)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
    #if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
	/*set command at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_Cmd);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Cmd>>4);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	82 95       	swap	r24
     cd8:	8f 70       	andi	r24, 0x0F	; 15
     cda:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cde:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Cmd);
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     ce8:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	#endif
}
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_Data)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
	#if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
	/*set data at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_Data);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Data>>4);
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	82 95       	swap	r24
     d18:	8f 70       	andi	r24, 0x0F	; 15
     d1a:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d1e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Data);
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d28:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	#endif

}
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <CLCD_voidInit>:

void CLCD_voidInit(void) /*from datasheet*/
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	2e 97       	sbiw	r28, 0x0e	; 14
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e2       	ldi	r26, 0x20	; 32
     d4e:	b2 e4       	ldi	r27, 0x42	; 66
     d50:	8b 87       	std	Y+11, r24	; 0x0b
     d52:	9c 87       	std	Y+12, r25	; 0x0c
     d54:	ad 87       	std	Y+13, r26	; 0x0d
     d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a e7       	ldi	r20, 0x7A	; 122
     d66:	55 e4       	ldi	r21, 0x45	; 69
     d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8f 83       	std	Y+7, r24	; 0x07
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	a9 87       	std	Y+9, r26	; 0x09
     d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d78:	6f 81       	ldd	r22, Y+7	; 0x07
     d7a:	78 85       	ldd	r23, Y+8	; 0x08
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <CLCD_voidInit+0x66>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d9a:	6f 81       	ldd	r22, Y+7	; 0x07
     d9c:	78 85       	ldd	r23, Y+8	; 0x08
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	6b 85       	ldd	r22, Y+11	; 0x0b
     db4:	7c 85       	ldd	r23, Y+12	; 0x0c
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <CLCD_voidInit+0xc6>
     ddc:	80 e9       	ldi	r24, 0x90	; 144
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <CLCD_voidInit+0xb4>
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <CLCD_voidInit+0xa8>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9e 83       	std	Y+6, r25	; 0x06
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	9e 81       	ldd	r25, Y+6	; 0x06
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <CLCD_voidInit+0xf0>
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*function set command: 2lines(DB3 high) and small font(DB2 low)*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	CLCD_voidSendComd(0b00111000);
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e32:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e3c:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e46:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	#endif

	/*display on/off control command: display enable(DB2 high),cursor(DB1 low),blink(DB0 low)*/
	CLCD_voidSendComd(0b00001100);
     e4a:	8c e0       	ldi	r24, 0x0C	; 12
     e4c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
	/*display clear command*/
	CLCD_voidSendComd(0b00000001);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
	
}
     e56:	2e 96       	adiw	r28, 0x0e	; 14
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <CLCD_u8SendString>:
uint8 CLCD_u8SendString(char Copy_chstring[])
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <CLCD_u8SendString+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <CLCD_u8SendString+0x8>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8StateError=OK;
     e78:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	e1 f0       	breq	.+56     	; 0xeba <CLCD_u8SendString+0x52>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     e82:	19 82       	std	Y+1, r1	; 0x01
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <CLCD_u8SendString+0x3a>
	{
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	fc 01       	movw	r30, r24
     e92:	e2 0f       	add	r30, r18
     e94:	f3 1f       	adc	r31, r19
     e96:	80 81       	ld	r24, Z
     e98:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
uint8 CLCD_u8SendString(char Copy_chstring[])
{
	uint8 Local_u8StateError=OK;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	fc 01       	movw	r30, r24
     eae:	e2 0f       	add	r30, r18
     eb0:	f3 1f       	adc	r31, r19
     eb2:	80 81       	ld	r24, Z
     eb4:	88 23       	and	r24, r24
     eb6:	39 f7       	brne	.-50     	; 0xe86 <CLCD_u8SendString+0x1e>
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <CLCD_u8SendString+0x56>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8StateError;
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	61 97       	sbiw	r28, 0x11	; 17
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	6e 87       	std	Y+14, r22	; 0x0e
     ee4:	7f 87       	std	Y+15, r23	; 0x0f
     ee6:	88 8b       	std	Y+16, r24	; 0x10
     ee8:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chArray[10];
	sint8 Local_s8Remainder,Local_s8ArrayIndex=0;
     eea:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_s32Number==0)
     eec:	8e 85       	ldd	r24, Y+14	; 0x0e
     eee:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef0:	a8 89       	ldd	r26, Y+16	; 0x10
     ef2:	b9 89       	ldd	r27, Y+17	; 0x11
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	a1 05       	cpc	r26, r1
     ef8:	b1 05       	cpc	r27, r1
     efa:	21 f4       	brne	.+8      	; 0xf04 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData(48);
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
     f02:	86 c0       	rjmp	.+268    	; 0x1010 <CLCD_voidSendNumber+0x142>
	}
	else if(Copy_s32Number>0)
     f04:	8e 85       	ldd	r24, Y+14	; 0x0e
     f06:	9f 85       	ldd	r25, Y+15	; 0x0f
     f08:	a8 89       	ldd	r26, Y+16	; 0x10
     f0a:	b9 89       	ldd	r27, Y+17	; 0x11
     f0c:	18 16       	cp	r1, r24
     f0e:	19 06       	cpc	r1, r25
     f10:	1a 06       	cpc	r1, r26
     f12:	1b 06       	cpc	r1, r27
     f14:	d4 f5       	brge	.+116    	; 0xf8a <CLCD_voidSendNumber+0xbc>
     f16:	30 c0       	rjmp	.+96     	; 0xf78 <CLCD_voidSendNumber+0xaa>
	{
	while(Copy_s32Number!=0)
	{
		Local_s8Remainder=Copy_s32Number%10;
     f18:	8e 85       	ldd	r24, Y+14	; 0x0e
     f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1c:	a8 89       	ldd	r26, Y+16	; 0x10
     f1e:	b9 89       	ldd	r27, Y+17	; 0x11
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	8b 83       	std	Y+3, r24	; 0x03
		Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	33 27       	eor	r19, r19
     f3c:	27 fd       	sbrc	r18, 7
     f3e:	30 95       	com	r19
     f40:	4b 81       	ldd	r20, Y+3	; 0x03
     f42:	ce 01       	movw	r24, r28
     f44:	04 96       	adiw	r24, 0x04	; 4
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	40 83       	st	Z, r20
		Local_s8ArrayIndex++;
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number/=10;
     f54:	8e 85       	ldd	r24, Y+14	; 0x0e
     f56:	9f 85       	ldd	r25, Y+15	; 0x0f
     f58:	a8 89       	ldd	r26, Y+16	; 0x10
     f5a:	b9 89       	ldd	r27, Y+17	; 0x11
     f5c:	2a e0       	ldi	r18, 0x0A	; 10
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
     f6c:	da 01       	movw	r26, r20
     f6e:	c9 01       	movw	r24, r18
     f70:	8e 87       	std	Y+14, r24	; 0x0e
     f72:	9f 87       	std	Y+15, r25	; 0x0f
     f74:	a8 8b       	std	Y+16, r26	; 0x10
     f76:	b9 8b       	std	Y+17, r27	; 0x11
	{
		CLCD_voidSendData(48);
	}
	else if(Copy_s32Number>0)
	{
	while(Copy_s32Number!=0)
     f78:	8e 85       	ldd	r24, Y+14	; 0x0e
     f7a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f7c:	a8 89       	ldd	r26, Y+16	; 0x10
     f7e:	b9 89       	ldd	r27, Y+17	; 0x11
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	a1 05       	cpc	r26, r1
     f84:	b1 05       	cpc	r27, r1
     f86:	41 f6       	brne	.-112    	; 0xf18 <CLCD_voidSendNumber+0x4a>
     f88:	43 c0       	rjmp	.+134    	; 0x1010 <CLCD_voidSendNumber+0x142>
		Copy_s32Number/=10;
	}
	}
	else
	{
		CLCD_voidSendData('-');
     f8a:	8d e2       	ldi	r24, 0x2D	; 45
     f8c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
     f90:	37 c0       	rjmp	.+110    	; 0x1000 <CLCD_voidSendNumber+0x132>
		while(Copy_s32Number!=0)
		{
			Local_s8Remainder=-Copy_s32Number%10;
     f92:	8e 85       	ldd	r24, Y+14	; 0x0e
     f94:	9f 85       	ldd	r25, Y+15	; 0x0f
     f96:	a8 89       	ldd	r26, Y+16	; 0x10
     f98:	b9 89       	ldd	r27, Y+17	; 0x11
     f9a:	b0 95       	com	r27
     f9c:	a0 95       	com	r26
     f9e:	90 95       	com	r25
     fa0:	81 95       	neg	r24
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	af 4f       	sbci	r26, 0xFF	; 255
     fa6:	bf 4f       	sbci	r27, 0xFF	; 255
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8b 83       	std	Y+3, r24	; 0x03
			Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	33 27       	eor	r19, r19
     fc4:	27 fd       	sbrc	r18, 7
     fc6:	30 95       	com	r19
     fc8:	4b 81       	ldd	r20, Y+3	; 0x03
     fca:	ce 01       	movw	r24, r28
     fcc:	04 96       	adiw	r24, 0x04	; 4
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	40 83       	st	Z, r20
			Local_s8ArrayIndex++;
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	8a 83       	std	Y+2, r24	; 0x02
			Copy_s32Number/=10;
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	a8 89       	ldd	r26, Y+16	; 0x10
     fe2:	b9 89       	ldd	r27, Y+17	; 0x11
     fe4:	2a e0       	ldi	r18, 0x0A	; 10
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
     ff4:	da 01       	movw	r26, r20
     ff6:	c9 01       	movw	r24, r18
     ff8:	8e 87       	std	Y+14, r24	; 0x0e
     ffa:	9f 87       	std	Y+15, r25	; 0x0f
     ffc:	a8 8b       	std	Y+16, r26	; 0x10
     ffe:	b9 8b       	std	Y+17, r27	; 0x11
	}
	}
	else
	{
		CLCD_voidSendData('-');
		while(Copy_s32Number!=0)
    1000:	8e 85       	ldd	r24, Y+14	; 0x0e
    1002:	9f 85       	ldd	r25, Y+15	; 0x0f
    1004:	a8 89       	ldd	r26, Y+16	; 0x10
    1006:	b9 89       	ldd	r27, Y+17	; 0x11
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	a1 05       	cpc	r26, r1
    100c:	b1 05       	cpc	r27, r1
    100e:	09 f6       	brne	.-126    	; 0xf92 <CLCD_voidSendNumber+0xc4>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	81 50       	subi	r24, 0x01	; 1
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	11 c0       	rjmp	.+34     	; 0x103a <CLCD_voidSendNumber+0x16c>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	33 27       	eor	r19, r19
    101e:	27 fd       	sbrc	r18, 7
    1020:	30 95       	com	r19
    1022:	ce 01       	movw	r24, r28
    1024:	04 96       	adiw	r24, 0x04	; 4
    1026:	fc 01       	movw	r30, r24
    1028:	e2 0f       	add	r30, r18
    102a:	f3 1f       	adc	r31, r19
    102c:	80 81       	ld	r24, Z
    102e:	80 5d       	subi	r24, 0xD0	; 208
    1030:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	88 23       	and	r24, r24
    103e:	64 f7       	brge	.-40     	; 0x1018 <CLCD_voidSendNumber+0x14a>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
	}
	}
}
    1040:	61 96       	adiw	r28, 0x11	; 17
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <CLCD_voidGoToXY+0x6>
    1058:	0f 92       	push	r0
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRAMAdd;
	if(Copy_u8YPos==0u)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	88 23       	and	r24, r24
    1066:	19 f4       	brne	.+6      	; 0x106e <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAMAdd=Copy_u8XPos;
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	06 c0       	rjmp	.+12     	; 0x107a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos==1u)
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	19 f4       	brne	.+6      	; 0x107a <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRAMAdd=Copy_u8XPos+0x40;
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	80 5c       	subi	r24, 0xC0	; 192
    1078:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRAMAdd|=1<<7;
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendComd(Local_u8DDRAMAdd);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <CLCD_u8SinWaveSendString>:
uint8 CLCD_u8SinWaveSendString(char Copy_chstring[])
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <CLCD_u8SinWaveSendString+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <CLCD_u8SinWaveSendString+0x8>
    109a:	00 d0       	rcall	.+0      	; 0x109c <CLCD_u8SinWaveSendString+0xa>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Local_u8StateError=OK;
    10a4:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_u8XCoordinate=0;
    10a6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8YCoordinate=0;
    10a8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	51 f1       	breq	.+84     	; 0x1106 <CLCD_u8SinWaveSendString+0x74>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	1c c0       	rjmp	.+56     	; 0x10ee <CLCD_u8SinWaveSendString+0x5c>
	{
		CLCD_voidGoToXY(Local_u8XCoordinate,Local_u8YCoordinate);
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	6a 81       	ldd	r22, Y+2	; 0x02
    10ba:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	80 81       	ld	r24, Z
    10d0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
		if(Local_u8YCoordinate==0)Local_u8YCoordinate=1;
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 23       	and	r24, r24
    10d8:	19 f4       	brne	.+6      	; 0x10e0 <CLCD_u8SinWaveSendString+0x4e>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <CLCD_u8SinWaveSendString+0x50>
		else Local_u8YCoordinate=0;
    10e0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8StateError=OK;
	uint8 Local_u8XCoordinate=0;
	uint8 Local_u8YCoordinate=0;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	8b 83       	std	Y+3, r24	; 0x03
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	fc 01       	movw	r30, r24
    10fa:	e2 0f       	add	r30, r18
    10fc:	f3 1f       	adc	r31, r19
    10fe:	80 81       	ld	r24, Z
    1100:	88 23       	and	r24, r24
    1102:	c9 f6       	brne	.-78     	; 0x10b6 <CLCD_u8SinWaveSendString+0x24>
    1104:	02 c0       	rjmp	.+4      	; 0x110a <CLCD_u8SinWaveSendString+0x78>
		else Local_u8YCoordinate=0;
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	8c 83       	std	Y+4, r24	; 0x04
	}
	return Local_u8StateError;
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    110c:	26 96       	adiw	r28, 0x06	; 6
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 Copy_u8Pattern[],uint8 Copy_u8PatternNum,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	27 97       	sbiw	r28, 0x07	; 7
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	8b 83       	std	Y+3, r24	; 0x03
    1136:	6d 83       	std	Y+5, r22	; 0x05
    1138:	4e 83       	std	Y+6, r20	; 0x06
    113a:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 64       	ori	r24, 0x40	; 64
    1154:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendComd(Local_u8CGRAMAdd);
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	0e c0       	rjmp	.+28     	; 0x117c <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	fc 01       	movw	r30, r24
    116c:	e2 0f       	add	r30, r18
    116e:	f3 1f       	adc	r31, r19
    1170:	80 81       	ld	r24, Z
    1172:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
{
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
	CLCD_voidSendComd(Local_u8CGRAMAdd);
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	78 f3       	brcs	.-34     	; 0x1160 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1182:	8e 81       	ldd	r24, Y+6	; 0x06
    1184:	6f 81       	ldd	r22, Y+7	; 0x07
    1186:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNum);
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
}
    1190:	27 96       	adiw	r28, 0x07	; 7
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <CLCD_voidSendBinaryNum>:

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <CLCD_voidSendBinaryNum+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <CLCD_voidSendBinaryNum+0x8>
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	6a 83       	std	Y+2, r22	; 0x02
    11b2:	7b 83       	std	Y+3, r23	; 0x03
    11b4:	8c 83       	std	Y+4, r24	; 0x04
    11b6:	9d 83       	std	Y+5, r25	; 0x05
	sint8 Local_s8Counter;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    11b8:	8f e1       	ldi	r24, 0x1F	; 31
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	29 c0       	rjmp	.+82     	; 0x1210 <CLCD_voidSendBinaryNum+0x6e>
	{
		CLCD_voidGoToXY((31-Local_s8Counter),0);
    11be:	99 81       	ldd	r25, Y+1	; 0x01
    11c0:	8f e1       	ldi	r24, 0x1F	; 31
    11c2:	89 1b       	sub	r24, r25
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	33 27       	eor	r19, r19
    11d0:	27 fd       	sbrc	r18, 7
    11d2:	30 95       	com	r19
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	9b 81       	ldd	r25, Y+3	; 0x03
    11d8:	ac 81       	ldd	r26, Y+4	; 0x04
    11da:	bd 81       	ldd	r27, Y+5	; 0x05
    11dc:	02 2e       	mov	r0, r18
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <CLCD_voidSendBinaryNum+0x46>
    11e0:	b5 95       	asr	r27
    11e2:	a7 95       	ror	r26
    11e4:	97 95       	ror	r25
    11e6:	87 95       	ror	r24
    11e8:	0a 94       	dec	r0
    11ea:	d2 f7       	brpl	.-12     	; 0x11e0 <CLCD_voidSendBinaryNum+0x3e>
    11ec:	81 70       	andi	r24, 0x01	; 1
    11ee:	90 70       	andi	r25, 0x00	; 0
    11f0:	a0 70       	andi	r26, 0x00	; 0
    11f2:	b0 70       	andi	r27, 0x00	; 0
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	a1 05       	cpc	r26, r1
    11f8:	b1 05       	cpc	r27, r1
    11fa:	21 f4       	brne	.+8      	; 0x1204 <CLCD_voidSendBinaryNum+0x62>
		{
			CLCD_voidSendData('0');
    11fc:	80 e3       	ldi	r24, 0x30	; 48
    11fe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
    1202:	03 c0       	rjmp	.+6      	; 0x120a <CLCD_voidSendBinaryNum+0x68>
		}
		else
		{
			CLCD_voidSendData('1');
    1204:	81 e3       	ldi	r24, 0x31	; 49
    1206:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
}

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
	sint8 Local_s8Counter;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	80 31       	cpi	r24, 0x10	; 16
    1214:	a4 f6       	brge	.-88     	; 0x11be <CLCD_voidSendBinaryNum+0x1c>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    1216:	8f e0       	ldi	r24, 0x0F	; 15
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	29 c0       	rjmp	.+82     	; 0x126e <CLCD_voidSendBinaryNum+0xcc>
		{
			CLCD_voidGoToXY((15-Local_s8Counter),1);
    121c:	99 81       	ldd	r25, Y+1	; 0x01
    121e:	8f e0       	ldi	r24, 0x0F	; 15
    1220:	89 1b       	sub	r24, r25
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	33 27       	eor	r19, r19
    122e:	27 fd       	sbrc	r18, 7
    1230:	30 95       	com	r19
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	ac 81       	ldd	r26, Y+4	; 0x04
    1238:	bd 81       	ldd	r27, Y+5	; 0x05
    123a:	02 2e       	mov	r0, r18
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <CLCD_voidSendBinaryNum+0xa4>
    123e:	b5 95       	asr	r27
    1240:	a7 95       	ror	r26
    1242:	97 95       	ror	r25
    1244:	87 95       	ror	r24
    1246:	0a 94       	dec	r0
    1248:	d2 f7       	brpl	.-12     	; 0x123e <CLCD_voidSendBinaryNum+0x9c>
    124a:	81 70       	andi	r24, 0x01	; 1
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	a0 70       	andi	r26, 0x00	; 0
    1250:	b0 70       	andi	r27, 0x00	; 0
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	a1 05       	cpc	r26, r1
    1256:	b1 05       	cpc	r27, r1
    1258:	21 f4       	brne	.+8      	; 0x1262 <CLCD_voidSendBinaryNum+0xc0>
			{
				CLCD_voidSendData('0');
    125a:	80 e3       	ldi	r24, 0x30	; 48
    125c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <CLCD_voidSendBinaryNum+0xc6>
			}
			else
			{
				CLCD_voidSendData('1');
    1262:	81 e3       	ldi	r24, 0x31	; 49
    1264:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	81 50       	subi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 23       	and	r24, r24
    1272:	a4 f6       	brge	.-88     	; 0x121c <CLCD_voidSendBinaryNum+0x7a>
			{
				CLCD_voidSendData('1');
			}

	}
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <CLCD_voidSendHexaNum>:

void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	2e 97       	sbiw	r28, 0x0e	; 14
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	6b 87       	std	Y+11, r22	; 0x0b
    129a:	7c 87       	std	Y+12, r23	; 0x0c
    129c:	8d 87       	std	Y+13, r24	; 0x0d
    129e:	9e 87       	std	Y+14, r25	; 0x0e
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    12a0:	87 e0       	ldi	r24, 0x07	; 7
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	36 c0       	rjmp	.+108    	; 0x1312 <CLCD_voidSendHexaNum+0x8e>
	{
		Local_u8Remainder=Copy_s32Number%16;
    12a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a8:	8f 70       	andi	r24, 0x0F	; 15
    12aa:	8a 83       	std	Y+2, r24	; 0x02
		if(Local_u8Remainder<=9)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	8a 30       	cpi	r24, 0x0A	; 10
    12b0:	78 f4       	brcc	.+30     	; 0x12d0 <CLCD_voidSendHexaNum+0x4c>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder+'0';
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	33 27       	eor	r19, r19
    12b8:	27 fd       	sbrc	r18, 7
    12ba:	30 95       	com	r19
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	48 2f       	mov	r20, r24
    12c0:	40 5d       	subi	r20, 0xD0	; 208
    12c2:	ce 01       	movw	r24, r28
    12c4:	03 96       	adiw	r24, 0x03	; 3
    12c6:	fc 01       	movw	r30, r24
    12c8:	e2 0f       	add	r30, r18
    12ca:	f3 1f       	adc	r31, r19
    12cc:	40 83       	st	Z, r20
    12ce:	0e c0       	rjmp	.+28     	; 0x12ec <CLCD_voidSendHexaNum+0x68>
		}
		else
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	28 2f       	mov	r18, r24
    12d4:	33 27       	eor	r19, r19
    12d6:	27 fd       	sbrc	r18, 7
    12d8:	30 95       	com	r19
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	48 2f       	mov	r20, r24
    12de:	49 5c       	subi	r20, 0xC9	; 201
    12e0:	ce 01       	movw	r24, r28
    12e2:	03 96       	adiw	r24, 0x03	; 3
    12e4:	fc 01       	movw	r30, r24
    12e6:	e2 0f       	add	r30, r18
    12e8:	f3 1f       	adc	r31, r19
    12ea:	40 83       	st	Z, r20
		}
		Copy_s32Number/=16;
    12ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f0:	ad 85       	ldd	r26, Y+13	; 0x0d
    12f2:	be 85       	ldd	r27, Y+14	; 0x0e
    12f4:	68 94       	set
    12f6:	13 f8       	bld	r1, 3
    12f8:	b6 95       	lsr	r27
    12fa:	a7 95       	ror	r26
    12fc:	97 95       	ror	r25
    12fe:	87 95       	ror	r24
    1300:	16 94       	lsr	r1
    1302:	d1 f7       	brne	.-12     	; 0x12f8 <CLCD_voidSendHexaNum+0x74>
    1304:	8b 87       	std	Y+11, r24	; 0x0b
    1306:	9c 87       	std	Y+12, r25	; 0x0c
    1308:	ad 87       	std	Y+13, r26	; 0x0d
    130a:	be 87       	std	Y+14, r27	; 0x0e
void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	81 50       	subi	r24, 0x01	; 1
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	88 23       	and	r24, r24
    1316:	3c f6       	brge	.-114    	; 0x12a6 <CLCD_voidSendHexaNum+0x22>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    1318:	19 82       	std	Y+1, r1	; 0x01
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <CLCD_voidSendHexaNum+0xc0>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	28 2f       	mov	r18, r24
    1328:	33 27       	eor	r19, r19
    132a:	27 fd       	sbrc	r18, 7
    132c:	30 95       	com	r19
    132e:	ce 01       	movw	r24, r28
    1330:	03 96       	adiw	r24, 0x03	; 3
    1332:	fc 01       	movw	r30, r24
    1334:	e2 0f       	add	r30, r18
    1336:	f3 1f       	adc	r31, r19
    1338:	80 81       	ld	r24, Z
    133a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	4c f3       	brlt	.-46     	; 0x131c <CLCD_voidSendHexaNum+0x98>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
	}

}
    134a:	2e 96       	adiw	r28, 0x0e	; 14
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_prv.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	28 97       	sbiw	r28, 0x08	; 8
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	8a 83       	std	Y+2, r24	; 0x02
    1372:	6b 83       	std	Y+3, r22	; 0x03
    1374:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1376:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	08 f0       	brcs	.+2      	; 0x1380 <DIO_u8SetPinDirection+0x24>
    137e:	f4 c0       	rjmp	.+488    	; 0x1568 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	88 23       	and	r24, r24
    1384:	09 f0       	breq	.+2      	; 0x1388 <DIO_u8SetPinDirection+0x2c>
    1386:	77 c0       	rjmp	.+238    	; 0x1476 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	38 87       	std	Y+8, r19	; 0x08
    1390:	2f 83       	std	Y+7, r18	; 0x07
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	59 f1       	breq	.+86     	; 0x13f2 <DIO_u8SetPinDirection+0x96>
    139c:	2f 81       	ldd	r18, Y+7	; 0x07
    139e:	38 85       	ldd	r19, Y+8	; 0x08
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <DIO_u8SetPinDirection+0x54>
    13a6:	8f 81       	ldd	r24, Y+7	; 0x07
    13a8:	98 85       	ldd	r25, Y+8	; 0x08
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	69 f0       	breq	.+26     	; 0x13c8 <DIO_u8SetPinDirection+0x6c>
    13ae:	60 c0       	rjmp	.+192    	; 0x1470 <DIO_u8SetPinDirection+0x114>
    13b0:	2f 81       	ldd	r18, Y+7	; 0x07
    13b2:	38 85       	ldd	r19, Y+8	; 0x08
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	89 f1       	breq	.+98     	; 0x141c <DIO_u8SetPinDirection+0xc0>
    13ba:	8f 81       	ldd	r24, Y+7	; 0x07
    13bc:	98 85       	ldd	r25, Y+8	; 0x08
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <DIO_u8SetPinDirection+0x6a>
    13c4:	40 c0       	rjmp	.+128    	; 0x1446 <DIO_u8SetPinDirection+0xea>
    13c6:	54 c0       	rjmp	.+168    	; 0x1470 <DIO_u8SetPinDirection+0x114>
			{
			case(DIO_u8PORTA):
					CLR_BIT(DDRA,Copy_u8Pin);
    13c8:	aa e3       	ldi	r26, 0x3A	; 58
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea e3       	ldi	r30, 0x3A	; 58
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_u8SetPinDirection+0x8a>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_u8SetPinDirection+0x86>
    13ea:	80 95       	com	r24
    13ec:	84 23       	and	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	bd c0       	rjmp	.+378    	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					CLR_BIT(DDRB,Copy_u8Pin);
    13f2:	a7 e3       	ldi	r26, 0x37	; 55
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_u8SetPinDirection+0xb4>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_u8SetPinDirection+0xb0>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	a8 c0       	rjmp	.+336    	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					CLR_BIT(DDRC,Copy_u8Pin);
    141c:	a4 e3       	ldi	r26, 0x34	; 52
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e3       	ldi	r30, 0x34	; 52
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_u8SetPinDirection+0xde>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_u8SetPinDirection+0xda>
    143e:	80 95       	com	r24
    1440:	84 23       	and	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	93 c0       	rjmp	.+294    	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					CLR_BIT(DDRD,Copy_u8Pin);
    1446:	a1 e3       	ldi	r26, 0x31	; 49
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e1 e3       	ldi	r30, 0x31	; 49
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_u8SetPinDirection+0x108>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_u8SetPinDirection+0x104>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	7e c0       	rjmp	.+252    	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	7b c0       	rjmp	.+246    	; 0x156c <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	09 f0       	breq	.+2      	; 0x147e <DIO_u8SetPinDirection+0x122>
    147c:	72 c0       	rjmp	.+228    	; 0x1562 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3e 83       	std	Y+6, r19	; 0x06
    1486:	2d 83       	std	Y+5, r18	; 0x05
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	49 f1       	breq	.+82     	; 0x14e4 <DIO_u8SetPinDirection+0x188>
    1492:	2d 81       	ldd	r18, Y+5	; 0x05
    1494:	3e 81       	ldd	r19, Y+6	; 0x06
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	2c f4       	brge	.+10     	; 0x14a6 <DIO_u8SetPinDirection+0x14a>
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 f0       	breq	.+24     	; 0x14bc <DIO_u8SetPinDirection+0x160>
    14a4:	5b c0       	rjmp	.+182    	; 0x155c <DIO_u8SetPinDirection+0x200>
    14a6:	2d 81       	ldd	r18, Y+5	; 0x05
    14a8:	3e 81       	ldd	r19, Y+6	; 0x06
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	71 f1       	breq	.+92     	; 0x150c <DIO_u8SetPinDirection+0x1b0>
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	e9 f1       	breq	.+122    	; 0x1534 <DIO_u8SetPinDirection+0x1d8>
    14ba:	50 c0       	rjmp	.+160    	; 0x155c <DIO_u8SetPinDirection+0x200>
			{
			case(DIO_u8PORTA):
					SET_BIT(DDRA,Copy_u8Pin);
    14bc:	aa e3       	ldi	r26, 0x3A	; 58
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ea e3       	ldi	r30, 0x3A	; 58
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_u8SetPinDirection+0x17e>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_u8SetPinDirection+0x17a>
    14de:	84 2b       	or	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	44 c0       	rjmp	.+136    	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					SET_BIT(DDRB,Copy_u8Pin);
    14e4:	a7 e3       	ldi	r26, 0x37	; 55
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e3       	ldi	r30, 0x37	; 55
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_u8SetPinDirection+0x1a6>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_u8SetPinDirection+0x1a2>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	30 c0       	rjmp	.+96     	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					SET_BIT(DDRC,Copy_u8Pin);
    150c:	a4 e3       	ldi	r26, 0x34	; 52
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e4 e3       	ldi	r30, 0x34	; 52
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_u8SetPinDirection+0x1ce>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_u8SetPinDirection+0x1ca>
    152e:	84 2b       	or	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	1c c0       	rjmp	.+56     	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					SET_BIT(DDRD,Copy_u8Pin);
    1534:	a1 e3       	ldi	r26, 0x31	; 49
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e1 e3       	ldi	r30, 0x31	; 49
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_u8SetPinDirection+0x1f6>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_u8SetPinDirection+0x1f2>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	08 c0       	rjmp	.+16     	; 0x156c <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	05 c0       	rjmp	.+10     	; 0x156c <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_u8SetPinDirection+0x210>


	}
	else
	{
		 Local_u8ErrorState= NOK;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    156c:	89 81       	ldd	r24, Y+1	; 0x01
}
    156e:	28 96       	adiw	r28, 0x08	; 8
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Value)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	28 97       	sbiw	r28, 0x08	; 8
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	8a 83       	std	Y+2, r24	; 0x02
    1596:	6b 83       	std	Y+3, r22	; 0x03
    1598:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    159a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 30       	cpi	r24, 0x08	; 8
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <DIO_u8SetPinValue+0x24>
    15a2:	f4 c0       	rjmp	.+488    	; 0x178c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	09 f0       	breq	.+2      	; 0x15ac <DIO_u8SetPinValue+0x2c>
    15aa:	72 c0       	rjmp	.+228    	; 0x1690 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	38 87       	std	Y+8, r19	; 0x08
    15b4:	2f 83       	std	Y+7, r18	; 0x07
    15b6:	8f 81       	ldd	r24, Y+7	; 0x07
    15b8:	98 85       	ldd	r25, Y+8	; 0x08
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	49 f1       	breq	.+82     	; 0x1612 <DIO_u8SetPinValue+0x92>
    15c0:	2f 81       	ldd	r18, Y+7	; 0x07
    15c2:	38 85       	ldd	r19, Y+8	; 0x08
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <DIO_u8SetPinValue+0x54>
    15ca:	8f 81       	ldd	r24, Y+7	; 0x07
    15cc:	98 85       	ldd	r25, Y+8	; 0x08
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	61 f0       	breq	.+24     	; 0x15ea <DIO_u8SetPinValue+0x6a>
    15d2:	5b c0       	rjmp	.+182    	; 0x168a <DIO_u8SetPinValue+0x10a>
    15d4:	2f 81       	ldd	r18, Y+7	; 0x07
    15d6:	38 85       	ldd	r19, Y+8	; 0x08
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	71 f1       	breq	.+92     	; 0x163a <DIO_u8SetPinValue+0xba>
    15de:	8f 81       	ldd	r24, Y+7	; 0x07
    15e0:	98 85       	ldd	r25, Y+8	; 0x08
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	91 05       	cpc	r25, r1
    15e6:	e9 f1       	breq	.+122    	; 0x1662 <DIO_u8SetPinValue+0xe2>
    15e8:	50 c0       	rjmp	.+160    	; 0x168a <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    15ea:	ab e3       	ldi	r26, 0x3B	; 59
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	eb e3       	ldi	r30, 0x3B	; 59
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_u8SetPinValue+0x88>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_u8SetPinValue+0x84>
    160c:	84 2b       	or	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	bf c0       	rjmp	.+382    	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    1612:	a8 e3       	ldi	r26, 0x38	; 56
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e8 e3       	ldi	r30, 0x38	; 56
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_u8SetPinValue+0xb0>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <DIO_u8SetPinValue+0xac>
    1634:	84 2b       	or	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	ab c0       	rjmp	.+342    	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    163a:	a5 e3       	ldi	r26, 0x35	; 53
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e3       	ldi	r30, 0x35	; 53
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_u8SetPinValue+0xd8>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_u8SetPinValue+0xd4>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	97 c0       	rjmp	.+302    	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				SET_BIT(PORTD,Copy_u8Pin);
    1662:	a2 e3       	ldi	r26, 0x32	; 50
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e2 e3       	ldi	r30, 0x32	; 50
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_u8SetPinValue+0x100>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_u8SetPinValue+0xfc>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	83 c0       	rjmp	.+262    	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	80 c0       	rjmp	.+256    	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	88 23       	and	r24, r24
    1694:	09 f0       	breq	.+2      	; 0x1698 <DIO_u8SetPinValue+0x118>
    1696:	77 c0       	rjmp	.+238    	; 0x1786 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3e 83       	std	Y+6, r19	; 0x06
    16a0:	2d 83       	std	Y+5, r18	; 0x05
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	59 f1       	breq	.+86     	; 0x1702 <DIO_u8SetPinValue+0x182>
    16ac:	2d 81       	ldd	r18, Y+5	; 0x05
    16ae:	3e 81       	ldd	r19, Y+6	; 0x06
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <DIO_u8SetPinValue+0x140>
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f0       	breq	.+26     	; 0x16d8 <DIO_u8SetPinValue+0x158>
    16be:	60 c0       	rjmp	.+192    	; 0x1780 <DIO_u8SetPinValue+0x200>
    16c0:	2d 81       	ldd	r18, Y+5	; 0x05
    16c2:	3e 81       	ldd	r19, Y+6	; 0x06
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	89 f1       	breq	.+98     	; 0x172c <DIO_u8SetPinValue+0x1ac>
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <DIO_u8SetPinValue+0x156>
    16d4:	40 c0       	rjmp	.+128    	; 0x1756 <DIO_u8SetPinValue+0x1d6>
    16d6:	54 c0       	rjmp	.+168    	; 0x1780 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:
				CLR_BIT(PORTA,Copy_u8Pin);
    16d8:	ab e3       	ldi	r26, 0x3B	; 59
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	eb e3       	ldi	r30, 0x3B	; 59
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_u8SetPinValue+0x176>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_u8SetPinValue+0x172>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	47 c0       	rjmp	.+142    	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				CLR_BIT(PORTB,Copy_u8Pin);
    1702:	a8 e3       	ldi	r26, 0x38	; 56
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e8 e3       	ldi	r30, 0x38	; 56
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_u8SetPinValue+0x1a0>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_u8SetPinValue+0x19c>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	32 c0       	rjmp	.+100    	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				CLR_BIT(PORTC,Copy_u8Pin);
    172c:	a5 e3       	ldi	r26, 0x35	; 53
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e3       	ldi	r30, 0x35	; 53
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8SetPinValue+0x1ca>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_u8SetPinValue+0x1c6>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	1d c0       	rjmp	.+58     	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				CLR_BIT(PORTD,Copy_u8Pin);
    1756:	a2 e3       	ldi	r26, 0x32	; 50
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e2 e3       	ldi	r30, 0x32	; 50
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_u8SetPinValue+0x1f4>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_u8SetPinValue+0x1f0>
    1778:	80 95       	com	r24
    177a:	84 23       	and	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState= NOK;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
}
    1792:	28 96       	adiw	r28, 0x08	; 8
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	27 97       	sbiw	r28, 0x07	; 7
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	6b 83       	std	Y+3, r22	; 0x03
    17bc:	5d 83       	std	Y+5, r21	; 0x05
    17be:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    17c0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	09 f4       	brne	.+2      	; 0x17cc <DIO_u8GetPinValue+0x28>
    17ca:	7b c0       	rjmp	.+246    	; 0x18c2 <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_u8Pin<=DIO_u8PIN7)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	88 30       	cpi	r24, 0x08	; 8
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <DIO_u8GetPinValue+0x30>
    17d2:	74 c0       	rjmp	.+232    	; 0x18bc <DIO_u8GetPinValue+0x118>
		{
			switch (Copy_u8Port)
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	3f 83       	std	Y+7, r19	; 0x07
    17dc:	2e 83       	std	Y+6, r18	; 0x06
    17de:	4e 81       	ldd	r20, Y+6	; 0x06
    17e0:	5f 81       	ldd	r21, Y+7	; 0x07
    17e2:	41 30       	cpi	r20, 0x01	; 1
    17e4:	51 05       	cpc	r21, r1
    17e6:	59 f1       	breq	.+86     	; 0x183e <DIO_u8GetPinValue+0x9a>
    17e8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ea:	9f 81       	ldd	r25, Y+7	; 0x07
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	91 05       	cpc	r25, r1
    17f0:	34 f4       	brge	.+12     	; 0x17fe <DIO_u8GetPinValue+0x5a>
    17f2:	2e 81       	ldd	r18, Y+6	; 0x06
    17f4:	3f 81       	ldd	r19, Y+7	; 0x07
    17f6:	21 15       	cp	r18, r1
    17f8:	31 05       	cpc	r19, r1
    17fa:	69 f0       	breq	.+26     	; 0x1816 <DIO_u8GetPinValue+0x72>
    17fc:	5c c0       	rjmp	.+184    	; 0x18b6 <DIO_u8GetPinValue+0x112>
    17fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1800:	5f 81       	ldd	r21, Y+7	; 0x07
    1802:	42 30       	cpi	r20, 0x02	; 2
    1804:	51 05       	cpc	r21, r1
    1806:	79 f1       	breq	.+94     	; 0x1866 <DIO_u8GetPinValue+0xc2>
    1808:	8e 81       	ldd	r24, Y+6	; 0x06
    180a:	9f 81       	ldd	r25, Y+7	; 0x07
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	91 05       	cpc	r25, r1
    1810:	09 f4       	brne	.+2      	; 0x1814 <DIO_u8GetPinValue+0x70>
    1812:	3d c0       	rjmp	.+122    	; 0x188e <DIO_u8GetPinValue+0xea>
    1814:	50 c0       	rjmp	.+160    	; 0x18b6 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:
				*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);
    1816:	e9 e3       	ldi	r30, 0x39	; 57
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a9 01       	movw	r20, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_u8GetPinValue+0x8a>
    182a:	55 95       	asr	r21
    182c:	47 95       	ror	r20
    182e:	8a 95       	dec	r24
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_u8GetPinValue+0x86>
    1832:	ca 01       	movw	r24, r20
    1834:	81 70       	andi	r24, 0x01	; 1
    1836:	ec 81       	ldd	r30, Y+4	; 0x04
    1838:	fd 81       	ldd	r31, Y+5	; 0x05
    183a:	80 83       	st	Z, r24
    183c:	44 c0       	rjmp	.+136    	; 0x18c6 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTB:
				*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);
    183e:	e6 e3       	ldi	r30, 0x36	; 54
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a9 01       	movw	r20, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_u8GetPinValue+0xb2>
    1852:	55 95       	asr	r21
    1854:	47 95       	ror	r20
    1856:	8a 95       	dec	r24
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_u8GetPinValue+0xae>
    185a:	ca 01       	movw	r24, r20
    185c:	81 70       	andi	r24, 0x01	; 1
    185e:	ec 81       	ldd	r30, Y+4	; 0x04
    1860:	fd 81       	ldd	r31, Y+5	; 0x05
    1862:	80 83       	st	Z, r24
    1864:	30 c0       	rjmp	.+96     	; 0x18c6 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTC:
				*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);
    1866:	e3 e3       	ldi	r30, 0x33	; 51
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a9 01       	movw	r20, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_u8GetPinValue+0xda>
    187a:	55 95       	asr	r21
    187c:	47 95       	ror	r20
    187e:	8a 95       	dec	r24
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_u8GetPinValue+0xd6>
    1882:	ca 01       	movw	r24, r20
    1884:	81 70       	andi	r24, 0x01	; 1
    1886:	ec 81       	ldd	r30, Y+4	; 0x04
    1888:	fd 81       	ldd	r31, Y+5	; 0x05
    188a:	80 83       	st	Z, r24
    188c:	1c c0       	rjmp	.+56     	; 0x18c6 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTD:
				*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);
    188e:	e0 e3       	ldi	r30, 0x30	; 48
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_u8GetPinValue+0x102>
    18a2:	55 95       	asr	r21
    18a4:	47 95       	ror	r20
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_u8GetPinValue+0xfe>
    18aa:	ca 01       	movw	r24, r20
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	ec 81       	ldd	r30, Y+4	; 0x04
    18b0:	fd 81       	ldd	r31, Y+5	; 0x05
    18b2:	80 83       	st	Z, r24
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <DIO_u8GetPinValue+0x122>
				break;
			default:
				Local_u8ErrorState= NOK;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c8:	27 96       	adiw	r28, 0x07	; 7
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port,uint8 Copy_u8Direction)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <DIO_u8SetPortDirection+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <DIO_u8SetPortDirection+0x8>
    18e2:	0f 92       	push	r0
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=0;
    18ec:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3d 83       	std	Y+5, r19	; 0x05
    18f6:	2c 83       	std	Y+4, r18	; 0x04
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	d1 f0       	breq	.+52     	; 0x1936 <DIO_u8SetPortDirection+0x5c>
    1902:	2c 81       	ldd	r18, Y+4	; 0x04
    1904:	3d 81       	ldd	r19, Y+5	; 0x05
    1906:	22 30       	cpi	r18, 0x02	; 2
    1908:	31 05       	cpc	r19, r1
    190a:	2c f4       	brge	.+10     	; 0x1916 <DIO_u8SetPortDirection+0x3c>
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	61 f0       	breq	.+24     	; 0x192c <DIO_u8SetPortDirection+0x52>
    1914:	1f c0       	rjmp	.+62     	; 0x1954 <DIO_u8SetPortDirection+0x7a>
    1916:	2c 81       	ldd	r18, Y+4	; 0x04
    1918:	3d 81       	ldd	r19, Y+5	; 0x05
    191a:	22 30       	cpi	r18, 0x02	; 2
    191c:	31 05       	cpc	r19, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <DIO_u8SetPortDirection+0x66>
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	91 05       	cpc	r25, r1
    1928:	81 f0       	breq	.+32     	; 0x194a <DIO_u8SetPortDirection+0x70>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <DIO_u8SetPortDirection+0x7a>
		{
		case(DIO_u8PORTA):
				DDRA=Copy_u8Direction;
    192c:	ea e3       	ldi	r30, 0x3A	; 58
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	80 83       	st	Z, r24
    1934:	11 c0       	rjmp	.+34     	; 0x1958 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTB):
				DDRB=Copy_u8Direction;
    1936:	e7 e3       	ldi	r30, 0x37	; 55
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	80 83       	st	Z, r24
    193e:	0c c0       	rjmp	.+24     	; 0x1958 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTC):
				DDRC=Copy_u8Direction;
    1940:	e4 e3       	ldi	r30, 0x34	; 52
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	80 83       	st	Z, r24
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTD):
				DDRD=Copy_u8Direction;
    194a:	e1 e3       	ldi	r30, 0x31	; 49
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	80 83       	st	Z, r24
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_u8SetPortDirection+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	return Local_u8ErrorState;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <DIO_u8SetPortValue+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <DIO_u8SetPortValue+0x8>
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=0;
    197c:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	3d 83       	std	Y+5, r19	; 0x05
    1986:	2c 83       	std	Y+4, r18	; 0x04
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	d1 f0       	breq	.+52     	; 0x19c6 <DIO_u8SetPortValue+0x5c>
    1992:	2c 81       	ldd	r18, Y+4	; 0x04
    1994:	3d 81       	ldd	r19, Y+5	; 0x05
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	2c f4       	brge	.+10     	; 0x19a6 <DIO_u8SetPortValue+0x3c>
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	9d 81       	ldd	r25, Y+5	; 0x05
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	61 f0       	breq	.+24     	; 0x19bc <DIO_u8SetPortValue+0x52>
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <DIO_u8SetPortValue+0x7a>
    19a6:	2c 81       	ldd	r18, Y+4	; 0x04
    19a8:	3d 81       	ldd	r19, Y+5	; 0x05
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	81 f0       	breq	.+32     	; 0x19d0 <DIO_u8SetPortValue+0x66>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	81 f0       	breq	.+32     	; 0x19da <DIO_u8SetPortValue+0x70>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <DIO_u8SetPortValue+0x7a>
		{
		case(DIO_u8PORTA):
				PORTA=Copy_u8Value;
    19bc:	eb e3       	ldi	r30, 0x3B	; 59
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	80 83       	st	Z, r24
    19c4:	11 c0       	rjmp	.+34     	; 0x19e8 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTB):
				PORTB=Copy_u8Value;
    19c6:	e8 e3       	ldi	r30, 0x38	; 56
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	80 83       	st	Z, r24
    19ce:	0c c0       	rjmp	.+24     	; 0x19e8 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTC):
				PORTC=Copy_u8Value;
    19d0:	e5 e3       	ldi	r30, 0x35	; 53
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	80 83       	st	Z, r24
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTD):
				PORTD=Copy_u8Value;
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	80 83       	st	Z, r24
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_u8SetPortValue+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <DIO_u8TogglePinValue+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <DIO_u8TogglePinValue+0x8>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <DIO_u8TogglePinValue+0xa>
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState= OK;
    1a0c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8BitState;
		if(Copy_u8Pin<=DIO_u8PIN7)
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	88 30       	cpi	r24, 0x08	; 8
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <DIO_u8TogglePinValue+0x1c>
    1a14:	1a c1       	rjmp	.+564    	; 0x1c4a <DIO_u8TogglePinValue+0x250>
		{
			switch (Copy_u8Port)
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	3e 83       	std	Y+6, r19	; 0x06
    1a1e:	2d 83       	std	Y+5, r18	; 0x05
    1a20:	4d 81       	ldd	r20, Y+5	; 0x05
    1a22:	5e 81       	ldd	r21, Y+6	; 0x06
    1a24:	41 30       	cpi	r20, 0x01	; 1
    1a26:	51 05       	cpc	r21, r1
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <DIO_u8TogglePinValue+0x32>
    1a2a:	55 c0       	rjmp	.+170    	; 0x1ad6 <DIO_u8TogglePinValue+0xdc>
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	82 30       	cpi	r24, 0x02	; 2
    1a32:	91 05       	cpc	r25, r1
    1a34:	34 f4       	brge	.+12     	; 0x1a42 <DIO_u8TogglePinValue+0x48>
    1a36:	2d 81       	ldd	r18, Y+5	; 0x05
    1a38:	3e 81       	ldd	r19, Y+6	; 0x06
    1a3a:	21 15       	cp	r18, r1
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	71 f0       	breq	.+28     	; 0x1a5c <DIO_u8TogglePinValue+0x62>
    1a40:	01 c1       	rjmp	.+514    	; 0x1c44 <DIO_u8TogglePinValue+0x24a>
    1a42:	4d 81       	ldd	r20, Y+5	; 0x05
    1a44:	5e 81       	ldd	r21, Y+6	; 0x06
    1a46:	42 30       	cpi	r20, 0x02	; 2
    1a48:	51 05       	cpc	r21, r1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <DIO_u8TogglePinValue+0x54>
    1a4c:	81 c0       	rjmp	.+258    	; 0x1b50 <DIO_u8TogglePinValue+0x156>
    1a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a50:	9e 81       	ldd	r25, Y+6	; 0x06
    1a52:	83 30       	cpi	r24, 0x03	; 3
    1a54:	91 05       	cpc	r25, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <DIO_u8TogglePinValue+0x60>
    1a58:	b8 c0       	rjmp	.+368    	; 0x1bca <DIO_u8TogglePinValue+0x1d0>
    1a5a:	f4 c0       	rjmp	.+488    	; 0x1c44 <DIO_u8TogglePinValue+0x24a>
			{
			case DIO_u8PORTA:
				Local_u8BitState=GET_BIT(PORTA,Copy_u8Pin);
    1a5c:	eb e3       	ldi	r30, 0x3B	; 59
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a9 01       	movw	r20, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_u8TogglePinValue+0x7a>
    1a70:	55 95       	asr	r21
    1a72:	47 95       	ror	r20
    1a74:	8a 95       	dec	r24
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_u8TogglePinValue+0x76>
    1a78:	ca 01       	movw	r24, r20
    1a7a:	81 70       	andi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	a9 f4       	brne	.+42     	; 0x1aae <DIO_u8TogglePinValue+0xb4>
				{
					CLR_BIT(PORTA,Copy_u8Pin);
    1a84:	ab e3       	ldi	r26, 0x3B	; 59
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	eb e3       	ldi	r30, 0x3B	; 59
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_u8TogglePinValue+0xa8>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_u8TogglePinValue+0xa4>
    1aa6:	80 95       	com	r24
    1aa8:	84 23       	and	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	d0 c0       	rjmp	.+416    	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTA,Copy_u8Pin);
    1aae:	ab e3       	ldi	r26, 0x3B	; 59
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	eb e3       	ldi	r30, 0x3B	; 59
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_u8TogglePinValue+0xd2>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_u8TogglePinValue+0xce>
    1ad0:	84 2b       	or	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	bc c0       	rjmp	.+376    	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTB:
				Local_u8BitState=GET_BIT(PORTB,Copy_u8Pin);
    1ad6:	e8 e3       	ldi	r30, 0x38	; 56
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_u8TogglePinValue+0xf4>
    1aea:	55 95       	asr	r21
    1aec:	47 95       	ror	r20
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_u8TogglePinValue+0xf0>
    1af2:	ca 01       	movw	r24, r20
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	a9 f4       	brne	.+42     	; 0x1b28 <DIO_u8TogglePinValue+0x12e>
				{
					CLR_BIT(PORTB,Copy_u8Pin);
    1afe:	a8 e3       	ldi	r26, 0x38	; 56
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e8 e3       	ldi	r30, 0x38	; 56
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	02 2e       	mov	r0, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <DIO_u8TogglePinValue+0x122>
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	0a 94       	dec	r0
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <DIO_u8TogglePinValue+0x11e>
    1b20:	80 95       	com	r24
    1b22:	84 23       	and	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	93 c0       	rjmp	.+294    	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTB,Copy_u8Pin);
    1b28:	a8 e3       	ldi	r26, 0x38	; 56
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e8 e3       	ldi	r30, 0x38	; 56
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <DIO_u8TogglePinValue+0x14c>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <DIO_u8TogglePinValue+0x148>
    1b4a:	84 2b       	or	r24, r20
    1b4c:	8c 93       	st	X, r24
    1b4e:	7f c0       	rjmp	.+254    	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTC:
				Local_u8BitState=GET_BIT(PORTC,Copy_u8Pin);
    1b50:	e5 e3       	ldi	r30, 0x35	; 53
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a9 01       	movw	r20, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_u8TogglePinValue+0x16e>
    1b64:	55 95       	asr	r21
    1b66:	47 95       	ror	r20
    1b68:	8a 95       	dec	r24
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_u8TogglePinValue+0x16a>
    1b6c:	ca 01       	movw	r24, r20
    1b6e:	81 70       	andi	r24, 0x01	; 1
    1b70:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	a9 f4       	brne	.+42     	; 0x1ba2 <DIO_u8TogglePinValue+0x1a8>
				{
					CLR_BIT(PORTC,Copy_u8Pin);
    1b78:	a5 e3       	ldi	r26, 0x35	; 53
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_u8TogglePinValue+0x19c>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_u8TogglePinValue+0x198>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	56 c0       	rjmp	.+172    	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTC,Copy_u8Pin);
    1ba2:	a5 e3       	ldi	r26, 0x35	; 53
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e5 e3       	ldi	r30, 0x35	; 53
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_u8TogglePinValue+0x1c6>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_u8TogglePinValue+0x1c2>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	42 c0       	rjmp	.+132    	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTD:
				Local_u8BitState=GET_BIT(PORTD,Copy_u8Pin);
    1bca:	e2 e3       	ldi	r30, 0x32	; 50
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a9 01       	movw	r20, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_u8TogglePinValue+0x1e8>
    1bde:	55 95       	asr	r21
    1be0:	47 95       	ror	r20
    1be2:	8a 95       	dec	r24
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <DIO_u8TogglePinValue+0x1e4>
    1be6:	ca 01       	movw	r24, r20
    1be8:	81 70       	andi	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	a9 f4       	brne	.+42     	; 0x1c1c <DIO_u8TogglePinValue+0x222>
				{
					CLR_BIT(PORTD,Copy_u8Pin);
    1bf2:	a2 e3       	ldi	r26, 0x32	; 50
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e2 e3       	ldi	r30, 0x32	; 50
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_u8TogglePinValue+0x216>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_u8TogglePinValue+0x212>
    1c14:	80 95       	com	r24
    1c16:	84 23       	and	r24, r20
    1c18:	8c 93       	st	X, r24
    1c1a:	19 c0       	rjmp	.+50     	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTD,Copy_u8Pin);
    1c1c:	a2 e3       	ldi	r26, 0x32	; 50
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e2 e3       	ldi	r30, 0x32	; 50
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_u8TogglePinValue+0x240>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <DIO_u8TogglePinValue+0x23c>
    1c3e:	84 2b       	or	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				}
				break;
			default:
				Local_u8ErrorState= NOK;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	8a 83       	std	Y+2, r24	; 0x02
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_u8TogglePinValue+0x254>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
		}

	return Local_u8ErrorState;
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1c50:	26 96       	adiw	r28, 0x06	; 6
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <KPD_u8GetPressedKey>:
#include "KPD_prv.h"


/*required all row pins are input pulledup and cols pins are output high*/
uint8 KPD_u8GetPressedKey(void)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <KPD_u8GetPressedKey+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <KPD_u8GetPressedKey+0x8>
    1c6a:	0f 92       	push	r0
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8PressedKey=KPD_u8NO_PRESSED_KEY_VAL;
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ColCouter;
	uint8 Local_u8KeyState;
	static uint8 Local_u8ColArr[KPD_COLS_NUM]={KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN,KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
    1c74:	19 82       	std	Y+1, r1	; 0x01
    1c76:	5e c0       	rjmp	.+188    	; 0x1d34 <KPD_u8GetPressedKey+0xd2>
	{
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_LOW);
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	fc 01       	movw	r30, r24
    1c80:	ea 57       	subi	r30, 0x7A	; 122
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	90 81       	ld	r25, Z
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	69 2f       	mov	r22, r25
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
		for(Local_u8RowCouter=0;Local_u8RowCouter<KPD_ROWS_NUM;Local_u8RowCouter++)
    1c90:	1a 82       	std	Y+2, r1	; 0x02
    1c92:	3d c0       	rjmp	.+122    	; 0x1d0e <KPD_u8GetPressedKey+0xac>
		{
			DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	ee 57       	subi	r30, 0x7E	; 126
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	90 81       	ld	r25, Z
    1ca2:	9e 01       	movw	r18, r28
    1ca4:	2c 5f       	subi	r18, 0xFC	; 252
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	69 2f       	mov	r22, r25
    1cac:	a9 01       	movw	r20, r18
    1cae:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <DIO_u8GetPinValue>
			if(Local_u8KeyState==DIO_u8PIN_LOW)
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	88 23       	and	r24, r24
    1cb6:	41 f5       	brne	.+80     	; 0x1d08 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowCouter][Local_u8ColCouter];
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	48 2f       	mov	r20, r24
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	82 0f       	add	r24, r18
    1cd0:	93 1f       	adc	r25, r19
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	ee 58       	subi	r30, 0x8E	; 142
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	8b 83       	std	Y+3, r24	; 0x03
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <KPD_u8GetPressedKey+0x9a>
				/*wait until the key is released*/
				while(Local_u8KeyState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	ee 57       	subi	r30, 0x7E	; 126
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	90 81       	ld	r25, Z
    1cec:	9e 01       	movw	r18, r28
    1cee:	2c 5f       	subi	r18, 0xFC	; 252
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	69 2f       	mov	r22, r25
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
			if(Local_u8KeyState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowCouter][Local_u8ColCouter];
				/*wait until the key is released*/
				while(Local_u8KeyState==DIO_u8PIN_LOW)
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	88 23       	and	r24, r24
    1d00:	71 f3       	breq	.-36     	; 0x1cde <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
				}
				return Local_u8PressedKey;
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	1c c0       	rjmp	.+56     	; 0x1d40 <KPD_u8GetPressedKey+0xde>
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
	{
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_LOW);
		for(Local_u8RowCouter=0;Local_u8RowCouter<KPD_ROWS_NUM;Local_u8RowCouter++)
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	8f 5f       	subi	r24, 0xFF	; 255
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	84 30       	cpi	r24, 0x04	; 4
    1d12:	08 f4       	brcc	.+2      	; 0x1d16 <KPD_u8GetPressedKey+0xb4>
    1d14:	bf cf       	rjmp	.-130    	; 0x1c94 <KPD_u8GetPressedKey+0x32>
					DIO_u8GetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowCouter],&Local_u8KeyState);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_HIGH);
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	ea 57       	subi	r30, 0x7A	; 122
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	90 81       	ld	r25, Z
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	69 2f       	mov	r22, r25
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_u8SetPinValue>
	uint8 Local_u8ColCouter;
	uint8 Local_u8KeyState;
	static uint8 Local_u8ColArr[KPD_COLS_NUM]={KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN,KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_ROWS_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_ROWS_NUM][KPD_COLS_NUM]=KPD_u8BUTTON_ARR;
	for(Local_u8ColCouter=0;Local_u8ColCouter<KPD_COLS_NUM;Local_u8ColCouter++)
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	08 f4       	brcc	.+2      	; 0x1d3c <KPD_u8GetPressedKey+0xda>
    1d3a:	9e cf       	rjmp	.-196    	; 0x1c78 <KPD_u8GetPressedKey+0x16>
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8PORT,Local_u8ColArr[Local_u8ColCouter],DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_prv.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1d5a:	ea e3       	ldi	r30, 0x3A	; 58
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 ef       	ldi	r24, 0xF0	; 240
    1d60:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1d62:	e7 e3       	ldi	r30, 0x37	; 55
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 ef       	ldi	r24, 0xF0	; 240
    1d68:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1d6a:	e4 e3       	ldi	r30, 0x34	; 52
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	87 e0       	ldi	r24, 0x07	; 7
    1d70:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1d72:	e1 e3       	ldi	r30, 0x31	; 49
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1

	PORTA=PORTA_INITIAL_VALUE;
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
    1d7e:	80 83       	st	Z, r24
	PORTB=PORTB_INITIAL_VALUE;
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    1d8c:	e2 e3       	ldi	r30, 0x32	; 50
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	10 82       	st	Z, r1


}
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <main>:
#include "CLCD_interface.h"
#include "KPD_interface.h"


void main(void)
{
    1d98:	ef 92       	push	r14
    1d9a:	ff 92       	push	r15
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	c7 54       	subi	r28, 0x47	; 71
    1daa:	d0 40       	sbci	r29, 0x00	; 0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8PressedKey;
	PORT_voidInit();
    1db6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <PORT_voidInit>
	CLCD_voidInit();
    1dba:	0e 94 9a 06 	call	0xd34	; 0xd34 <CLCD_voidInit>
	uint8 Local_Num1Arr[16];
	uint8 Local_Arr1Counter=0;
    1dbe:	1c a2       	std	Y+36, r1	; 0x24
	sint32 Local_Num1;
	sint8 Local_Loop1Counter;
	uint32 Local_Num1Unit=1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e0       	ldi	r26, 0x00	; 0
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	8b 8f       	std	Y+27, r24	; 0x1b
    1dca:	9c 8f       	std	Y+28, r25	; 0x1c
    1dcc:	ad 8f       	std	Y+29, r26	; 0x1d
    1dce:	be 8f       	std	Y+30, r27	; 0x1e
	uint8 Local_Num2Arr[16];
	uint8 Local_Arr2Counter=0;
    1dd0:	1a 8e       	std	Y+26, r1	; 0x1a
	sint32 Local_Num2;
	sint8 Local_Loop2Counter;
	uint32 Local_Num2Unit=1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e0       	ldi	r26, 0x00	; 0
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	89 8b       	std	Y+17, r24	; 0x11
    1ddc:	9a 8b       	std	Y+18, r25	; 0x12
    1dde:	ab 8b       	std	Y+19, r26	; 0x13
    1de0:	bc 8b       	std	Y+20, r27	; 0x14
	uint8 Local_Operator='0';
    1de2:	80 e3       	ldi	r24, 0x30	; 48
    1de4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 Local_CalcOperator;
	sint32 Local_Res;
	sint32 Local_Remainder;
	uint8 Local_FloatIndicator1=0;
    1de6:	1e 82       	std	Y+6, r1	; 0x06
	uint8 Local_FloatIndicator2=0;
    1de8:	1d 82       	std	Y+5, r1	; 0x05
	uint16 Local_FloatCounter1=1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_FloatCounter2=1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	77 c0       	rjmp	.+238    	; 0x1eea <main+0x152>

	while(1)
	{
		while(Local_Operator!='=')
		{
		Local_u8PressedKey=KPD_u8GetPressedKey();
    1dfc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <KPD_u8GetPressedKey>
    1e00:	8d a3       	std	Y+37, r24	; 0x25
		if(Local_u8PressedKey!=0xff)
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	8f 3f       	cpi	r24, 0xFF	; 255
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <main+0x72>
    1e08:	70 c0       	rjmp	.+224    	; 0x1eea <main+0x152>
		{
			CLCD_voidSendData(Local_u8PressedKey);
    1e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			if(Local_u8PressedKey>='0'&&Local_u8PressedKey<='9'&&Local_Operator=='0')
    1e10:	8d a1       	ldd	r24, Y+37	; 0x25
    1e12:	80 33       	cpi	r24, 0x30	; 48
    1e14:	38 f1       	brcs	.+78     	; 0x1e64 <main+0xcc>
    1e16:	8d a1       	ldd	r24, Y+37	; 0x25
    1e18:	8a 33       	cpi	r24, 0x3A	; 58
    1e1a:	20 f5       	brcc	.+72     	; 0x1e64 <main+0xcc>
    1e1c:	88 89       	ldd	r24, Y+16	; 0x10
    1e1e:	80 33       	cpi	r24, 0x30	; 48
    1e20:	09 f5       	brne	.+66     	; 0x1e64 <main+0xcc>
			{
				if(Local_FloatIndicator1==1)Local_FloatCounter1=Local_FloatCounter1*10;
    1e22:	8e 81       	ldd	r24, Y+6	; 0x06
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	71 f4       	brne	.+28     	; 0x1e44 <main+0xac>
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	9c 01       	movw	r18, r24
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	c9 01       	movw	r24, r18
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
				Local_Num1Arr[Local_Arr1Counter]=Local_u8PressedKey-'0';
    1e44:	8c a1       	ldd	r24, Y+36	; 0x24
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	40 53       	subi	r20, 0x30	; 48
    1e50:	ce 01       	movw	r24, r28
    1e52:	86 96       	adiw	r24, 0x26	; 38
    1e54:	fc 01       	movw	r30, r24
    1e56:	e2 0f       	add	r30, r18
    1e58:	f3 1f       	adc	r31, r19
    1e5a:	40 83       	st	Z, r20
				Local_Arr1Counter++;
    1e5c:	8c a1       	ldd	r24, Y+36	; 0x24
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	8c a3       	std	Y+36, r24	; 0x24
    1e62:	43 c0       	rjmp	.+134    	; 0x1eea <main+0x152>
			}
			else if(Local_u8PressedKey>='0'&&Local_u8PressedKey<='9'&&Local_Operator!='0')
    1e64:	8d a1       	ldd	r24, Y+37	; 0x25
    1e66:	80 33       	cpi	r24, 0x30	; 48
    1e68:	38 f1       	brcs	.+78     	; 0x1eb8 <main+0x120>
    1e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6c:	8a 33       	cpi	r24, 0x3A	; 58
    1e6e:	20 f5       	brcc	.+72     	; 0x1eb8 <main+0x120>
    1e70:	88 89       	ldd	r24, Y+16	; 0x10
    1e72:	80 33       	cpi	r24, 0x30	; 48
    1e74:	09 f1       	breq	.+66     	; 0x1eb8 <main+0x120>
			{
				if(Local_FloatIndicator2==1)Local_FloatCounter2=Local_FloatCounter2*10;
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	71 f4       	brne	.+28     	; 0x1e98 <main+0x100>
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	9c 01       	movw	r18, r24
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	c9 01       	movw	r24, r18
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	82 0f       	add	r24, r18
    1e92:	93 1f       	adc	r25, r19
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
				Local_Num2Arr[Local_Arr2Counter]=Local_u8PressedKey-'0';
    1e98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	40 53       	subi	r20, 0x30	; 48
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	c6 96       	adiw	r24, 0x36	; 54
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	e2 0f       	add	r30, r18
    1eac:	f3 1f       	adc	r31, r19
    1eae:	40 83       	st	Z, r20
				Local_Arr2Counter++;
    1eb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	8a 8f       	std	Y+26, r24	; 0x1a
    1eb6:	19 c0       	rjmp	.+50     	; 0x1eea <main+0x152>
			}
			else if(Local_u8PressedKey=='.'&&Local_Operator=='0')
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	8e 32       	cpi	r24, 0x2E	; 46
    1ebc:	31 f4       	brne	.+12     	; 0x1eca <main+0x132>
    1ebe:	88 89       	ldd	r24, Y+16	; 0x10
    1ec0:	80 33       	cpi	r24, 0x30	; 48
    1ec2:	19 f4       	brne	.+6      	; 0x1eca <main+0x132>
			{
				Local_FloatIndicator1=1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	8e 83       	std	Y+6, r24	; 0x06
    1ec8:	10 c0       	rjmp	.+32     	; 0x1eea <main+0x152>
			}
			else if(Local_u8PressedKey=='.'&&Local_Operator!='0')
    1eca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ecc:	8e 32       	cpi	r24, 0x2E	; 46
    1ece:	31 f4       	brne	.+12     	; 0x1edc <main+0x144>
    1ed0:	88 89       	ldd	r24, Y+16	; 0x10
    1ed2:	80 33       	cpi	r24, 0x30	; 48
    1ed4:	19 f0       	breq	.+6      	; 0x1edc <main+0x144>
			{
				Local_FloatIndicator2=1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	07 c0       	rjmp	.+14     	; 0x1eea <main+0x152>
			}
			else
			{
				 Local_Operator=Local_u8PressedKey;
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	88 8b       	std	Y+16, r24	; 0x10
				 if(Local_Operator!='=')
    1ee0:	88 89       	ldd	r24, Y+16	; 0x10
    1ee2:	8d 33       	cpi	r24, 0x3D	; 61
    1ee4:	11 f0       	breq	.+4      	; 0x1eea <main+0x152>
				 {
					 Local_CalcOperator=Local_Operator;
    1ee6:	88 89       	ldd	r24, Y+16	; 0x10
    1ee8:	8f 87       	std	Y+15, r24	; 0x0f
	uint16 Local_FloatCounter2=1;


	while(1)
	{
		while(Local_Operator!='=')
    1eea:	88 89       	ldd	r24, Y+16	; 0x10
    1eec:	8d 33       	cpi	r24, 0x3D	; 61
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <main+0x15a>
    1ef0:	85 cf       	rjmp	.-246    	; 0x1dfc <main+0x64>
				 }
			}
		}
		}

			if(Local_Operator=='=')
    1ef2:	88 89       	ldd	r24, Y+16	; 0x10
    1ef4:	8d 33       	cpi	r24, 0x3D	; 61
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <main+0x162>
    1ef8:	e2 c4       	rjmp	.+2500   	; 0x28be <main+0xb26>
			{
				Local_Num1=0;
    1efa:	18 a2       	std	Y+32, r1	; 0x20
    1efc:	19 a2       	std	Y+33, r1	; 0x21
    1efe:	1a a2       	std	Y+34, r1	; 0x22
    1f00:	1b a2       	std	Y+35, r1	; 0x23
				Local_Num2=0;
    1f02:	1e 8a       	std	Y+22, r1	; 0x16
    1f04:	1f 8a       	std	Y+23, r1	; 0x17
    1f06:	18 8e       	std	Y+24, r1	; 0x18
    1f08:	19 8e       	std	Y+25, r1	; 0x19
				for(Local_Loop1Counter=Local_Arr1Counter-1;Local_Loop1Counter>=0;Local_Loop1Counter--)
    1f0a:	8c a1       	ldd	r24, Y+36	; 0x24
    1f0c:	81 50       	subi	r24, 0x01	; 1
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f10:	3a c0       	rjmp	.+116    	; 0x1f86 <main+0x1ee>
				{
					Local_Num1=Local_Num1+Local_Num1Arr[Local_Loop1Counter]*Local_Num1Unit;
    1f12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f14:	28 2f       	mov	r18, r24
    1f16:	33 27       	eor	r19, r19
    1f18:	27 fd       	sbrc	r18, 7
    1f1a:	30 95       	com	r19
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	86 96       	adiw	r24, 0x26	; 38
    1f20:	fc 01       	movw	r30, r24
    1f22:	e2 0f       	add	r30, r18
    1f24:	f3 1f       	adc	r31, r19
    1f26:	80 81       	ld	r24, Z
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1f32:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1f34:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1f36:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
    1f44:	88 a1       	ldd	r24, Y+32	; 0x20
    1f46:	99 a1       	ldd	r25, Y+33	; 0x21
    1f48:	aa a1       	ldd	r26, Y+34	; 0x22
    1f4a:	bb a1       	ldd	r27, Y+35	; 0x23
    1f4c:	82 0f       	add	r24, r18
    1f4e:	93 1f       	adc	r25, r19
    1f50:	a4 1f       	adc	r26, r20
    1f52:	b5 1f       	adc	r27, r21
    1f54:	88 a3       	std	Y+32, r24	; 0x20
    1f56:	99 a3       	std	Y+33, r25	; 0x21
    1f58:	aa a3       	std	Y+34, r26	; 0x22
    1f5a:	bb a3       	std	Y+35, r27	; 0x23
					Local_Num1Unit=Local_Num1Unit*10;
    1f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f60:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1f62:	be 8d       	ldd	r27, Y+30	; 0x1e
    1f64:	2a e0       	ldi	r18, 0x0A	; 10
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8b 8f       	std	Y+27, r24	; 0x1b
    1f7a:	9c 8f       	std	Y+28, r25	; 0x1c
    1f7c:	ad 8f       	std	Y+29, r26	; 0x1d
    1f7e:	be 8f       	std	Y+30, r27	; 0x1e

			if(Local_Operator=='=')
			{
				Local_Num1=0;
				Local_Num2=0;
				for(Local_Loop1Counter=Local_Arr1Counter-1;Local_Loop1Counter>=0;Local_Loop1Counter--)
    1f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f82:	81 50       	subi	r24, 0x01	; 1
    1f84:	8f 8f       	std	Y+31, r24	; 0x1f
    1f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f88:	88 23       	and	r24, r24
    1f8a:	1c f6       	brge	.-122    	; 0x1f12 <main+0x17a>
				{
					Local_Num1=Local_Num1+Local_Num1Arr[Local_Loop1Counter]*Local_Num1Unit;
					Local_Num1Unit=Local_Num1Unit*10;
				}
				for(Local_Loop2Counter=Local_Arr2Counter-1;Local_Loop2Counter>=0;Local_Loop2Counter--)
    1f8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f8e:	81 50       	subi	r24, 0x01	; 1
    1f90:	8d 8b       	std	Y+21, r24	; 0x15
    1f92:	3a c0       	rjmp	.+116    	; 0x2008 <main+0x270>
				{
					Local_Num2=Local_Num2+Local_Num2Arr[Local_Loop2Counter]*Local_Num2Unit;
    1f94:	8d 89       	ldd	r24, Y+21	; 0x15
    1f96:	28 2f       	mov	r18, r24
    1f98:	33 27       	eor	r19, r19
    1f9a:	27 fd       	sbrc	r18, 7
    1f9c:	30 95       	com	r19
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	c6 96       	adiw	r24, 0x36	; 54
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e0       	ldi	r26, 0x00	; 0
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	29 89       	ldd	r18, Y+17	; 0x11
    1fb4:	3a 89       	ldd	r19, Y+18	; 0x12
    1fb6:	4b 89       	ldd	r20, Y+19	; 0x13
    1fb8:	5c 89       	ldd	r21, Y+20	; 0x14
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    1fc2:	9b 01       	movw	r18, r22
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	8e 89       	ldd	r24, Y+22	; 0x16
    1fc8:	9f 89       	ldd	r25, Y+23	; 0x17
    1fca:	a8 8d       	ldd	r26, Y+24	; 0x18
    1fcc:	b9 8d       	ldd	r27, Y+25	; 0x19
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	a4 1f       	adc	r26, r20
    1fd4:	b5 1f       	adc	r27, r21
    1fd6:	8e 8b       	std	Y+22, r24	; 0x16
    1fd8:	9f 8b       	std	Y+23, r25	; 0x17
    1fda:	a8 8f       	std	Y+24, r26	; 0x18
    1fdc:	b9 8f       	std	Y+25, r27	; 0x19
					Local_Num2Unit=Local_Num2Unit*10;;
    1fde:	89 89       	ldd	r24, Y+17	; 0x11
    1fe0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe2:	ab 89       	ldd	r26, Y+19	; 0x13
    1fe4:	bc 89       	ldd	r27, Y+20	; 0x14
    1fe6:	2a e0       	ldi	r18, 0x0A	; 10
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
    1ffc:	9a 8b       	std	Y+18, r25	; 0x12
    1ffe:	ab 8b       	std	Y+19, r26	; 0x13
    2000:	bc 8b       	std	Y+20, r27	; 0x14
				for(Local_Loop1Counter=Local_Arr1Counter-1;Local_Loop1Counter>=0;Local_Loop1Counter--)
				{
					Local_Num1=Local_Num1+Local_Num1Arr[Local_Loop1Counter]*Local_Num1Unit;
					Local_Num1Unit=Local_Num1Unit*10;
				}
				for(Local_Loop2Counter=Local_Arr2Counter-1;Local_Loop2Counter>=0;Local_Loop2Counter--)
    2002:	8d 89       	ldd	r24, Y+21	; 0x15
    2004:	81 50       	subi	r24, 0x01	; 1
    2006:	8d 8b       	std	Y+21, r24	; 0x15
    2008:	8d 89       	ldd	r24, Y+21	; 0x15
    200a:	88 23       	and	r24, r24
    200c:	1c f6       	brge	.-122    	; 0x1f94 <main+0x1fc>
				{
					Local_Num2=Local_Num2+Local_Num2Arr[Local_Loop2Counter]*Local_Num2Unit;
					Local_Num2Unit=Local_Num2Unit*10;;
				}
				switch(Local_CalcOperator)
    200e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2010:	e8 2e       	mov	r14, r24
    2012:	ff 24       	eor	r15, r15
    2014:	28 96       	adiw	r28, 0x08	; 8
    2016:	ff ae       	std	Y+63, r15	; 0x3f
    2018:	ee ae       	std	Y+62, r14	; 0x3e
    201a:	28 97       	sbiw	r28, 0x08	; 8
    201c:	28 96       	adiw	r28, 0x08	; 8
    201e:	0e ad       	ldd	r16, Y+62	; 0x3e
    2020:	1f ad       	ldd	r17, Y+63	; 0x3f
    2022:	28 97       	sbiw	r28, 0x08	; 8
    2024:	0b 32       	cpi	r16, 0x2B	; 43
    2026:	11 05       	cpc	r17, r1
    2028:	09 f1       	breq	.+66     	; 0x206c <main+0x2d4>
    202a:	28 96       	adiw	r28, 0x08	; 8
    202c:	2e ad       	ldd	r18, Y+62	; 0x3e
    202e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2030:	28 97       	sbiw	r28, 0x08	; 8
    2032:	2c 32       	cpi	r18, 0x2C	; 44
    2034:	31 05       	cpc	r19, r1
    2036:	4c f4       	brge	.+18     	; 0x204a <main+0x2b2>
    2038:	28 96       	adiw	r28, 0x08	; 8
    203a:	4e ad       	ldd	r20, Y+62	; 0x3e
    203c:	5f ad       	ldd	r21, Y+63	; 0x3f
    203e:	28 97       	sbiw	r28, 0x08	; 8
    2040:	4a 32       	cpi	r20, 0x2A	; 42
    2042:	51 05       	cpc	r21, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <main+0x2b0>
    2046:	bc c3       	rjmp	.+1912   	; 0x27c0 <main+0xa28>
    2048:	36 c4       	rjmp	.+2156   	; 0x28b6 <main+0xb1e>
    204a:	28 96       	adiw	r28, 0x08	; 8
    204c:	8e ad       	ldd	r24, Y+62	; 0x3e
    204e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2050:	28 97       	sbiw	r28, 0x08	; 8
    2052:	8d 32       	cpi	r24, 0x2D	; 45
    2054:	91 05       	cpc	r25, r1
    2056:	09 f4       	brne	.+2      	; 0x205a <main+0x2c2>
    2058:	4a c1       	rjmp	.+660    	; 0x22ee <main+0x556>
    205a:	28 96       	adiw	r28, 0x08	; 8
    205c:	0e ad       	ldd	r16, Y+62	; 0x3e
    205e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2060:	28 97       	sbiw	r28, 0x08	; 8
    2062:	0f 32       	cpi	r16, 0x2F	; 47
    2064:	11 05       	cpc	r17, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <main+0x2d2>
    2068:	ce c3       	rjmp	.+1948   	; 0x2806 <main+0xa6e>
    206a:	25 c4       	rjmp	.+2122   	; 0x28b6 <main+0xb1e>
				{
				case '+':if(Local_FloatIndicator1==0&&Local_FloatIndicator2==0)
    206c:	8e 81       	ldd	r24, Y+6	; 0x06
    206e:	88 23       	and	r24, r24
    2070:	e1 f4       	brne	.+56     	; 0x20aa <main+0x312>
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	88 23       	and	r24, r24
    2076:	c9 f4       	brne	.+50     	; 0x20aa <main+0x312>
						{
							Local_Res=Local_Num1+Local_Num2;
    2078:	28 a1       	ldd	r18, Y+32	; 0x20
    207a:	39 a1       	ldd	r19, Y+33	; 0x21
    207c:	4a a1       	ldd	r20, Y+34	; 0x22
    207e:	5b a1       	ldd	r21, Y+35	; 0x23
    2080:	8e 89       	ldd	r24, Y+22	; 0x16
    2082:	9f 89       	ldd	r25, Y+23	; 0x17
    2084:	a8 8d       	ldd	r26, Y+24	; 0x18
    2086:	b9 8d       	ldd	r27, Y+25	; 0x19
    2088:	82 0f       	add	r24, r18
    208a:	93 1f       	adc	r25, r19
    208c:	a4 1f       	adc	r26, r20
    208e:	b5 1f       	adc	r27, r21
    2090:	8b 87       	std	Y+11, r24	; 0x0b
    2092:	9c 87       	std	Y+12, r25	; 0x0c
    2094:	ad 87       	std	Y+13, r26	; 0x0d
    2096:	be 87       	std	Y+14, r27	; 0x0e
							CLCD_voidSendNumber(Local_Res);
    2098:	8b 85       	ldd	r24, Y+11	; 0x0b
    209a:	9c 85       	ldd	r25, Y+12	; 0x0c
    209c:	ad 85       	ldd	r26, Y+13	; 0x0d
    209e:	be 85       	ldd	r27, Y+14	; 0x0e
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    20a8:	06 c4       	rjmp	.+2060   	; 0x28b6 <main+0xb1e>
						}
						else
						{
							Local_Res=(Local_Num1/Local_FloatCounter1)+(Local_Num2/Local_FloatCounter2);
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	9c 01       	movw	r18, r24
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	88 a1       	ldd	r24, Y+32	; 0x20
    20b6:	99 a1       	ldd	r25, Y+33	; 0x21
    20b8:	aa a1       	ldd	r26, Y+34	; 0x22
    20ba:	bb a1       	ldd	r27, Y+35	; 0x23
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    20c4:	da 01       	movw	r26, r20
    20c6:	c9 01       	movw	r24, r18
    20c8:	7c 01       	movw	r14, r24
    20ca:	8d 01       	movw	r16, r26
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	9c 01       	movw	r18, r24
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	8e 89       	ldd	r24, Y+22	; 0x16
    20d8:	9f 89       	ldd	r25, Y+23	; 0x17
    20da:	a8 8d       	ldd	r26, Y+24	; 0x18
    20dc:	b9 8d       	ldd	r27, Y+25	; 0x19
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    20e6:	da 01       	movw	r26, r20
    20e8:	c9 01       	movw	r24, r18
    20ea:	8e 0d       	add	r24, r14
    20ec:	9f 1d       	adc	r25, r15
    20ee:	a0 1f       	adc	r26, r16
    20f0:	b1 1f       	adc	r27, r17
    20f2:	8b 87       	std	Y+11, r24	; 0x0b
    20f4:	9c 87       	std	Y+12, r25	; 0x0c
    20f6:	ad 87       	std	Y+13, r26	; 0x0d
    20f8:	be 87       	std	Y+14, r27	; 0x0e
							if(Local_FloatCounter1==10)
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	8a 30       	cpi	r24, 0x0A	; 10
    2100:	91 05       	cpc	r25, r1
    2102:	01 f5       	brne	.+64     	; 0x2144 <main+0x3ac>
								{
									Local_FloatCounter1*=10;
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	9c 01       	movw	r18, r24
    210a:	22 0f       	add	r18, r18
    210c:	33 1f       	adc	r19, r19
    210e:	c9 01       	movw	r24, r18
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	82 0f       	add	r24, r18
    211a:	93 1f       	adc	r25, r19
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
									Local_Num1*=10;
    2120:	88 a1       	ldd	r24, Y+32	; 0x20
    2122:	99 a1       	ldd	r25, Y+33	; 0x21
    2124:	aa a1       	ldd	r26, Y+34	; 0x22
    2126:	bb a1       	ldd	r27, Y+35	; 0x23
    2128:	2a e0       	ldi	r18, 0x0A	; 10
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	88 a3       	std	Y+32, r24	; 0x20
    213e:	99 a3       	std	Y+33, r25	; 0x21
    2140:	aa a3       	std	Y+34, r26	; 0x22
    2142:	bb a3       	std	Y+35, r27	; 0x23
								}
							if(Local_FloatCounter2==10)
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	8a 30       	cpi	r24, 0x0A	; 10
    214a:	91 05       	cpc	r25, r1
    214c:	01 f5       	brne	.+64     	; 0x218e <main+0x3f6>
							{
								Local_FloatCounter2*=10;
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	9c 01       	movw	r18, r24
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	c9 01       	movw	r24, r18
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	82 0f       	add	r24, r18
    2164:	93 1f       	adc	r25, r19
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
								Local_Num2*=10;
    216a:	8e 89       	ldd	r24, Y+22	; 0x16
    216c:	9f 89       	ldd	r25, Y+23	; 0x17
    216e:	a8 8d       	ldd	r26, Y+24	; 0x18
    2170:	b9 8d       	ldd	r27, Y+25	; 0x19
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8e 8b       	std	Y+22, r24	; 0x16
    2188:	9f 8b       	std	Y+23, r25	; 0x17
    218a:	a8 8f       	std	Y+24, r26	; 0x18
    218c:	b9 8f       	std	Y+25, r27	; 0x19
							}
							Local_Remainder=(Local_Num1%Local_FloatCounter1)+(Local_Num2%Local_FloatCounter2);
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	9c 01       	movw	r18, r24
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	88 a1       	ldd	r24, Y+32	; 0x20
    219a:	99 a1       	ldd	r25, Y+33	; 0x21
    219c:	aa a1       	ldd	r26, Y+34	; 0x22
    219e:	bb a1       	ldd	r27, Y+35	; 0x23
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	7c 01       	movw	r14, r24
    21ae:	8d 01       	movw	r16, r26
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	9c 01       	movw	r18, r24
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	8e 89       	ldd	r24, Y+22	; 0x16
    21bc:	9f 89       	ldd	r25, Y+23	; 0x17
    21be:	a8 8d       	ldd	r26, Y+24	; 0x18
    21c0:	b9 8d       	ldd	r27, Y+25	; 0x19
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8e 0d       	add	r24, r14
    21d0:	9f 1d       	adc	r25, r15
    21d2:	a0 1f       	adc	r26, r16
    21d4:	b1 1f       	adc	r27, r17
    21d6:	8f 83       	std	Y+7, r24	; 0x07
    21d8:	98 87       	std	Y+8, r25	; 0x08
    21da:	a9 87       	std	Y+9, r26	; 0x09
    21dc:	ba 87       	std	Y+10, r27	; 0x0a

				if(Local_Remainder>=110)
    21de:	8f 81       	ldd	r24, Y+7	; 0x07
    21e0:	98 85       	ldd	r25, Y+8	; 0x08
    21e2:	a9 85       	ldd	r26, Y+9	; 0x09
    21e4:	ba 85       	ldd	r27, Y+10	; 0x0a
    21e6:	8e 36       	cpi	r24, 0x6E	; 110
    21e8:	91 05       	cpc	r25, r1
    21ea:	a1 05       	cpc	r26, r1
    21ec:	b1 05       	cpc	r27, r1
    21ee:	dc f0       	brlt	.+54     	; 0x2226 <main+0x48e>
				{
					CLCD_voidSendNumber(Local_Res+1);
    21f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f4:	ad 85       	ldd	r26, Y+13	; 0x0d
    21f6:	be 85       	ldd	r27, Y+14	; 0x0e
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	a1 1d       	adc	r26, r1
    21fc:	b1 1d       	adc	r27, r1
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
					CLCD_voidSendData('.');
    2206:	8e e2       	ldi	r24, 0x2E	; 46
    2208:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendNumber(Local_Remainder-100);
    220c:	8f 81       	ldd	r24, Y+7	; 0x07
    220e:	98 85       	ldd	r25, Y+8	; 0x08
    2210:	a9 85       	ldd	r26, Y+9	; 0x09
    2212:	ba 85       	ldd	r27, Y+10	; 0x0a
    2214:	84 56       	subi	r24, 0x64	; 100
    2216:	90 40       	sbci	r25, 0x00	; 0
    2218:	a0 40       	sbci	r26, 0x00	; 0
    221a:	b0 40       	sbci	r27, 0x00	; 0
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2224:	48 c3       	rjmp	.+1680   	; 0x28b6 <main+0xb1e>
				}
				else if(Local_Remainder<110&&Local_Remainder>=100)
    2226:	8f 81       	ldd	r24, Y+7	; 0x07
    2228:	98 85       	ldd	r25, Y+8	; 0x08
    222a:	a9 85       	ldd	r26, Y+9	; 0x09
    222c:	ba 85       	ldd	r27, Y+10	; 0x0a
    222e:	8e 36       	cpi	r24, 0x6E	; 110
    2230:	91 05       	cpc	r25, r1
    2232:	a1 05       	cpc	r26, r1
    2234:	b1 05       	cpc	r27, r1
    2236:	3c f5       	brge	.+78     	; 0x2286 <main+0x4ee>
    2238:	8f 81       	ldd	r24, Y+7	; 0x07
    223a:	98 85       	ldd	r25, Y+8	; 0x08
    223c:	a9 85       	ldd	r26, Y+9	; 0x09
    223e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2240:	84 36       	cpi	r24, 0x64	; 100
    2242:	91 05       	cpc	r25, r1
    2244:	a1 05       	cpc	r26, r1
    2246:	b1 05       	cpc	r27, r1
    2248:	f4 f0       	brlt	.+60     	; 0x2286 <main+0x4ee>
				{
					CLCD_voidSendNumber(Local_Res+1);
    224a:	8b 85       	ldd	r24, Y+11	; 0x0b
    224c:	9c 85       	ldd	r25, Y+12	; 0x0c
    224e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2250:	be 85       	ldd	r27, Y+14	; 0x0e
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	a1 1d       	adc	r26, r1
    2256:	b1 1d       	adc	r27, r1
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
					CLCD_voidSendData('.');
    2260:	8e e2       	ldi	r24, 0x2E	; 46
    2262:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendData('0');
    2266:	80 e3       	ldi	r24, 0x30	; 48
    2268:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendNumber(Local_Remainder-100);
    226c:	8f 81       	ldd	r24, Y+7	; 0x07
    226e:	98 85       	ldd	r25, Y+8	; 0x08
    2270:	a9 85       	ldd	r26, Y+9	; 0x09
    2272:	ba 85       	ldd	r27, Y+10	; 0x0a
    2274:	84 56       	subi	r24, 0x64	; 100
    2276:	90 40       	sbci	r25, 0x00	; 0
    2278:	a0 40       	sbci	r26, 0x00	; 0
    227a:	b0 40       	sbci	r27, 0x00	; 0
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2284:	18 c3       	rjmp	.+1584   	; 0x28b6 <main+0xb1e>
				}
				else if(Local_Remainder<10)
    2286:	8f 81       	ldd	r24, Y+7	; 0x07
    2288:	98 85       	ldd	r25, Y+8	; 0x08
    228a:	a9 85       	ldd	r26, Y+9	; 0x09
    228c:	ba 85       	ldd	r27, Y+10	; 0x0a
    228e:	8a 30       	cpi	r24, 0x0A	; 10
    2290:	91 05       	cpc	r25, r1
    2292:	a1 05       	cpc	r26, r1
    2294:	b1 05       	cpc	r27, r1
    2296:	bc f4       	brge	.+46     	; 0x22c6 <main+0x52e>
				{
					CLCD_voidSendNumber(Local_Res);
    2298:	8b 85       	ldd	r24, Y+11	; 0x0b
    229a:	9c 85       	ldd	r25, Y+12	; 0x0c
    229c:	ad 85       	ldd	r26, Y+13	; 0x0d
    229e:	be 85       	ldd	r27, Y+14	; 0x0e
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
					CLCD_voidSendData('.');
    22a8:	8e e2       	ldi	r24, 0x2E	; 46
    22aa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendData('0');
    22ae:	80 e3       	ldi	r24, 0x30	; 48
    22b0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendNumber(Local_Remainder);
    22b4:	8f 81       	ldd	r24, Y+7	; 0x07
    22b6:	98 85       	ldd	r25, Y+8	; 0x08
    22b8:	a9 85       	ldd	r26, Y+9	; 0x09
    22ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    22c4:	f8 c2       	rjmp	.+1520   	; 0x28b6 <main+0xb1e>
				}
				else
				{
					CLCD_voidSendNumber(Local_Res);
    22c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ca:	ad 85       	ldd	r26, Y+13	; 0x0d
    22cc:	be 85       	ldd	r27, Y+14	; 0x0e
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
					CLCD_voidSendData('.');
    22d6:	8e e2       	ldi	r24, 0x2E	; 46
    22d8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendNumber(Local_Remainder);
    22dc:	8f 81       	ldd	r24, Y+7	; 0x07
    22de:	98 85       	ldd	r25, Y+8	; 0x08
    22e0:	a9 85       	ldd	r26, Y+9	; 0x09
    22e2:	ba 85       	ldd	r27, Y+10	; 0x0a
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    22ec:	e4 c2       	rjmp	.+1480   	; 0x28b6 <main+0xb1e>
				}
						}
						 break;
				case '-':if(Local_FloatIndicator1==0&&Local_FloatIndicator2==0)
    22ee:	8e 81       	ldd	r24, Y+6	; 0x06
    22f0:	88 23       	and	r24, r24
    22f2:	01 f5       	brne	.+64     	; 0x2334 <main+0x59c>
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	88 23       	and	r24, r24
    22f8:	e9 f4       	brne	.+58     	; 0x2334 <main+0x59c>
				{
					Local_Res=Local_Num1-Local_Num2;
    22fa:	28 a1       	ldd	r18, Y+32	; 0x20
    22fc:	39 a1       	ldd	r19, Y+33	; 0x21
    22fe:	4a a1       	ldd	r20, Y+34	; 0x22
    2300:	5b a1       	ldd	r21, Y+35	; 0x23
    2302:	8e 89       	ldd	r24, Y+22	; 0x16
    2304:	9f 89       	ldd	r25, Y+23	; 0x17
    2306:	a8 8d       	ldd	r26, Y+24	; 0x18
    2308:	b9 8d       	ldd	r27, Y+25	; 0x19
    230a:	79 01       	movw	r14, r18
    230c:	8a 01       	movw	r16, r20
    230e:	e8 1a       	sub	r14, r24
    2310:	f9 0a       	sbc	r15, r25
    2312:	0a 0b       	sbc	r16, r26
    2314:	1b 0b       	sbc	r17, r27
    2316:	d8 01       	movw	r26, r16
    2318:	c7 01       	movw	r24, r14
    231a:	8b 87       	std	Y+11, r24	; 0x0b
    231c:	9c 87       	std	Y+12, r25	; 0x0c
    231e:	ad 87       	std	Y+13, r26	; 0x0d
    2320:	be 87       	std	Y+14, r27	; 0x0e
					CLCD_voidSendNumber(Local_Res);
    2322:	8b 85       	ldd	r24, Y+11	; 0x0b
    2324:	9c 85       	ldd	r25, Y+12	; 0x0c
    2326:	ad 85       	ldd	r26, Y+13	; 0x0d
    2328:	be 85       	ldd	r27, Y+14	; 0x0e
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2332:	c1 c2       	rjmp	.+1410   	; 0x28b6 <main+0xb1e>
				}
				else
				{
					Local_Res=(Local_Num1/Local_FloatCounter1)-(Local_Num2/Local_FloatCounter2);
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	9c 01       	movw	r18, r24
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	88 a1       	ldd	r24, Y+32	; 0x20
    2340:	99 a1       	ldd	r25, Y+33	; 0x21
    2342:	aa a1       	ldd	r26, Y+34	; 0x22
    2344:	bb a1       	ldd	r27, Y+35	; 0x23
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    234e:	da 01       	movw	r26, r20
    2350:	c9 01       	movw	r24, r18
    2352:	7c 01       	movw	r14, r24
    2354:	8d 01       	movw	r16, r26
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	9c 01       	movw	r18, r24
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	8e 89       	ldd	r24, Y+22	; 0x16
    2362:	9f 89       	ldd	r25, Y+23	; 0x17
    2364:	a8 8d       	ldd	r26, Y+24	; 0x18
    2366:	b9 8d       	ldd	r27, Y+25	; 0x19
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    2370:	da 01       	movw	r26, r20
    2372:	c9 01       	movw	r24, r18
    2374:	a8 01       	movw	r20, r16
    2376:	97 01       	movw	r18, r14
    2378:	28 1b       	sub	r18, r24
    237a:	39 0b       	sbc	r19, r25
    237c:	4a 0b       	sbc	r20, r26
    237e:	5b 0b       	sbc	r21, r27
    2380:	da 01       	movw	r26, r20
    2382:	c9 01       	movw	r24, r18
    2384:	8b 87       	std	Y+11, r24	; 0x0b
    2386:	9c 87       	std	Y+12, r25	; 0x0c
    2388:	ad 87       	std	Y+13, r26	; 0x0d
    238a:	be 87       	std	Y+14, r27	; 0x0e
					if(Local_FloatCounter1==10)
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	8a 30       	cpi	r24, 0x0A	; 10
    2392:	91 05       	cpc	r25, r1
    2394:	01 f5       	brne	.+64     	; 0x23d6 <main+0x63e>
						{
							Local_FloatCounter1*=10;
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	9c 01       	movw	r18, r24
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	c9 01       	movw	r24, r18
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
							Local_Num1*=10;
    23b2:	88 a1       	ldd	r24, Y+32	; 0x20
    23b4:	99 a1       	ldd	r25, Y+33	; 0x21
    23b6:	aa a1       	ldd	r26, Y+34	; 0x22
    23b8:	bb a1       	ldd	r27, Y+35	; 0x23
    23ba:	2a e0       	ldi	r18, 0x0A	; 10
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	88 a3       	std	Y+32, r24	; 0x20
    23d0:	99 a3       	std	Y+33, r25	; 0x21
    23d2:	aa a3       	std	Y+34, r26	; 0x22
    23d4:	bb a3       	std	Y+35, r27	; 0x23
						}
					if(Local_FloatCounter2==10)
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	8a 30       	cpi	r24, 0x0A	; 10
    23dc:	91 05       	cpc	r25, r1
    23de:	01 f5       	brne	.+64     	; 0x2420 <main+0x688>
					{
						Local_FloatCounter2*=10;
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	9c 01       	movw	r18, r24
    23e6:	22 0f       	add	r18, r18
    23e8:	33 1f       	adc	r19, r19
    23ea:	c9 01       	movw	r24, r18
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
						Local_Num2*=10;
    23fc:	8e 89       	ldd	r24, Y+22	; 0x16
    23fe:	9f 89       	ldd	r25, Y+23	; 0x17
    2400:	a8 8d       	ldd	r26, Y+24	; 0x18
    2402:	b9 8d       	ldd	r27, Y+25	; 0x19
    2404:	2a e0       	ldi	r18, 0x0A	; 10
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8e 8b       	std	Y+22, r24	; 0x16
    241a:	9f 8b       	std	Y+23, r25	; 0x17
    241c:	a8 8f       	std	Y+24, r26	; 0x18
    241e:	b9 8f       	std	Y+25, r27	; 0x19
					}
					Local_Remainder=(Local_Num1%Local_FloatCounter1)-(Local_Num2%Local_FloatCounter2);
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	9c 01       	movw	r18, r24
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	88 a1       	ldd	r24, Y+32	; 0x20
    242c:	99 a1       	ldd	r25, Y+33	; 0x21
    242e:	aa a1       	ldd	r26, Y+34	; 0x22
    2430:	bb a1       	ldd	r27, Y+35	; 0x23
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	7c 01       	movw	r14, r24
    2440:	8d 01       	movw	r16, r26
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	9c 01       	movw	r18, r24
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	8e 89       	ldd	r24, Y+22	; 0x16
    244e:	9f 89       	ldd	r25, Y+23	; 0x17
    2450:	a8 8d       	ldd	r26, Y+24	; 0x18
    2452:	b9 8d       	ldd	r27, Y+25	; 0x19
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	a8 01       	movw	r20, r16
    2462:	97 01       	movw	r18, r14
    2464:	28 1b       	sub	r18, r24
    2466:	39 0b       	sbc	r19, r25
    2468:	4a 0b       	sbc	r20, r26
    246a:	5b 0b       	sbc	r21, r27
    246c:	da 01       	movw	r26, r20
    246e:	c9 01       	movw	r24, r18
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a

		if(Local_Remainder<=-10&&Local_Res==0)
    2478:	8f 81       	ldd	r24, Y+7	; 0x07
    247a:	98 85       	ldd	r25, Y+8	; 0x08
    247c:	a9 85       	ldd	r26, Y+9	; 0x09
    247e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2480:	87 3f       	cpi	r24, 0xF7	; 247
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	93 07       	cpc	r25, r19
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	a3 07       	cpc	r26, r19
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	b3 07       	cpc	r27, r19
    248e:	34 f5       	brge	.+76     	; 0x24dc <main+0x744>
    2490:	8b 85       	ldd	r24, Y+11	; 0x0b
    2492:	9c 85       	ldd	r25, Y+12	; 0x0c
    2494:	ad 85       	ldd	r26, Y+13	; 0x0d
    2496:	be 85       	ldd	r27, Y+14	; 0x0e
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	a1 05       	cpc	r26, r1
    249c:	b1 05       	cpc	r27, r1
    249e:	f1 f4       	brne	.+60     	; 0x24dc <main+0x744>
		{
			CLCD_voidSendData('-');
    24a0:	8d e2       	ldi	r24, 0x2D	; 45
    24a2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(Local_Res);
    24a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    24aa:	ad 85       	ldd	r26, Y+13	; 0x0d
    24ac:	be 85       	ldd	r27, Y+14	; 0x0e
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    24b6:	8e e2       	ldi	r24, 0x2E	; 46
    24b8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(-Local_Remainder);
    24bc:	8f 81       	ldd	r24, Y+7	; 0x07
    24be:	98 85       	ldd	r25, Y+8	; 0x08
    24c0:	a9 85       	ldd	r26, Y+9	; 0x09
    24c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    24c4:	b0 95       	com	r27
    24c6:	a0 95       	com	r26
    24c8:	90 95       	com	r25
    24ca:	81 95       	neg	r24
    24cc:	9f 4f       	sbci	r25, 0xFF	; 255
    24ce:	af 4f       	sbci	r26, 0xFF	; 255
    24d0:	bf 4f       	sbci	r27, 0xFF	; 255
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    24da:	ed c1       	rjmp	.+986    	; 0x28b6 <main+0xb1e>
		}
		else if(Local_Remainder<=-10&&Local_Res<0)
    24dc:	8f 81       	ldd	r24, Y+7	; 0x07
    24de:	98 85       	ldd	r25, Y+8	; 0x08
    24e0:	a9 85       	ldd	r26, Y+9	; 0x09
    24e2:	ba 85       	ldd	r27, Y+10	; 0x0a
    24e4:	87 3f       	cpi	r24, 0xF7	; 247
    24e6:	4f ef       	ldi	r20, 0xFF	; 255
    24e8:	94 07       	cpc	r25, r20
    24ea:	4f ef       	ldi	r20, 0xFF	; 255
    24ec:	a4 07       	cpc	r26, r20
    24ee:	4f ef       	ldi	r20, 0xFF	; 255
    24f0:	b4 07       	cpc	r27, r20
    24f2:	0c f5       	brge	.+66     	; 0x2536 <main+0x79e>
    24f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    24f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    24f8:	ad 85       	ldd	r26, Y+13	; 0x0d
    24fa:	be 85       	ldd	r27, Y+14	; 0x0e
    24fc:	bb 23       	and	r27, r27
    24fe:	dc f4       	brge	.+54     	; 0x2536 <main+0x79e>
		{
			CLCD_voidSendNumber(Local_Res);
    2500:	8b 85       	ldd	r24, Y+11	; 0x0b
    2502:	9c 85       	ldd	r25, Y+12	; 0x0c
    2504:	ad 85       	ldd	r26, Y+13	; 0x0d
    2506:	be 85       	ldd	r27, Y+14	; 0x0e
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    2510:	8e e2       	ldi	r24, 0x2E	; 46
    2512:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(-Local_Remainder);
    2516:	8f 81       	ldd	r24, Y+7	; 0x07
    2518:	98 85       	ldd	r25, Y+8	; 0x08
    251a:	a9 85       	ldd	r26, Y+9	; 0x09
    251c:	ba 85       	ldd	r27, Y+10	; 0x0a
    251e:	b0 95       	com	r27
    2520:	a0 95       	com	r26
    2522:	90 95       	com	r25
    2524:	81 95       	neg	r24
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	af 4f       	sbci	r26, 0xFF	; 255
    252a:	bf 4f       	sbci	r27, 0xFF	; 255
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2534:	c0 c1       	rjmp	.+896    	; 0x28b6 <main+0xb1e>
		}
		else if(Local_Remainder>=90&&Local_Remainder<100&&Local_Res<0)
    2536:	8f 81       	ldd	r24, Y+7	; 0x07
    2538:	98 85       	ldd	r25, Y+8	; 0x08
    253a:	a9 85       	ldd	r26, Y+9	; 0x09
    253c:	ba 85       	ldd	r27, Y+10	; 0x0a
    253e:	8a 35       	cpi	r24, 0x5A	; 90
    2540:	91 05       	cpc	r25, r1
    2542:	a1 05       	cpc	r26, r1
    2544:	b1 05       	cpc	r27, r1
    2546:	ac f1       	brlt	.+106    	; 0x25b2 <main+0x81a>
    2548:	8f 81       	ldd	r24, Y+7	; 0x07
    254a:	98 85       	ldd	r25, Y+8	; 0x08
    254c:	a9 85       	ldd	r26, Y+9	; 0x09
    254e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2550:	84 36       	cpi	r24, 0x64	; 100
    2552:	91 05       	cpc	r25, r1
    2554:	a1 05       	cpc	r26, r1
    2556:	b1 05       	cpc	r27, r1
    2558:	64 f5       	brge	.+88     	; 0x25b2 <main+0x81a>
    255a:	8b 85       	ldd	r24, Y+11	; 0x0b
    255c:	9c 85       	ldd	r25, Y+12	; 0x0c
    255e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2560:	be 85       	ldd	r27, Y+14	; 0x0e
    2562:	bb 23       	and	r27, r27
    2564:	34 f5       	brge	.+76     	; 0x25b2 <main+0x81a>
		{
			CLCD_voidSendNumber(Local_Res+1);
    2566:	8b 85       	ldd	r24, Y+11	; 0x0b
    2568:	9c 85       	ldd	r25, Y+12	; 0x0c
    256a:	ad 85       	ldd	r26, Y+13	; 0x0d
    256c:	be 85       	ldd	r27, Y+14	; 0x0e
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	a1 1d       	adc	r26, r1
    2572:	b1 1d       	adc	r27, r1
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    257c:	8e e2       	ldi	r24, 0x2E	; 46
    257e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendData('0');
    2582:	80 e3       	ldi	r24, 0x30	; 48
    2584:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(100-Local_Remainder);
    2588:	24 e6       	ldi	r18, 0x64	; 100
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	8f 81       	ldd	r24, Y+7	; 0x07
    2592:	98 85       	ldd	r25, Y+8	; 0x08
    2594:	a9 85       	ldd	r26, Y+9	; 0x09
    2596:	ba 85       	ldd	r27, Y+10	; 0x0a
    2598:	79 01       	movw	r14, r18
    259a:	8a 01       	movw	r16, r20
    259c:	e8 1a       	sub	r14, r24
    259e:	f9 0a       	sbc	r15, r25
    25a0:	0a 0b       	sbc	r16, r26
    25a2:	1b 0b       	sbc	r17, r27
    25a4:	d8 01       	movw	r26, r16
    25a6:	c7 01       	movw	r24, r14
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    25b0:	82 c1       	rjmp	.+772    	; 0x28b6 <main+0xb1e>
		}
		else if(Local_Remainder>0&&Local_Remainder<90&&Local_Res<0)
    25b2:	8f 81       	ldd	r24, Y+7	; 0x07
    25b4:	98 85       	ldd	r25, Y+8	; 0x08
    25b6:	a9 85       	ldd	r26, Y+9	; 0x09
    25b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    25ba:	18 16       	cp	r1, r24
    25bc:	19 06       	cpc	r1, r25
    25be:	1a 06       	cpc	r1, r26
    25c0:	1b 06       	cpc	r1, r27
    25c2:	94 f5       	brge	.+100    	; 0x2628 <main+0x890>
    25c4:	8f 81       	ldd	r24, Y+7	; 0x07
    25c6:	98 85       	ldd	r25, Y+8	; 0x08
    25c8:	a9 85       	ldd	r26, Y+9	; 0x09
    25ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    25cc:	8a 35       	cpi	r24, 0x5A	; 90
    25ce:	91 05       	cpc	r25, r1
    25d0:	a1 05       	cpc	r26, r1
    25d2:	b1 05       	cpc	r27, r1
    25d4:	4c f5       	brge	.+82     	; 0x2628 <main+0x890>
    25d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25da:	ad 85       	ldd	r26, Y+13	; 0x0d
    25dc:	be 85       	ldd	r27, Y+14	; 0x0e
    25de:	bb 23       	and	r27, r27
    25e0:	1c f5       	brge	.+70     	; 0x2628 <main+0x890>
		{
			CLCD_voidSendNumber(Local_Res+1);
    25e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    25e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    25e6:	ad 85       	ldd	r26, Y+13	; 0x0d
    25e8:	be 85       	ldd	r27, Y+14	; 0x0e
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	a1 1d       	adc	r26, r1
    25ee:	b1 1d       	adc	r27, r1
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    25f8:	8e e2       	ldi	r24, 0x2E	; 46
    25fa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(100-Local_Remainder);
    25fe:	24 e6       	ldi	r18, 0x64	; 100
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	8f 81       	ldd	r24, Y+7	; 0x07
    2608:	98 85       	ldd	r25, Y+8	; 0x08
    260a:	a9 85       	ldd	r26, Y+9	; 0x09
    260c:	ba 85       	ldd	r27, Y+10	; 0x0a
    260e:	79 01       	movw	r14, r18
    2610:	8a 01       	movw	r16, r20
    2612:	e8 1a       	sub	r14, r24
    2614:	f9 0a       	sbc	r15, r25
    2616:	0a 0b       	sbc	r16, r26
    2618:	1b 0b       	sbc	r17, r27
    261a:	d8 01       	movw	r26, r16
    261c:	c7 01       	movw	r24, r14
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2626:	47 c1       	rjmp	.+654    	; 0x28b6 <main+0xb1e>
		}
		else if(Local_Remainder<=-10)
    2628:	8f 81       	ldd	r24, Y+7	; 0x07
    262a:	98 85       	ldd	r25, Y+8	; 0x08
    262c:	a9 85       	ldd	r26, Y+9	; 0x09
    262e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2630:	87 3f       	cpi	r24, 0xF7	; 247
    2632:	0f ef       	ldi	r16, 0xFF	; 255
    2634:	90 07       	cpc	r25, r16
    2636:	0f ef       	ldi	r16, 0xFF	; 255
    2638:	a0 07       	cpc	r26, r16
    263a:	0f ef       	ldi	r16, 0xFF	; 255
    263c:	b0 07       	cpc	r27, r16
    263e:	dc f4       	brge	.+54     	; 0x2676 <main+0x8de>
		{
			CLCD_voidSendNumber(Local_Res-1);
    2640:	8b 85       	ldd	r24, Y+11	; 0x0b
    2642:	9c 85       	ldd	r25, Y+12	; 0x0c
    2644:	ad 85       	ldd	r26, Y+13	; 0x0d
    2646:	be 85       	ldd	r27, Y+14	; 0x0e
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	a1 09       	sbc	r26, r1
    264c:	b1 09       	sbc	r27, r1
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    2656:	8e e2       	ldi	r24, 0x2E	; 46
    2658:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(Local_Remainder+100);
    265c:	8f 81       	ldd	r24, Y+7	; 0x07
    265e:	98 85       	ldd	r25, Y+8	; 0x08
    2660:	a9 85       	ldd	r26, Y+9	; 0x09
    2662:	ba 85       	ldd	r27, Y+10	; 0x0a
    2664:	8c 59       	subi	r24, 0x9C	; 156
    2666:	9f 4f       	sbci	r25, 0xFF	; 255
    2668:	af 4f       	sbci	r26, 0xFF	; 255
    266a:	bf 4f       	sbci	r27, 0xFF	; 255
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2674:	20 c1       	rjmp	.+576    	; 0x28b6 <main+0xb1e>
		}
		else if(Local_Remainder<10&&Local_Remainder>=0)
    2676:	8f 81       	ldd	r24, Y+7	; 0x07
    2678:	98 85       	ldd	r25, Y+8	; 0x08
    267a:	a9 85       	ldd	r26, Y+9	; 0x09
    267c:	ba 85       	ldd	r27, Y+10	; 0x0a
    267e:	8a 30       	cpi	r24, 0x0A	; 10
    2680:	91 05       	cpc	r25, r1
    2682:	a1 05       	cpc	r26, r1
    2684:	b1 05       	cpc	r27, r1
    2686:	ec f4       	brge	.+58     	; 0x26c2 <main+0x92a>
    2688:	8f 81       	ldd	r24, Y+7	; 0x07
    268a:	98 85       	ldd	r25, Y+8	; 0x08
    268c:	a9 85       	ldd	r26, Y+9	; 0x09
    268e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2690:	bb 23       	and	r27, r27
    2692:	bc f0       	brlt	.+46     	; 0x26c2 <main+0x92a>
		{
			CLCD_voidSendNumber(Local_Res);
    2694:	8b 85       	ldd	r24, Y+11	; 0x0b
    2696:	9c 85       	ldd	r25, Y+12	; 0x0c
    2698:	ad 85       	ldd	r26, Y+13	; 0x0d
    269a:	be 85       	ldd	r27, Y+14	; 0x0e
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    26a4:	8e e2       	ldi	r24, 0x2E	; 46
    26a6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendData('0');
    26aa:	80 e3       	ldi	r24, 0x30	; 48
    26ac:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(Local_Remainder);
    26b0:	8f 81       	ldd	r24, Y+7	; 0x07
    26b2:	98 85       	ldd	r25, Y+8	; 0x08
    26b4:	a9 85       	ldd	r26, Y+9	; 0x09
    26b6:	ba 85       	ldd	r27, Y+10	; 0x0a
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    26c0:	fa c0       	rjmp	.+500    	; 0x28b6 <main+0xb1e>
		}
		else if(Local_Remainder<0&&Local_Remainder>-10&&Local_Res==0)
    26c2:	8f 81       	ldd	r24, Y+7	; 0x07
    26c4:	98 85       	ldd	r25, Y+8	; 0x08
    26c6:	a9 85       	ldd	r26, Y+9	; 0x09
    26c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    26ca:	bb 23       	and	r27, r27
    26cc:	ac f5       	brge	.+106    	; 0x2738 <main+0x9a0>
    26ce:	8f 81       	ldd	r24, Y+7	; 0x07
    26d0:	98 85       	ldd	r25, Y+8	; 0x08
    26d2:	a9 85       	ldd	r26, Y+9	; 0x09
    26d4:	ba 85       	ldd	r27, Y+10	; 0x0a
    26d6:	87 3f       	cpi	r24, 0xF7	; 247
    26d8:	1f ef       	ldi	r17, 0xFF	; 255
    26da:	91 07       	cpc	r25, r17
    26dc:	1f ef       	ldi	r17, 0xFF	; 255
    26de:	a1 07       	cpc	r26, r17
    26e0:	1f ef       	ldi	r17, 0xFF	; 255
    26e2:	b1 07       	cpc	r27, r17
    26e4:	4c f1       	brlt	.+82     	; 0x2738 <main+0x9a0>
    26e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ea:	ad 85       	ldd	r26, Y+13	; 0x0d
    26ec:	be 85       	ldd	r27, Y+14	; 0x0e
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	a1 05       	cpc	r26, r1
    26f2:	b1 05       	cpc	r27, r1
    26f4:	09 f5       	brne	.+66     	; 0x2738 <main+0x9a0>
		{
			CLCD_voidSendData('-');
    26f6:	8d e2       	ldi	r24, 0x2D	; 45
    26f8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(Local_Res);
    26fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    26fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2700:	ad 85       	ldd	r26, Y+13	; 0x0d
    2702:	be 85       	ldd	r27, Y+14	; 0x0e
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    270c:	8e e2       	ldi	r24, 0x2E	; 46
    270e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendData('0');
    2712:	80 e3       	ldi	r24, 0x30	; 48
    2714:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(-Local_Remainder);
    2718:	8f 81       	ldd	r24, Y+7	; 0x07
    271a:	98 85       	ldd	r25, Y+8	; 0x08
    271c:	a9 85       	ldd	r26, Y+9	; 0x09
    271e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2720:	b0 95       	com	r27
    2722:	a0 95       	com	r26
    2724:	90 95       	com	r25
    2726:	81 95       	neg	r24
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	af 4f       	sbci	r26, 0xFF	; 255
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2736:	bf c0       	rjmp	.+382    	; 0x28b6 <main+0xb1e>
		}
		else if(Local_Remainder<0&&Local_Remainder>-10)
    2738:	8f 81       	ldd	r24, Y+7	; 0x07
    273a:	98 85       	ldd	r25, Y+8	; 0x08
    273c:	a9 85       	ldd	r26, Y+9	; 0x09
    273e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2740:	bb 23       	and	r27, r27
    2742:	54 f5       	brge	.+84     	; 0x2798 <main+0xa00>
    2744:	8f 81       	ldd	r24, Y+7	; 0x07
    2746:	98 85       	ldd	r25, Y+8	; 0x08
    2748:	a9 85       	ldd	r26, Y+9	; 0x09
    274a:	ba 85       	ldd	r27, Y+10	; 0x0a
    274c:	87 3f       	cpi	r24, 0xF7	; 247
    274e:	2f ef       	ldi	r18, 0xFF	; 255
    2750:	92 07       	cpc	r25, r18
    2752:	2f ef       	ldi	r18, 0xFF	; 255
    2754:	a2 07       	cpc	r26, r18
    2756:	2f ef       	ldi	r18, 0xFF	; 255
    2758:	b2 07       	cpc	r27, r18
    275a:	f4 f0       	brlt	.+60     	; 0x2798 <main+0xa00>
		{
			CLCD_voidSendNumber(Local_Res);
    275c:	8b 85       	ldd	r24, Y+11	; 0x0b
    275e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2760:	ad 85       	ldd	r26, Y+13	; 0x0d
    2762:	be 85       	ldd	r27, Y+14	; 0x0e
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    276c:	8e e2       	ldi	r24, 0x2E	; 46
    276e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendData('0');
    2772:	80 e3       	ldi	r24, 0x30	; 48
    2774:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(-Local_Remainder);
    2778:	8f 81       	ldd	r24, Y+7	; 0x07
    277a:	98 85       	ldd	r25, Y+8	; 0x08
    277c:	a9 85       	ldd	r26, Y+9	; 0x09
    277e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2780:	b0 95       	com	r27
    2782:	a0 95       	com	r26
    2784:	90 95       	com	r25
    2786:	81 95       	neg	r24
    2788:	9f 4f       	sbci	r25, 0xFF	; 255
    278a:	af 4f       	sbci	r26, 0xFF	; 255
    278c:	bf 4f       	sbci	r27, 0xFF	; 255
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2796:	8f c0       	rjmp	.+286    	; 0x28b6 <main+0xb1e>
		}
		else
		{
			CLCD_voidSendNumber(Local_Res);
    2798:	8b 85       	ldd	r24, Y+11	; 0x0b
    279a:	9c 85       	ldd	r25, Y+12	; 0x0c
    279c:	ad 85       	ldd	r26, Y+13	; 0x0d
    279e:	be 85       	ldd	r27, Y+14	; 0x0e
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			CLCD_voidSendData('.');
    27a8:	8e e2       	ldi	r24, 0x2E	; 46
    27aa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendNumber(Local_Remainder);
    27ae:	8f 81       	ldd	r24, Y+7	; 0x07
    27b0:	98 85       	ldd	r25, Y+8	; 0x08
    27b2:	a9 85       	ldd	r26, Y+9	; 0x09
    27b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    27be:	7b c0       	rjmp	.+246    	; 0x28b6 <main+0xb1e>
		}
				}
				 break;
				case '*':if(Local_FloatIndicator1==0&&Local_FloatIndicator2==0)
    27c0:	8e 81       	ldd	r24, Y+6	; 0x06
    27c2:	88 23       	and	r24, r24
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <main+0xa30>
    27c6:	77 c0       	rjmp	.+238    	; 0x28b6 <main+0xb1e>
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	88 23       	and	r24, r24
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <main+0xa38>
    27ce:	73 c0       	rjmp	.+230    	; 0x28b6 <main+0xb1e>
						{
							Local_Res=Local_Num1*Local_Num2;
    27d0:	88 a1       	ldd	r24, Y+32	; 0x20
    27d2:	99 a1       	ldd	r25, Y+33	; 0x21
    27d4:	aa a1       	ldd	r26, Y+34	; 0x22
    27d6:	bb a1       	ldd	r27, Y+35	; 0x23
    27d8:	2e 89       	ldd	r18, Y+22	; 0x16
    27da:	3f 89       	ldd	r19, Y+23	; 0x17
    27dc:	48 8d       	ldd	r20, Y+24	; 0x18
    27de:	59 8d       	ldd	r21, Y+25	; 0x19
    27e0:	bc 01       	movw	r22, r24
    27e2:	cd 01       	movw	r24, r26
    27e4:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8b 87       	std	Y+11, r24	; 0x0b
    27ee:	9c 87       	std	Y+12, r25	; 0x0c
    27f0:	ad 87       	std	Y+13, r26	; 0x0d
    27f2:	be 87       	std	Y+14, r27	; 0x0e
							CLCD_voidSendNumber(Local_Res);
    27f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    27f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    27f8:	ad 85       	ldd	r26, Y+13	; 0x0d
    27fa:	be 85       	ldd	r27, Y+14	; 0x0e
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2804:	58 c0       	rjmp	.+176    	; 0x28b6 <main+0xb1e>
						else
						{

						}
						break;
				case '/':if(Local_Num2==0)
    2806:	8e 89       	ldd	r24, Y+22	; 0x16
    2808:	9f 89       	ldd	r25, Y+23	; 0x17
    280a:	a8 8d       	ldd	r26, Y+24	; 0x18
    280c:	b9 8d       	ldd	r27, Y+25	; 0x19
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	a1 05       	cpc	r26, r1
    2812:	b1 05       	cpc	r27, r1
    2814:	29 f4       	brne	.+10     	; 0x2820 <main+0xa88>
						{
						   CLCD_u8SendString("undefined");
    2816:	80 e6       	ldi	r24, 0x60	; 96
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 34 07 	call	0xe68	; 0xe68 <CLCD_u8SendString>
    281e:	4b c0       	rjmp	.+150    	; 0x28b6 <main+0xb1e>
						}
						 else
						 {
							 Local_Res=(Local_Num1)/Local_Num2;
    2820:	88 a1       	ldd	r24, Y+32	; 0x20
    2822:	99 a1       	ldd	r25, Y+33	; 0x21
    2824:	aa a1       	ldd	r26, Y+34	; 0x22
    2826:	bb a1       	ldd	r27, Y+35	; 0x23
    2828:	2e 89       	ldd	r18, Y+22	; 0x16
    282a:	3f 89       	ldd	r19, Y+23	; 0x17
    282c:	48 8d       	ldd	r20, Y+24	; 0x18
    282e:	59 8d       	ldd	r21, Y+25	; 0x19
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    2838:	da 01       	movw	r26, r20
    283a:	c9 01       	movw	r24, r18
    283c:	8b 87       	std	Y+11, r24	; 0x0b
    283e:	9c 87       	std	Y+12, r25	; 0x0c
    2840:	ad 87       	std	Y+13, r26	; 0x0d
    2842:	be 87       	std	Y+14, r27	; 0x0e
							 CLCD_voidSendNumber(Local_Res);
    2844:	8b 85       	ldd	r24, Y+11	; 0x0b
    2846:	9c 85       	ldd	r25, Y+12	; 0x0c
    2848:	ad 85       	ldd	r26, Y+13	; 0x0d
    284a:	be 85       	ldd	r27, Y+14	; 0x0e
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
							 CLCD_voidSendData('.');
    2854:	8e e2       	ldi	r24, 0x2E	; 46
    2856:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
							 Local_Res=((Local_Num1*100)/Local_Num2)%100;
    285a:	88 a1       	ldd	r24, Y+32	; 0x20
    285c:	99 a1       	ldd	r25, Y+33	; 0x21
    285e:	aa a1       	ldd	r26, Y+34	; 0x22
    2860:	bb a1       	ldd	r27, Y+35	; 0x23
    2862:	24 e6       	ldi	r18, 0x64	; 100
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 81 14 	call	0x2902	; 0x2902 <__mulsi3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	2e 89       	ldd	r18, Y+22	; 0x16
    2878:	3f 89       	ldd	r19, Y+23	; 0x17
    287a:	48 8d       	ldd	r20, Y+24	; 0x18
    287c:	59 8d       	ldd	r21, Y+25	; 0x19
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    2886:	da 01       	movw	r26, r20
    2888:	c9 01       	movw	r24, r18
    288a:	24 e6       	ldi	r18, 0x64	; 100
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 a0 14 	call	0x2940	; 0x2940 <__divmodsi4>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8b 87       	std	Y+11, r24	; 0x0b
    28a0:	9c 87       	std	Y+12, r25	; 0x0c
    28a2:	ad 87       	std	Y+13, r26	; 0x0d
    28a4:	be 87       	std	Y+14, r27	; 0x0e
							 CLCD_voidSendNumber(Local_Res);
    28a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    28aa:	ad 85       	ldd	r26, Y+13	; 0x0d
    28ac:	be 85       	ldd	r27, Y+14	; 0x0e
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
						 }
						 break;
				}
				while(KPD_u8GetPressedKey()==0xff);
    28b6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <KPD_u8GetPressedKey>
    28ba:	8f 3f       	cpi	r24, 0xFF	; 255
    28bc:	e1 f3       	breq	.-8      	; 0x28b6 <main+0xb1e>
			}
			CLCD_voidSendComd(1);
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
			Local_Operator='0';
    28c4:	80 e3       	ldi	r24, 0x30	; 48
    28c6:	88 8b       	std	Y+16, r24	; 0x10
			Local_Arr1Counter=0;
    28c8:	1c a2       	std	Y+36, r1	; 0x24
			Local_Num1Unit=1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	8b 8f       	std	Y+27, r24	; 0x1b
    28d4:	9c 8f       	std	Y+28, r25	; 0x1c
    28d6:	ad 8f       	std	Y+29, r26	; 0x1d
    28d8:	be 8f       	std	Y+30, r27	; 0x1e
			Local_Arr2Counter=0;
    28da:	1a 8e       	std	Y+26, r1	; 0x1a
			Local_Num2Unit=1;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 e0       	ldi	r26, 0x00	; 0
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	89 8b       	std	Y+17, r24	; 0x11
    28e6:	9a 8b       	std	Y+18, r25	; 0x12
    28e8:	ab 8b       	std	Y+19, r26	; 0x13
    28ea:	bc 8b       	std	Y+20, r27	; 0x14
			Local_FloatIndicator1=0;
    28ec:	1e 82       	std	Y+6, r1	; 0x06
			Local_FloatIndicator2=0;
    28ee:	1d 82       	std	Y+5, r1	; 0x05
			Local_FloatCounter1=1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9c 83       	std	Y+4, r25	; 0x04
    28f6:	8b 83       	std	Y+3, r24	; 0x03
			Local_FloatCounter2=1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	f4 ca       	rjmp	.-2584   	; 0x1eea <main+0x152>

00002902 <__mulsi3>:
    2902:	62 9f       	mul	r22, r18
    2904:	d0 01       	movw	r26, r0
    2906:	73 9f       	mul	r23, r19
    2908:	f0 01       	movw	r30, r0
    290a:	82 9f       	mul	r24, r18
    290c:	e0 0d       	add	r30, r0
    290e:	f1 1d       	adc	r31, r1
    2910:	64 9f       	mul	r22, r20
    2912:	e0 0d       	add	r30, r0
    2914:	f1 1d       	adc	r31, r1
    2916:	92 9f       	mul	r25, r18
    2918:	f0 0d       	add	r31, r0
    291a:	83 9f       	mul	r24, r19
    291c:	f0 0d       	add	r31, r0
    291e:	74 9f       	mul	r23, r20
    2920:	f0 0d       	add	r31, r0
    2922:	65 9f       	mul	r22, r21
    2924:	f0 0d       	add	r31, r0
    2926:	99 27       	eor	r25, r25
    2928:	72 9f       	mul	r23, r18
    292a:	b0 0d       	add	r27, r0
    292c:	e1 1d       	adc	r30, r1
    292e:	f9 1f       	adc	r31, r25
    2930:	63 9f       	mul	r22, r19
    2932:	b0 0d       	add	r27, r0
    2934:	e1 1d       	adc	r30, r1
    2936:	f9 1f       	adc	r31, r25
    2938:	bd 01       	movw	r22, r26
    293a:	cf 01       	movw	r24, r30
    293c:	11 24       	eor	r1, r1
    293e:	08 95       	ret

00002940 <__divmodsi4>:
    2940:	97 fb       	bst	r25, 7
    2942:	09 2e       	mov	r0, r25
    2944:	05 26       	eor	r0, r21
    2946:	0e d0       	rcall	.+28     	; 0x2964 <__divmodsi4_neg1>
    2948:	57 fd       	sbrc	r21, 7
    294a:	04 d0       	rcall	.+8      	; 0x2954 <__divmodsi4_neg2>
    294c:	14 d0       	rcall	.+40     	; 0x2976 <__udivmodsi4>
    294e:	0a d0       	rcall	.+20     	; 0x2964 <__divmodsi4_neg1>
    2950:	00 1c       	adc	r0, r0
    2952:	38 f4       	brcc	.+14     	; 0x2962 <__divmodsi4_exit>

00002954 <__divmodsi4_neg2>:
    2954:	50 95       	com	r21
    2956:	40 95       	com	r20
    2958:	30 95       	com	r19
    295a:	21 95       	neg	r18
    295c:	3f 4f       	sbci	r19, 0xFF	; 255
    295e:	4f 4f       	sbci	r20, 0xFF	; 255
    2960:	5f 4f       	sbci	r21, 0xFF	; 255

00002962 <__divmodsi4_exit>:
    2962:	08 95       	ret

00002964 <__divmodsi4_neg1>:
    2964:	f6 f7       	brtc	.-4      	; 0x2962 <__divmodsi4_exit>
    2966:	90 95       	com	r25
    2968:	80 95       	com	r24
    296a:	70 95       	com	r23
    296c:	61 95       	neg	r22
    296e:	7f 4f       	sbci	r23, 0xFF	; 255
    2970:	8f 4f       	sbci	r24, 0xFF	; 255
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	08 95       	ret

00002976 <__udivmodsi4>:
    2976:	a1 e2       	ldi	r26, 0x21	; 33
    2978:	1a 2e       	mov	r1, r26
    297a:	aa 1b       	sub	r26, r26
    297c:	bb 1b       	sub	r27, r27
    297e:	fd 01       	movw	r30, r26
    2980:	0d c0       	rjmp	.+26     	; 0x299c <__udivmodsi4_ep>

00002982 <__udivmodsi4_loop>:
    2982:	aa 1f       	adc	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	ee 1f       	adc	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	a2 17       	cp	r26, r18
    298c:	b3 07       	cpc	r27, r19
    298e:	e4 07       	cpc	r30, r20
    2990:	f5 07       	cpc	r31, r21
    2992:	20 f0       	brcs	.+8      	; 0x299c <__udivmodsi4_ep>
    2994:	a2 1b       	sub	r26, r18
    2996:	b3 0b       	sbc	r27, r19
    2998:	e4 0b       	sbc	r30, r20
    299a:	f5 0b       	sbc	r31, r21

0000299c <__udivmodsi4_ep>:
    299c:	66 1f       	adc	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	88 1f       	adc	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	1a 94       	dec	r1
    29a6:	69 f7       	brne	.-38     	; 0x2982 <__udivmodsi4_loop>
    29a8:	60 95       	com	r22
    29aa:	70 95       	com	r23
    29ac:	80 95       	com	r24
    29ae:	90 95       	com	r25
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	bd 01       	movw	r22, r26
    29b6:	cf 01       	movw	r24, r30
    29b8:	08 95       	ret

000029ba <__prologue_saves__>:
    29ba:	2f 92       	push	r2
    29bc:	3f 92       	push	r3
    29be:	4f 92       	push	r4
    29c0:	5f 92       	push	r5
    29c2:	6f 92       	push	r6
    29c4:	7f 92       	push	r7
    29c6:	8f 92       	push	r8
    29c8:	9f 92       	push	r9
    29ca:	af 92       	push	r10
    29cc:	bf 92       	push	r11
    29ce:	cf 92       	push	r12
    29d0:	df 92       	push	r13
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	ca 1b       	sub	r28, r26
    29e4:	db 0b       	sbc	r29, r27
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	09 94       	ijmp

000029f2 <__epilogue_restores__>:
    29f2:	2a 88       	ldd	r2, Y+18	; 0x12
    29f4:	39 88       	ldd	r3, Y+17	; 0x11
    29f6:	48 88       	ldd	r4, Y+16	; 0x10
    29f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    29fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    29fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a00:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a02:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a04:	b9 84       	ldd	r11, Y+9	; 0x09
    2a06:	c8 84       	ldd	r12, Y+8	; 0x08
    2a08:	df 80       	ldd	r13, Y+7	; 0x07
    2a0a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a0c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a0e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a10:	1b 81       	ldd	r17, Y+3	; 0x03
    2a12:	aa 81       	ldd	r26, Y+2	; 0x02
    2a14:	b9 81       	ldd	r27, Y+1	; 0x01
    2a16:	ce 0f       	add	r28, r30
    2a18:	d1 1d       	adc	r29, r1
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	ed 01       	movw	r28, r26
    2a26:	08 95       	ret

00002a28 <_exit>:
    2a28:	f8 94       	cli

00002a2a <__stop_program>:
    2a2a:	ff cf       	rjmp	.-2      	; 0x2a2a <__stop_program>


Assignment18.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00002824  000028b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080009a  0080009a  000028f2  2**0
                  ALLOC
  3 .stab         00002454  00000000  00000000  000028f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ebd  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000089e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009798  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000098f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a353  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__vector_1>
       8:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__vector_2>
       c:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <main>
      8a:	0c 94 10 14 	jmp	0x2820	; 0x2820 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e9       	ldi	r26, 0x92	; 146
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e9       	ldi	r24, 0x92	; 146
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 05 14 	jmp	0x280a	; 0x280a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

static void voidSendEnablePulse(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e4       	ldi	r27, 0x40	; 64
     b6c:	8b 87       	std	Y+11, r24	; 0x0b
     b6e:	9c 87       	std	Y+12, r25	; 0x0c
     b70:	ad 87       	std	Y+13, r26	; 0x0d
     b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	6b 85       	ldd	r22, Y+11	; 0x0b
     b76:	7c 85       	ldd	r23, Y+12	; 0x0c
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a e7       	ldi	r20, 0x7A	; 122
     b82:	55 e4       	ldi	r21, 0x45	; 69
     b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	8f 83       	std	Y+7, r24	; 0x07
     b8e:	98 87       	std	Y+8, r25	; 0x08
     b90:	a9 87       	std	Y+9, r26	; 0x09
     b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	2c f4       	brge	.+10     	; 0xbb6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	8d 83       	std	Y+5, r24	; 0x05
     bb4:	3f c0       	rjmp	.+126    	; 0xc34 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bca:	18 16       	cp	r1, r24
     bcc:	4c f5       	brge	.+82     	; 0xc20 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <voidSendEnablePulse+0xd0>
     bf8:	80 e9       	ldi	r24, 0x90	; 144
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <voidSendEnablePulse+0xbe>
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <voidSendEnablePulse+0xb2>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	78 85       	ldd	r23, Y+8	; 0x08
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <voidSendEnablePulse+0xfa>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
}
     c52:	2e 96       	adiw	r28, 0x0e	; 14
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	98 2f       	mov	r25, r24
     c74:	91 70       	andi	r25, 0x01	; 1
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	64 e0       	ldi	r22, 0x04	; 4
     c7a:	49 2f       	mov	r20, r25
     c7c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	86 95       	lsr	r24
     c84:	98 2f       	mov	r25, r24
     c86:	91 70       	andi	r25, 0x01	; 1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	65 e0       	ldi	r22, 0x05	; 5
     c8c:	49 2f       	mov	r20, r25
     c8e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	86 95       	lsr	r24
     c96:	86 95       	lsr	r24
     c98:	98 2f       	mov	r25, r24
     c9a:	91 70       	andi	r25, 0x01	; 1
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	66 e0       	ldi	r22, 0x06	; 6
     ca0:	49 2f       	mov	r20, r25
     ca2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	86 95       	lsr	r24
     caa:	86 95       	lsr	r24
     cac:	86 95       	lsr	r24
     cae:	98 2f       	mov	r25, r24
     cb0:	91 70       	andi	r25, 0x01	; 1
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	67 e0       	ldi	r22, 0x07	; 7
     cb6:	49 2f       	mov	r20, r25
     cb8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
}
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendComd>:

void CLCD_voidSendComd(uint8 Copy_Cmd)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
    #if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
	/*set command at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_Cmd);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Cmd>>4);
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	82 95       	swap	r24
     ce8:	8f 70       	andi	r24, 0x0F	; 15
     cea:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cee:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Cmd);
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cf8:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	#endif
}
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_Data)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
	#if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPinValue>
	/*set data at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_Data);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Data>>4);
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	82 95       	swap	r24
     d28:	8f 70       	andi	r24, 0x0F	; 15
     d2a:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Data);
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d38:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	#endif

}
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <CLCD_voidInit>:

void CLCD_voidInit(void) /*from datasheet*/
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	2e 97       	sbiw	r28, 0x0e	; 14
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a0 e2       	ldi	r26, 0x20	; 32
     d5e:	b2 e4       	ldi	r27, 0x42	; 66
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a e7       	ldi	r20, 0x7A	; 122
     d76:	55 e4       	ldi	r21, 0x45	; 69
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <CLCD_voidInit+0x66>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <CLCD_voidInit+0xc6>
     dec:	80 e9       	ldi	r24, 0x90	; 144
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <CLCD_voidInit+0xb4>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <CLCD_voidInit+0xa8>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <CLCD_voidInit+0xf0>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*function set command: 2lines(DB3 high) and small font(DB2 low)*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	CLCD_voidSendComd(0b00111000);
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e42:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e50:	88 e0       	ldi	r24, 0x08	; 8
     e52:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e56:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	#endif

	/*display on/off control command: display enable(DB2 high),cursor(DB1 low),blink(DB0 low)*/
	CLCD_voidSendComd(0b00001100);
     e5a:	8c e0       	ldi	r24, 0x0C	; 12
     e5c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
	/*display clear command*/
	CLCD_voidSendComd(0b00000001);
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
	
}
     e66:	2e 96       	adiw	r28, 0x0e	; 14
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <CLCD_u8SendString>:
uint8 CLCD_u8SendString(char Copy_chstring[])
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <CLCD_u8SendString+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <CLCD_u8SendString+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8StateError=OK;
     e88:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	e1 f0       	breq	.+56     	; 0xeca <CLCD_u8SendString+0x52>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     e92:	19 82       	std	Y+1, r1	; 0x01
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <CLCD_u8SendString+0x3a>
	{
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	fc 01       	movw	r30, r24
     ea2:	e2 0f       	add	r30, r18
     ea4:	f3 1f       	adc	r31, r19
     ea6:	80 81       	ld	r24, Z
     ea8:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
uint8 CLCD_u8SendString(char Copy_chstring[])
{
	uint8 Local_u8StateError=OK;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	fc 01       	movw	r30, r24
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	80 81       	ld	r24, Z
     ec4:	88 23       	and	r24, r24
     ec6:	39 f7       	brne	.-50     	; 0xe96 <CLCD_u8SendString+0x1e>
     ec8:	02 c0       	rjmp	.+4      	; 0xece <CLCD_u8SendString+0x56>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8StateError;
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	61 97       	sbiw	r28, 0x11	; 17
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	6e 87       	std	Y+14, r22	; 0x0e
     ef4:	7f 87       	std	Y+15, r23	; 0x0f
     ef6:	88 8b       	std	Y+16, r24	; 0x10
     ef8:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chArray[10];
	sint8 Local_s8Remainder,Local_s8ArrayIndex=0;
     efa:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_s32Number==0)
     efc:	8e 85       	ldd	r24, Y+14	; 0x0e
     efe:	9f 85       	ldd	r25, Y+15	; 0x0f
     f00:	a8 89       	ldd	r26, Y+16	; 0x10
     f02:	b9 89       	ldd	r27, Y+17	; 0x11
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	a1 05       	cpc	r26, r1
     f08:	b1 05       	cpc	r27, r1
     f0a:	21 f4       	brne	.+8      	; 0xf14 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData(48);
     f0c:	80 e3       	ldi	r24, 0x30	; 48
     f0e:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
     f12:	86 c0       	rjmp	.+268    	; 0x1020 <CLCD_voidSendNumber+0x142>
	}
	else if(Copy_s32Number>0)
     f14:	8e 85       	ldd	r24, Y+14	; 0x0e
     f16:	9f 85       	ldd	r25, Y+15	; 0x0f
     f18:	a8 89       	ldd	r26, Y+16	; 0x10
     f1a:	b9 89       	ldd	r27, Y+17	; 0x11
     f1c:	18 16       	cp	r1, r24
     f1e:	19 06       	cpc	r1, r25
     f20:	1a 06       	cpc	r1, r26
     f22:	1b 06       	cpc	r1, r27
     f24:	d4 f5       	brge	.+116    	; 0xf9a <CLCD_voidSendNumber+0xbc>
     f26:	30 c0       	rjmp	.+96     	; 0xf88 <CLCD_voidSendNumber+0xaa>
	{
	while(Copy_s32Number!=0)
	{
		Local_s8Remainder=Copy_s32Number%10;
     f28:	8e 85       	ldd	r24, Y+14	; 0x0e
     f2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f2c:	a8 89       	ldd	r26, Y+16	; 0x10
     f2e:	b9 89       	ldd	r27, Y+17	; 0x11
     f30:	2a e0       	ldi	r18, 0x0A	; 10
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 9c 13 	call	0x2738	; 0x2738 <__divmodsi4>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8b 83       	std	Y+3, r24	; 0x03
		Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	33 27       	eor	r19, r19
     f4c:	27 fd       	sbrc	r18, 7
     f4e:	30 95       	com	r19
     f50:	4b 81       	ldd	r20, Y+3	; 0x03
     f52:	ce 01       	movw	r24, r28
     f54:	04 96       	adiw	r24, 0x04	; 4
     f56:	fc 01       	movw	r30, r24
     f58:	e2 0f       	add	r30, r18
     f5a:	f3 1f       	adc	r31, r19
     f5c:	40 83       	st	Z, r20
		Local_s8ArrayIndex++;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number/=10;
     f64:	8e 85       	ldd	r24, Y+14	; 0x0e
     f66:	9f 85       	ldd	r25, Y+15	; 0x0f
     f68:	a8 89       	ldd	r26, Y+16	; 0x10
     f6a:	b9 89       	ldd	r27, Y+17	; 0x11
     f6c:	2a e0       	ldi	r18, 0x0A	; 10
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 9c 13 	call	0x2738	; 0x2738 <__divmodsi4>
     f7c:	da 01       	movw	r26, r20
     f7e:	c9 01       	movw	r24, r18
     f80:	8e 87       	std	Y+14, r24	; 0x0e
     f82:	9f 87       	std	Y+15, r25	; 0x0f
     f84:	a8 8b       	std	Y+16, r26	; 0x10
     f86:	b9 8b       	std	Y+17, r27	; 0x11
	{
		CLCD_voidSendData(48);
	}
	else if(Copy_s32Number>0)
	{
	while(Copy_s32Number!=0)
     f88:	8e 85       	ldd	r24, Y+14	; 0x0e
     f8a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f8c:	a8 89       	ldd	r26, Y+16	; 0x10
     f8e:	b9 89       	ldd	r27, Y+17	; 0x11
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	a1 05       	cpc	r26, r1
     f94:	b1 05       	cpc	r27, r1
     f96:	41 f6       	brne	.-112    	; 0xf28 <CLCD_voidSendNumber+0x4a>
     f98:	43 c0       	rjmp	.+134    	; 0x1020 <CLCD_voidSendNumber+0x142>
		Copy_s32Number/=10;
	}
	}
	else
	{
		CLCD_voidSendData('-');
     f9a:	8d e2       	ldi	r24, 0x2D	; 45
     f9c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
     fa0:	37 c0       	rjmp	.+110    	; 0x1010 <CLCD_voidSendNumber+0x132>
		while(Copy_s32Number!=0)
		{
			Local_s8Remainder=-Copy_s32Number%10;
     fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa6:	a8 89       	ldd	r26, Y+16	; 0x10
     fa8:	b9 89       	ldd	r27, Y+17	; 0x11
     faa:	b0 95       	com	r27
     fac:	a0 95       	com	r26
     fae:	90 95       	com	r25
     fb0:	81 95       	neg	r24
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	af 4f       	sbci	r26, 0xFF	; 255
     fb6:	bf 4f       	sbci	r27, 0xFF	; 255
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 9c 13 	call	0x2738	; 0x2738 <__divmodsi4>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8b 83       	std	Y+3, r24	; 0x03
			Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	33 27       	eor	r19, r19
     fd4:	27 fd       	sbrc	r18, 7
     fd6:	30 95       	com	r19
     fd8:	4b 81       	ldd	r20, Y+3	; 0x03
     fda:	ce 01       	movw	r24, r28
     fdc:	04 96       	adiw	r24, 0x04	; 4
     fde:	fc 01       	movw	r30, r24
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	40 83       	st	Z, r20
			Local_s8ArrayIndex++;
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	8a 83       	std	Y+2, r24	; 0x02
			Copy_s32Number/=10;
     fec:	8e 85       	ldd	r24, Y+14	; 0x0e
     fee:	9f 85       	ldd	r25, Y+15	; 0x0f
     ff0:	a8 89       	ldd	r26, Y+16	; 0x10
     ff2:	b9 89       	ldd	r27, Y+17	; 0x11
     ff4:	2a e0       	ldi	r18, 0x0A	; 10
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 9c 13 	call	0x2738	; 0x2738 <__divmodsi4>
    1004:	da 01       	movw	r26, r20
    1006:	c9 01       	movw	r24, r18
    1008:	8e 87       	std	Y+14, r24	; 0x0e
    100a:	9f 87       	std	Y+15, r25	; 0x0f
    100c:	a8 8b       	std	Y+16, r26	; 0x10
    100e:	b9 8b       	std	Y+17, r27	; 0x11
	}
	}
	else
	{
		CLCD_voidSendData('-');
		while(Copy_s32Number!=0)
    1010:	8e 85       	ldd	r24, Y+14	; 0x0e
    1012:	9f 85       	ldd	r25, Y+15	; 0x0f
    1014:	a8 89       	ldd	r26, Y+16	; 0x10
    1016:	b9 89       	ldd	r27, Y+17	; 0x11
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	a1 05       	cpc	r26, r1
    101c:	b1 05       	cpc	r27, r1
    101e:	09 f6       	brne	.-126    	; 0xfa2 <CLCD_voidSendNumber+0xc4>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	81 50       	subi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	11 c0       	rjmp	.+34     	; 0x104a <CLCD_voidSendNumber+0x16c>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	33 27       	eor	r19, r19
    102e:	27 fd       	sbrc	r18, 7
    1030:	30 95       	com	r19
    1032:	ce 01       	movw	r24, r28
    1034:	04 96       	adiw	r24, 0x04	; 4
    1036:	fc 01       	movw	r30, r24
    1038:	e2 0f       	add	r30, r18
    103a:	f3 1f       	adc	r31, r19
    103c:	80 81       	ld	r24, Z
    103e:	80 5d       	subi	r24, 0xD0	; 208
    1040:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	81 50       	subi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 23       	and	r24, r24
    104e:	64 f7       	brge	.-40     	; 0x1028 <CLCD_voidSendNumber+0x14a>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
	}
	}
}
    1050:	61 96       	adiw	r28, 0x11	; 17
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <CLCD_voidGoToXY+0x6>
    1068:	0f 92       	push	r0
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	8a 83       	std	Y+2, r24	; 0x02
    1070:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRAMAdd;
	if(Copy_u8YPos==0u)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	88 23       	and	r24, r24
    1076:	19 f4       	brne	.+6      	; 0x107e <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAMAdd=Copy_u8XPos;
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	06 c0       	rjmp	.+12     	; 0x108a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos==1u)
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	19 f4       	brne	.+6      	; 0x108a <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRAMAdd=Copy_u8XPos+0x40;
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 5c       	subi	r24, 0xC0	; 192
    1088:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRAMAdd|=1<<7;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendComd(Local_u8DDRAMAdd);
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <CLCD_u8SinWaveSendString>:
uint8 CLCD_u8SinWaveSendString(char Copy_chstring[])
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <CLCD_u8SinWaveSendString+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <CLCD_u8SinWaveSendString+0x8>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <CLCD_u8SinWaveSendString+0xa>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Local_u8StateError=OK;
    10b4:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_u8XCoordinate=0;
    10b6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8YCoordinate=0;
    10b8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	51 f1       	breq	.+84     	; 0x1116 <CLCD_u8SinWaveSendString+0x74>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	1c c0       	rjmp	.+56     	; 0x10fe <CLCD_u8SinWaveSendString+0x5c>
	{
		CLCD_voidGoToXY(Local_u8XCoordinate,Local_u8YCoordinate);
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	6a 81       	ldd	r22, Y+2	; 0x02
    10ca:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	fc 01       	movw	r30, r24
    10da:	e2 0f       	add	r30, r18
    10dc:	f3 1f       	adc	r31, r19
    10de:	80 81       	ld	r24, Z
    10e0:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		if(Local_u8YCoordinate==0)Local_u8YCoordinate=1;
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 23       	and	r24, r24
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <CLCD_u8SinWaveSendString+0x4e>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <CLCD_u8SinWaveSendString+0x50>
		else Local_u8YCoordinate=0;
    10f0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8StateError=OK;
	uint8 Local_u8XCoordinate=0;
	uint8 Local_u8YCoordinate=0;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	fc 01       	movw	r30, r24
    110a:	e2 0f       	add	r30, r18
    110c:	f3 1f       	adc	r31, r19
    110e:	80 81       	ld	r24, Z
    1110:	88 23       	and	r24, r24
    1112:	c9 f6       	brne	.-78     	; 0x10c6 <CLCD_u8SinWaveSendString+0x24>
    1114:	02 c0       	rjmp	.+4      	; 0x111a <CLCD_u8SinWaveSendString+0x78>
		else Local_u8YCoordinate=0;
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	8c 83       	std	Y+4, r24	; 0x04
	}
	return Local_u8StateError;
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    111c:	26 96       	adiw	r28, 0x06	; 6
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 Copy_u8Pattern[],uint8 Copy_u8PatternNum,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	27 97       	sbiw	r28, 0x07	; 7
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	6d 83       	std	Y+5, r22	; 0x05
    1148:	4e 83       	std	Y+6, r20	; 0x06
    114a:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendComd(Local_u8CGRAMAdd);
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	0e c0       	rjmp	.+28     	; 0x118c <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	fc 01       	movw	r30, r24
    117c:	e2 0f       	add	r30, r18
    117e:	f3 1f       	adc	r31, r19
    1180:	80 81       	ld	r24, Z
    1182:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
{
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
	CLCD_voidSendComd(Local_u8CGRAMAdd);
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	88 30       	cpi	r24, 0x08	; 8
    1190:	78 f3       	brcs	.-34     	; 0x1170 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	6f 81       	ldd	r22, Y+7	; 0x07
    1196:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNum);
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
}
    11a0:	27 96       	adiw	r28, 0x07	; 7
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <CLCD_voidSendBinaryNum>:

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <CLCD_voidSendBinaryNum+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <CLCD_voidSendBinaryNum+0x8>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <CLCD_voidSendBinaryNum+0xa>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	6b 83       	std	Y+3, r22	; 0x03
    11c2:	7c 83       	std	Y+4, r23	; 0x04
    11c4:	8d 83       	std	Y+5, r24	; 0x05
    11c6:	9e 83       	std	Y+6, r25	; 0x06
	sint8 Local_s8Counter;
	uint8 Local_u8BitState;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    11c8:	8f e1       	ldi	r24, 0x1F	; 31
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	29 c0       	rjmp	.+82     	; 0x1220 <CLCD_voidSendBinaryNum+0x6e>
	{
		CLCD_voidGoToXY((31-Local_s8Counter),0);
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	8f e1       	ldi	r24, 0x1F	; 31
    11d2:	89 1b       	sub	r24, r25
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	33 27       	eor	r19, r19
    11e0:	27 fd       	sbrc	r18, 7
    11e2:	30 95       	com	r19
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	ad 81       	ldd	r26, Y+5	; 0x05
    11ea:	be 81       	ldd	r27, Y+6	; 0x06
    11ec:	02 2e       	mov	r0, r18
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <CLCD_voidSendBinaryNum+0x46>
    11f0:	b5 95       	asr	r27
    11f2:	a7 95       	ror	r26
    11f4:	97 95       	ror	r25
    11f6:	87 95       	ror	r24
    11f8:	0a 94       	dec	r0
    11fa:	d2 f7       	brpl	.-12     	; 0x11f0 <CLCD_voidSendBinaryNum+0x3e>
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	90 70       	andi	r25, 0x00	; 0
    1200:	a0 70       	andi	r26, 0x00	; 0
    1202:	b0 70       	andi	r27, 0x00	; 0
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	a1 05       	cpc	r26, r1
    1208:	b1 05       	cpc	r27, r1
    120a:	21 f4       	brne	.+8      	; 0x1214 <CLCD_voidSendBinaryNum+0x62>
		{
			CLCD_voidSendData('0');
    120c:	80 e3       	ldi	r24, 0x30	; 48
    120e:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    1212:	03 c0       	rjmp	.+6      	; 0x121a <CLCD_voidSendBinaryNum+0x68>
		}
		else
		{
			CLCD_voidSendData('1');
    1214:	81 e3       	ldi	r24, 0x31	; 49
    1216:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>

void CLCD_voidSendBinaryNum(sint32 Copy_s32Number)
{
	sint8 Local_s8Counter;
	uint8 Local_u8BitState;
	for(Local_s8Counter=31;Local_s8Counter>=16;Local_s8Counter--)
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	81 50       	subi	r24, 0x01	; 1
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 31       	cpi	r24, 0x10	; 16
    1224:	a4 f6       	brge	.-88     	; 0x11ce <CLCD_voidSendBinaryNum+0x1c>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    1226:	8f e0       	ldi	r24, 0x0F	; 15
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	29 c0       	rjmp	.+82     	; 0x127e <CLCD_voidSendBinaryNum+0xcc>
		{
			CLCD_voidGoToXY((15-Local_s8Counter),1);
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	8f e0       	ldi	r24, 0x0F	; 15
    1230:	89 1b       	sub	r24, r25
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			if(GET_BIT(Copy_s32Number,Local_s8Counter)==0)
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	33 27       	eor	r19, r19
    123e:	27 fd       	sbrc	r18, 7
    1240:	30 95       	com	r19
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	ad 81       	ldd	r26, Y+5	; 0x05
    1248:	be 81       	ldd	r27, Y+6	; 0x06
    124a:	02 2e       	mov	r0, r18
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <CLCD_voidSendBinaryNum+0xa4>
    124e:	b5 95       	asr	r27
    1250:	a7 95       	ror	r26
    1252:	97 95       	ror	r25
    1254:	87 95       	ror	r24
    1256:	0a 94       	dec	r0
    1258:	d2 f7       	brpl	.-12     	; 0x124e <CLCD_voidSendBinaryNum+0x9c>
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	90 70       	andi	r25, 0x00	; 0
    125e:	a0 70       	andi	r26, 0x00	; 0
    1260:	b0 70       	andi	r27, 0x00	; 0
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	a1 05       	cpc	r26, r1
    1266:	b1 05       	cpc	r27, r1
    1268:	21 f4       	brne	.+8      	; 0x1272 <CLCD_voidSendBinaryNum+0xc0>
			{
				CLCD_voidSendData('0');
    126a:	80 e3       	ldi	r24, 0x30	; 48
    126c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <CLCD_voidSendBinaryNum+0xc6>
			}
			else
			{
				CLCD_voidSendData('1');
    1272:	81 e3       	ldi	r24, 0x31	; 49
    1274:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		else
		{
			CLCD_voidSendData('1');
		}
	}
		for(Local_s8Counter=15;Local_s8Counter>=0;Local_s8Counter--)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	81 50       	subi	r24, 0x01	; 1
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	88 23       	and	r24, r24
    1282:	a4 f6       	brge	.-88     	; 0x122c <CLCD_voidSendBinaryNum+0x7a>
			{
				CLCD_voidSendData('1');
			}

	}
}
    1284:	26 96       	adiw	r28, 0x06	; 6
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <CLCD_voidSendHexaNum>:

void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	2e 97       	sbiw	r28, 0x0e	; 14
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	6b 87       	std	Y+11, r22	; 0x0b
    12ac:	7c 87       	std	Y+12, r23	; 0x0c
    12ae:	8d 87       	std	Y+13, r24	; 0x0d
    12b0:	9e 87       	std	Y+14, r25	; 0x0e
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    12b2:	87 e0       	ldi	r24, 0x07	; 7
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	36 c0       	rjmp	.+108    	; 0x1324 <CLCD_voidSendHexaNum+0x8e>
	{
		Local_u8Remainder=Copy_s32Number%16;
    12b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ba:	8f 70       	andi	r24, 0x0F	; 15
    12bc:	8a 83       	std	Y+2, r24	; 0x02
		if(Local_u8Remainder<=9)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	8a 30       	cpi	r24, 0x0A	; 10
    12c2:	78 f4       	brcc	.+30     	; 0x12e2 <CLCD_voidSendHexaNum+0x4c>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder+'0';
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	33 27       	eor	r19, r19
    12ca:	27 fd       	sbrc	r18, 7
    12cc:	30 95       	com	r19
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	48 2f       	mov	r20, r24
    12d2:	40 5d       	subi	r20, 0xD0	; 208
    12d4:	ce 01       	movw	r24, r28
    12d6:	03 96       	adiw	r24, 0x03	; 3
    12d8:	fc 01       	movw	r30, r24
    12da:	e2 0f       	add	r30, r18
    12dc:	f3 1f       	adc	r31, r19
    12de:	40 83       	st	Z, r20
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <CLCD_voidSendHexaNum+0x68>
		}
		else
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	33 27       	eor	r19, r19
    12e8:	27 fd       	sbrc	r18, 7
    12ea:	30 95       	com	r19
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	48 2f       	mov	r20, r24
    12f0:	49 5c       	subi	r20, 0xC9	; 201
    12f2:	ce 01       	movw	r24, r28
    12f4:	03 96       	adiw	r24, 0x03	; 3
    12f6:	fc 01       	movw	r30, r24
    12f8:	e2 0f       	add	r30, r18
    12fa:	f3 1f       	adc	r31, r19
    12fc:	40 83       	st	Z, r20
		}
		Copy_s32Number/=16;
    12fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1300:	9c 85       	ldd	r25, Y+12	; 0x0c
    1302:	ad 85       	ldd	r26, Y+13	; 0x0d
    1304:	be 85       	ldd	r27, Y+14	; 0x0e
    1306:	68 94       	set
    1308:	13 f8       	bld	r1, 3
    130a:	b6 95       	lsr	r27
    130c:	a7 95       	ror	r26
    130e:	97 95       	ror	r25
    1310:	87 95       	ror	r24
    1312:	16 94       	lsr	r1
    1314:	d1 f7       	brne	.-12     	; 0x130a <CLCD_voidSendHexaNum+0x74>
    1316:	8b 87       	std	Y+11, r24	; 0x0b
    1318:	9c 87       	std	Y+12, r25	; 0x0c
    131a:	ad 87       	std	Y+13, r26	; 0x0d
    131c:	be 87       	std	Y+14, r27	; 0x0e
void CLCD_voidSendHexaNum(uint32 Copy_s32Number)
{
	char Local_chHexadecimal[8];
	uint8 Local_u8Remainder;
	sint8 Local_s8Counter;
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	81 50       	subi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	88 23       	and	r24, r24
    1328:	3c f6       	brge	.-114    	; 0x12b8 <CLCD_voidSendHexaNum+0x22>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    132a:	19 82       	std	Y+1, r1	; 0x01
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <CLCD_voidSendHexaNum+0xc0>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	33 27       	eor	r19, r19
    133c:	27 fd       	sbrc	r18, 7
    133e:	30 95       	com	r19
    1340:	ce 01       	movw	r24, r28
    1342:	03 96       	adiw	r24, 0x03	; 3
    1344:	fc 01       	movw	r30, r24
    1346:	e2 0f       	add	r30, r18
    1348:	f3 1f       	adc	r31, r19
    134a:	80 81       	ld	r24, Z
    134c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		{
			Local_chHexadecimal[Local_s8Counter]=Local_u8Remainder-10+'A';
		}
		Copy_s32Number/=16;
	}
	for(Local_s8Counter=0;Local_s8Counter<=7;Local_s8Counter++)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	4c f3       	brlt	.-46     	; 0x132e <CLCD_voidSendHexaNum+0x98>
	{
		CLCD_voidGoToXY(Local_s8Counter,0);
		CLCD_voidSendData(Local_chHexadecimal[Local_s8Counter]);
	}

}
    135c:	2e 96       	adiw	r28, 0x0e	; 14
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_prv.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	28 97       	sbiw	r28, 0x08	; 8
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	6b 83       	std	Y+3, r22	; 0x03
    1386:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1388:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	08 f0       	brcs	.+2      	; 0x1392 <DIO_u8SetPinDirection+0x24>
    1390:	f4 c0       	rjmp	.+488    	; 0x157a <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	88 23       	and	r24, r24
    1396:	09 f0       	breq	.+2      	; 0x139a <DIO_u8SetPinDirection+0x2c>
    1398:	77 c0       	rjmp	.+238    	; 0x1488 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	38 87       	std	Y+8, r19	; 0x08
    13a2:	2f 83       	std	Y+7, r18	; 0x07
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 85       	ldd	r25, Y+8	; 0x08
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	59 f1       	breq	.+86     	; 0x1404 <DIO_u8SetPinDirection+0x96>
    13ae:	2f 81       	ldd	r18, Y+7	; 0x07
    13b0:	38 85       	ldd	r19, Y+8	; 0x08
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <DIO_u8SetPinDirection+0x54>
    13b8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ba:	98 85       	ldd	r25, Y+8	; 0x08
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	69 f0       	breq	.+26     	; 0x13da <DIO_u8SetPinDirection+0x6c>
    13c0:	60 c0       	rjmp	.+192    	; 0x1482 <DIO_u8SetPinDirection+0x114>
    13c2:	2f 81       	ldd	r18, Y+7	; 0x07
    13c4:	38 85       	ldd	r19, Y+8	; 0x08
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	89 f1       	breq	.+98     	; 0x142e <DIO_u8SetPinDirection+0xc0>
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <DIO_u8SetPinDirection+0x6a>
    13d6:	40 c0       	rjmp	.+128    	; 0x1458 <DIO_u8SetPinDirection+0xea>
    13d8:	54 c0       	rjmp	.+168    	; 0x1482 <DIO_u8SetPinDirection+0x114>
			{
			case(DIO_u8PORTA):
					CLR_BIT(DDRA,Copy_u8Pin);
    13da:	aa e3       	ldi	r26, 0x3A	; 58
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ea e3       	ldi	r30, 0x3A	; 58
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_u8SetPinDirection+0x8a>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_u8SetPinDirection+0x86>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	bd c0       	rjmp	.+378    	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					CLR_BIT(DDRB,Copy_u8Pin);
    1404:	a7 e3       	ldi	r26, 0x37	; 55
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e7 e3       	ldi	r30, 0x37	; 55
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8SetPinDirection+0xb4>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_u8SetPinDirection+0xb0>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	a8 c0       	rjmp	.+336    	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					CLR_BIT(DDRC,Copy_u8Pin);
    142e:	a4 e3       	ldi	r26, 0x34	; 52
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e4 e3       	ldi	r30, 0x34	; 52
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_u8SetPinDirection+0xde>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_u8SetPinDirection+0xda>
    1450:	80 95       	com	r24
    1452:	84 23       	and	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	93 c0       	rjmp	.+294    	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					CLR_BIT(DDRD,Copy_u8Pin);
    1458:	a1 e3       	ldi	r26, 0x31	; 49
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e1 e3       	ldi	r30, 0x31	; 49
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_u8SetPinDirection+0x108>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_u8SetPinDirection+0x104>
    147a:	80 95       	com	r24
    147c:	84 23       	and	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	7e c0       	rjmp	.+252    	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	7b c0       	rjmp	.+246    	; 0x157e <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	09 f0       	breq	.+2      	; 0x1490 <DIO_u8SetPinDirection+0x122>
    148e:	72 c0       	rjmp	.+228    	; 0x1574 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3e 83       	std	Y+6, r19	; 0x06
    1498:	2d 83       	std	Y+5, r18	; 0x05
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	49 f1       	breq	.+82     	; 0x14f6 <DIO_u8SetPinDirection+0x188>
    14a4:	2d 81       	ldd	r18, Y+5	; 0x05
    14a6:	3e 81       	ldd	r19, Y+6	; 0x06
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <DIO_u8SetPinDirection+0x14a>
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	61 f0       	breq	.+24     	; 0x14ce <DIO_u8SetPinDirection+0x160>
    14b6:	5b c0       	rjmp	.+182    	; 0x156e <DIO_u8SetPinDirection+0x200>
    14b8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ba:	3e 81       	ldd	r19, Y+6	; 0x06
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	71 f1       	breq	.+92     	; 0x151e <DIO_u8SetPinDirection+0x1b0>
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	83 30       	cpi	r24, 0x03	; 3
    14c8:	91 05       	cpc	r25, r1
    14ca:	e9 f1       	breq	.+122    	; 0x1546 <DIO_u8SetPinDirection+0x1d8>
    14cc:	50 c0       	rjmp	.+160    	; 0x156e <DIO_u8SetPinDirection+0x200>
			{
			case(DIO_u8PORTA):
					SET_BIT(DDRA,Copy_u8Pin);
    14ce:	aa e3       	ldi	r26, 0x3A	; 58
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ea e3       	ldi	r30, 0x3A	; 58
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_u8SetPinDirection+0x17e>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_u8SetPinDirection+0x17a>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	44 c0       	rjmp	.+136    	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					SET_BIT(DDRB,Copy_u8Pin);
    14f6:	a7 e3       	ldi	r26, 0x37	; 55
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e7 e3       	ldi	r30, 0x37	; 55
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_u8SetPinDirection+0x1a6>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_u8SetPinDirection+0x1a2>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	30 c0       	rjmp	.+96     	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					SET_BIT(DDRC,Copy_u8Pin);
    151e:	a4 e3       	ldi	r26, 0x34	; 52
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e4 e3       	ldi	r30, 0x34	; 52
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_u8SetPinDirection+0x1ce>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_u8SetPinDirection+0x1ca>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	1c c0       	rjmp	.+56     	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					SET_BIT(DDRD,Copy_u8Pin);
    1546:	a1 e3       	ldi	r26, 0x31	; 49
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e1 e3       	ldi	r30, 0x31	; 49
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_u8SetPinDirection+0x1f6>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_u8SetPinDirection+0x1f2>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	08 c0       	rjmp	.+16     	; 0x157e <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	05 c0       	rjmp	.+10     	; 0x157e <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_u8SetPinDirection+0x210>


	}
	else
	{
		 Local_u8ErrorState= NOK;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	28 96       	adiw	r28, 0x08	; 8
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Value)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	28 97       	sbiw	r28, 0x08	; 8
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	6b 83       	std	Y+3, r22	; 0x03
    15aa:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    15ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	88 30       	cpi	r24, 0x08	; 8
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <DIO_u8SetPinValue+0x24>
    15b4:	f4 c0       	rjmp	.+488    	; 0x179e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	09 f0       	breq	.+2      	; 0x15be <DIO_u8SetPinValue+0x2c>
    15bc:	72 c0       	rjmp	.+228    	; 0x16a2 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	38 87       	std	Y+8, r19	; 0x08
    15c6:	2f 83       	std	Y+7, r18	; 0x07
    15c8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ca:	98 85       	ldd	r25, Y+8	; 0x08
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	49 f1       	breq	.+82     	; 0x1624 <DIO_u8SetPinValue+0x92>
    15d2:	2f 81       	ldd	r18, Y+7	; 0x07
    15d4:	38 85       	ldd	r19, Y+8	; 0x08
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	2c f4       	brge	.+10     	; 0x15e6 <DIO_u8SetPinValue+0x54>
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	61 f0       	breq	.+24     	; 0x15fc <DIO_u8SetPinValue+0x6a>
    15e4:	5b c0       	rjmp	.+182    	; 0x169c <DIO_u8SetPinValue+0x10a>
    15e6:	2f 81       	ldd	r18, Y+7	; 0x07
    15e8:	38 85       	ldd	r19, Y+8	; 0x08
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	71 f1       	breq	.+92     	; 0x164c <DIO_u8SetPinValue+0xba>
    15f0:	8f 81       	ldd	r24, Y+7	; 0x07
    15f2:	98 85       	ldd	r25, Y+8	; 0x08
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	e9 f1       	breq	.+122    	; 0x1674 <DIO_u8SetPinValue+0xe2>
    15fa:	50 c0       	rjmp	.+160    	; 0x169c <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    15fc:	ab e3       	ldi	r26, 0x3B	; 59
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e3       	ldi	r30, 0x3B	; 59
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_u8SetPinValue+0x88>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_u8SetPinValue+0x84>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	bf c0       	rjmp	.+382    	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    1624:	a8 e3       	ldi	r26, 0x38	; 56
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e3       	ldi	r30, 0x38	; 56
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_u8SetPinValue+0xb0>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_u8SetPinValue+0xac>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	ab c0       	rjmp	.+342    	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    164c:	a5 e3       	ldi	r26, 0x35	; 53
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e5 e3       	ldi	r30, 0x35	; 53
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_u8SetPinValue+0xd8>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_u8SetPinValue+0xd4>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	97 c0       	rjmp	.+302    	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				SET_BIT(PORTD,Copy_u8Pin);
    1674:	a2 e3       	ldi	r26, 0x32	; 50
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e2 e3       	ldi	r30, 0x32	; 50
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_u8SetPinValue+0x100>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_u8SetPinValue+0xfc>
    1696:	84 2b       	or	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	83 c0       	rjmp	.+262    	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	80 c0       	rjmp	.+256    	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	88 23       	and	r24, r24
    16a6:	09 f0       	breq	.+2      	; 0x16aa <DIO_u8SetPinValue+0x118>
    16a8:	77 c0       	rjmp	.+238    	; 0x1798 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3e 83       	std	Y+6, r19	; 0x06
    16b2:	2d 83       	std	Y+5, r18	; 0x05
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	59 f1       	breq	.+86     	; 0x1714 <DIO_u8SetPinValue+0x182>
    16be:	2d 81       	ldd	r18, Y+5	; 0x05
    16c0:	3e 81       	ldd	r19, Y+6	; 0x06
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <DIO_u8SetPinValue+0x140>
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f0       	breq	.+26     	; 0x16ea <DIO_u8SetPinValue+0x158>
    16d0:	60 c0       	rjmp	.+192    	; 0x1792 <DIO_u8SetPinValue+0x200>
    16d2:	2d 81       	ldd	r18, Y+5	; 0x05
    16d4:	3e 81       	ldd	r19, Y+6	; 0x06
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	89 f1       	breq	.+98     	; 0x173e <DIO_u8SetPinValue+0x1ac>
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	83 30       	cpi	r24, 0x03	; 3
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <DIO_u8SetPinValue+0x156>
    16e6:	40 c0       	rjmp	.+128    	; 0x1768 <DIO_u8SetPinValue+0x1d6>
    16e8:	54 c0       	rjmp	.+168    	; 0x1792 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:
				CLR_BIT(PORTA,Copy_u8Pin);
    16ea:	ab e3       	ldi	r26, 0x3B	; 59
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e3       	ldi	r30, 0x3B	; 59
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_u8SetPinValue+0x176>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_u8SetPinValue+0x172>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	47 c0       	rjmp	.+142    	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				CLR_BIT(PORTB,Copy_u8Pin);
    1714:	a8 e3       	ldi	r26, 0x38	; 56
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e8 e3       	ldi	r30, 0x38	; 56
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_u8SetPinValue+0x1a0>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_u8SetPinValue+0x19c>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	32 c0       	rjmp	.+100    	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				CLR_BIT(PORTC,Copy_u8Pin);
    173e:	a5 e3       	ldi	r26, 0x35	; 53
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 e3       	ldi	r30, 0x35	; 53
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_u8SetPinValue+0x1ca>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_u8SetPinValue+0x1c6>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	1d c0       	rjmp	.+58     	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				CLR_BIT(PORTD,Copy_u8Pin);
    1768:	a2 e3       	ldi	r26, 0x32	; 50
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e2 e3       	ldi	r30, 0x32	; 50
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_u8SetPinValue+0x1f4>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <DIO_u8SetPinValue+0x1f0>
    178a:	80 95       	com	r24
    178c:	84 23       	and	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	08 c0       	rjmp	.+16     	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState= NOK;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a4:	28 96       	adiw	r28, 0x08	; 8
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	27 97       	sbiw	r28, 0x07	; 7
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	6b 83       	std	Y+3, r22	; 0x03
    17ce:	5d 83       	std	Y+5, r21	; 0x05
    17d0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    17d2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	09 f4       	brne	.+2      	; 0x17de <DIO_u8GetPinValue+0x28>
    17dc:	7b c0       	rjmp	.+246    	; 0x18d4 <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_u8Pin<=DIO_u8PIN7)
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <DIO_u8GetPinValue+0x30>
    17e4:	74 c0       	rjmp	.+232    	; 0x18ce <DIO_u8GetPinValue+0x118>
		{
			switch (Copy_u8Port)
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3f 83       	std	Y+7, r19	; 0x07
    17ee:	2e 83       	std	Y+6, r18	; 0x06
    17f0:	4e 81       	ldd	r20, Y+6	; 0x06
    17f2:	5f 81       	ldd	r21, Y+7	; 0x07
    17f4:	41 30       	cpi	r20, 0x01	; 1
    17f6:	51 05       	cpc	r21, r1
    17f8:	59 f1       	breq	.+86     	; 0x1850 <DIO_u8GetPinValue+0x9a>
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	9f 81       	ldd	r25, Y+7	; 0x07
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	91 05       	cpc	r25, r1
    1802:	34 f4       	brge	.+12     	; 0x1810 <DIO_u8GetPinValue+0x5a>
    1804:	2e 81       	ldd	r18, Y+6	; 0x06
    1806:	3f 81       	ldd	r19, Y+7	; 0x07
    1808:	21 15       	cp	r18, r1
    180a:	31 05       	cpc	r19, r1
    180c:	69 f0       	breq	.+26     	; 0x1828 <DIO_u8GetPinValue+0x72>
    180e:	5c c0       	rjmp	.+184    	; 0x18c8 <DIO_u8GetPinValue+0x112>
    1810:	4e 81       	ldd	r20, Y+6	; 0x06
    1812:	5f 81       	ldd	r21, Y+7	; 0x07
    1814:	42 30       	cpi	r20, 0x02	; 2
    1816:	51 05       	cpc	r21, r1
    1818:	79 f1       	breq	.+94     	; 0x1878 <DIO_u8GetPinValue+0xc2>
    181a:	8e 81       	ldd	r24, Y+6	; 0x06
    181c:	9f 81       	ldd	r25, Y+7	; 0x07
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <DIO_u8GetPinValue+0x70>
    1824:	3d c0       	rjmp	.+122    	; 0x18a0 <DIO_u8GetPinValue+0xea>
    1826:	50 c0       	rjmp	.+160    	; 0x18c8 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:
				*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);
    1828:	e9 e3       	ldi	r30, 0x39	; 57
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a9 01       	movw	r20, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_u8GetPinValue+0x8a>
    183c:	55 95       	asr	r21
    183e:	47 95       	ror	r20
    1840:	8a 95       	dec	r24
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_u8GetPinValue+0x86>
    1844:	ca 01       	movw	r24, r20
    1846:	81 70       	andi	r24, 0x01	; 1
    1848:	ec 81       	ldd	r30, Y+4	; 0x04
    184a:	fd 81       	ldd	r31, Y+5	; 0x05
    184c:	80 83       	st	Z, r24
    184e:	44 c0       	rjmp	.+136    	; 0x18d8 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTB:
				*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);
    1850:	e6 e3       	ldi	r30, 0x36	; 54
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a9 01       	movw	r20, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_u8GetPinValue+0xb2>
    1864:	55 95       	asr	r21
    1866:	47 95       	ror	r20
    1868:	8a 95       	dec	r24
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_u8GetPinValue+0xae>
    186c:	ca 01       	movw	r24, r20
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	ec 81       	ldd	r30, Y+4	; 0x04
    1872:	fd 81       	ldd	r31, Y+5	; 0x05
    1874:	80 83       	st	Z, r24
    1876:	30 c0       	rjmp	.+96     	; 0x18d8 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTC:
				*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);
    1878:	e3 e3       	ldi	r30, 0x33	; 51
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a9 01       	movw	r20, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_u8GetPinValue+0xda>
    188c:	55 95       	asr	r21
    188e:	47 95       	ror	r20
    1890:	8a 95       	dec	r24
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_u8GetPinValue+0xd6>
    1894:	ca 01       	movw	r24, r20
    1896:	81 70       	andi	r24, 0x01	; 1
    1898:	ec 81       	ldd	r30, Y+4	; 0x04
    189a:	fd 81       	ldd	r31, Y+5	; 0x05
    189c:	80 83       	st	Z, r24
    189e:	1c c0       	rjmp	.+56     	; 0x18d8 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTD:
				*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);
    18a0:	e0 e3       	ldi	r30, 0x30	; 48
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a9 01       	movw	r20, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_u8GetPinValue+0x102>
    18b4:	55 95       	asr	r21
    18b6:	47 95       	ror	r20
    18b8:	8a 95       	dec	r24
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_u8GetPinValue+0xfe>
    18bc:	ca 01       	movw	r24, r20
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	ec 81       	ldd	r30, Y+4	; 0x04
    18c2:	fd 81       	ldd	r31, Y+5	; 0x05
    18c4:	80 83       	st	Z, r24
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <DIO_u8GetPinValue+0x122>
				break;
			default:
				Local_u8ErrorState= NOK;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18da:	27 96       	adiw	r28, 0x07	; 7
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port,uint8 Copy_u8Direction)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <DIO_u8SetPortDirection+0x6>
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <DIO_u8SetPortDirection+0x8>
    18f4:	0f 92       	push	r0
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	8a 83       	std	Y+2, r24	; 0x02
    18fc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=0;
    18fe:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	3d 83       	std	Y+5, r19	; 0x05
    1908:	2c 83       	std	Y+4, r18	; 0x04
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	d1 f0       	breq	.+52     	; 0x1948 <DIO_u8SetPortDirection+0x5c>
    1914:	2c 81       	ldd	r18, Y+4	; 0x04
    1916:	3d 81       	ldd	r19, Y+5	; 0x05
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	2c f4       	brge	.+10     	; 0x1928 <DIO_u8SetPortDirection+0x3c>
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	9d 81       	ldd	r25, Y+5	; 0x05
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	61 f0       	breq	.+24     	; 0x193e <DIO_u8SetPortDirection+0x52>
    1926:	1f c0       	rjmp	.+62     	; 0x1966 <DIO_u8SetPortDirection+0x7a>
    1928:	2c 81       	ldd	r18, Y+4	; 0x04
    192a:	3d 81       	ldd	r19, Y+5	; 0x05
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	81 f0       	breq	.+32     	; 0x1952 <DIO_u8SetPortDirection+0x66>
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	91 05       	cpc	r25, r1
    193a:	81 f0       	breq	.+32     	; 0x195c <DIO_u8SetPortDirection+0x70>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <DIO_u8SetPortDirection+0x7a>
		{
		case(DIO_u8PORTA):
				DDRA=Copy_u8Direction;
    193e:	ea e3       	ldi	r30, 0x3A	; 58
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	80 83       	st	Z, r24
    1946:	11 c0       	rjmp	.+34     	; 0x196a <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTB):
				DDRB=Copy_u8Direction;
    1948:	e7 e3       	ldi	r30, 0x37	; 55
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	80 83       	st	Z, r24
    1950:	0c c0       	rjmp	.+24     	; 0x196a <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTC):
				DDRC=Copy_u8Direction;
    1952:	e4 e3       	ldi	r30, 0x34	; 52
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	80 83       	st	Z, r24
    195a:	07 c0       	rjmp	.+14     	; 0x196a <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTD):
				DDRD=Copy_u8Direction;
    195c:	e1 e3       	ldi	r30, 0x31	; 49
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	80 83       	st	Z, r24
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_u8SetPortDirection+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	return Local_u8ErrorState;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_u8SetPortValue+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <DIO_u8SetPortValue+0x8>
    1984:	0f 92       	push	r0
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=0;
    198e:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3d 83       	std	Y+5, r19	; 0x05
    1998:	2c 83       	std	Y+4, r18	; 0x04
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	91 05       	cpc	r25, r1
    19a2:	d1 f0       	breq	.+52     	; 0x19d8 <DIO_u8SetPortValue+0x5c>
    19a4:	2c 81       	ldd	r18, Y+4	; 0x04
    19a6:	3d 81       	ldd	r19, Y+5	; 0x05
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <DIO_u8SetPortValue+0x3c>
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	61 f0       	breq	.+24     	; 0x19ce <DIO_u8SetPortValue+0x52>
    19b6:	1f c0       	rjmp	.+62     	; 0x19f6 <DIO_u8SetPortValue+0x7a>
    19b8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ba:	3d 81       	ldd	r19, Y+5	; 0x05
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	31 05       	cpc	r19, r1
    19c0:	81 f0       	breq	.+32     	; 0x19e2 <DIO_u8SetPortValue+0x66>
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	91 05       	cpc	r25, r1
    19ca:	81 f0       	breq	.+32     	; 0x19ec <DIO_u8SetPortValue+0x70>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <DIO_u8SetPortValue+0x7a>
		{
		case(DIO_u8PORTA):
				PORTA=Copy_u8Value;
    19ce:	eb e3       	ldi	r30, 0x3B	; 59
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	80 83       	st	Z, r24
    19d6:	11 c0       	rjmp	.+34     	; 0x19fa <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTB):
				PORTB=Copy_u8Value;
    19d8:	e8 e3       	ldi	r30, 0x38	; 56
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	80 83       	st	Z, r24
    19e0:	0c c0       	rjmp	.+24     	; 0x19fa <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTC):
				PORTC=Copy_u8Value;
    19e2:	e5 e3       	ldi	r30, 0x35	; 53
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	80 83       	st	Z, r24
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTD):
				PORTD=Copy_u8Value;
    19ec:	e2 e3       	ldi	r30, 0x32	; 50
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	80 83       	st	Z, r24
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_u8SetPortValue+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <DIO_u8TogglePinValue+0x6>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <DIO_u8TogglePinValue+0x8>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <DIO_u8TogglePinValue+0xa>
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState= OK;
    1a1e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8BitState;
		if(Copy_u8Pin<=DIO_u8PIN7)
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	88 30       	cpi	r24, 0x08	; 8
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <DIO_u8TogglePinValue+0x1c>
    1a26:	1a c1       	rjmp	.+564    	; 0x1c5c <DIO_u8TogglePinValue+0x250>
		{
			switch (Copy_u8Port)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	3e 83       	std	Y+6, r19	; 0x06
    1a30:	2d 83       	std	Y+5, r18	; 0x05
    1a32:	4d 81       	ldd	r20, Y+5	; 0x05
    1a34:	5e 81       	ldd	r21, Y+6	; 0x06
    1a36:	41 30       	cpi	r20, 0x01	; 1
    1a38:	51 05       	cpc	r21, r1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <DIO_u8TogglePinValue+0x32>
    1a3c:	55 c0       	rjmp	.+170    	; 0x1ae8 <DIO_u8TogglePinValue+0xdc>
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	91 05       	cpc	r25, r1
    1a46:	34 f4       	brge	.+12     	; 0x1a54 <DIO_u8TogglePinValue+0x48>
    1a48:	2d 81       	ldd	r18, Y+5	; 0x05
    1a4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a4c:	21 15       	cp	r18, r1
    1a4e:	31 05       	cpc	r19, r1
    1a50:	71 f0       	breq	.+28     	; 0x1a6e <DIO_u8TogglePinValue+0x62>
    1a52:	01 c1       	rjmp	.+514    	; 0x1c56 <DIO_u8TogglePinValue+0x24a>
    1a54:	4d 81       	ldd	r20, Y+5	; 0x05
    1a56:	5e 81       	ldd	r21, Y+6	; 0x06
    1a58:	42 30       	cpi	r20, 0x02	; 2
    1a5a:	51 05       	cpc	r21, r1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <DIO_u8TogglePinValue+0x54>
    1a5e:	81 c0       	rjmp	.+258    	; 0x1b62 <DIO_u8TogglePinValue+0x156>
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	91 05       	cpc	r25, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <DIO_u8TogglePinValue+0x60>
    1a6a:	b8 c0       	rjmp	.+368    	; 0x1bdc <DIO_u8TogglePinValue+0x1d0>
    1a6c:	f4 c0       	rjmp	.+488    	; 0x1c56 <DIO_u8TogglePinValue+0x24a>
			{
			case DIO_u8PORTA:
				Local_u8BitState=GET_BIT(PORTA,Copy_u8Pin);
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a9 01       	movw	r20, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_u8TogglePinValue+0x7a>
    1a82:	55 95       	asr	r21
    1a84:	47 95       	ror	r20
    1a86:	8a 95       	dec	r24
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_u8TogglePinValue+0x76>
    1a8a:	ca 01       	movw	r24, r20
    1a8c:	81 70       	andi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	a9 f4       	brne	.+42     	; 0x1ac0 <DIO_u8TogglePinValue+0xb4>
				{
					CLR_BIT(PORTA,Copy_u8Pin);
    1a96:	ab e3       	ldi	r26, 0x3B	; 59
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	eb e3       	ldi	r30, 0x3B	; 59
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_u8TogglePinValue+0xa8>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_u8TogglePinValue+0xa4>
    1ab8:	80 95       	com	r24
    1aba:	84 23       	and	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	d0 c0       	rjmp	.+416    	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTA,Copy_u8Pin);
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_u8TogglePinValue+0xd2>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_u8TogglePinValue+0xce>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	bc c0       	rjmp	.+376    	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTB:
				Local_u8BitState=GET_BIT(PORTB,Copy_u8Pin);
    1ae8:	e8 e3       	ldi	r30, 0x38	; 56
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <DIO_u8TogglePinValue+0xf4>
    1afc:	55 95       	asr	r21
    1afe:	47 95       	ror	r20
    1b00:	8a 95       	dec	r24
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <DIO_u8TogglePinValue+0xf0>
    1b04:	ca 01       	movw	r24, r20
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	a9 f4       	brne	.+42     	; 0x1b3a <DIO_u8TogglePinValue+0x12e>
				{
					CLR_BIT(PORTB,Copy_u8Pin);
    1b10:	a8 e3       	ldi	r26, 0x38	; 56
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e8 e3       	ldi	r30, 0x38	; 56
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_u8TogglePinValue+0x122>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <DIO_u8TogglePinValue+0x11e>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	93 c0       	rjmp	.+294    	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTB,Copy_u8Pin);
    1b3a:	a8 e3       	ldi	r26, 0x38	; 56
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e8 e3       	ldi	r30, 0x38	; 56
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_u8TogglePinValue+0x14c>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_u8TogglePinValue+0x148>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	7f c0       	rjmp	.+254    	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTC:
				Local_u8BitState=GET_BIT(PORTC,Copy_u8Pin);
    1b62:	e5 e3       	ldi	r30, 0x35	; 53
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a9 01       	movw	r20, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <DIO_u8TogglePinValue+0x16e>
    1b76:	55 95       	asr	r21
    1b78:	47 95       	ror	r20
    1b7a:	8a 95       	dec	r24
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <DIO_u8TogglePinValue+0x16a>
    1b7e:	ca 01       	movw	r24, r20
    1b80:	81 70       	andi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	a9 f4       	brne	.+42     	; 0x1bb4 <DIO_u8TogglePinValue+0x1a8>
				{
					CLR_BIT(PORTC,Copy_u8Pin);
    1b8a:	a5 e3       	ldi	r26, 0x35	; 53
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e3       	ldi	r30, 0x35	; 53
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_u8TogglePinValue+0x19c>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_u8TogglePinValue+0x198>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	56 c0       	rjmp	.+172    	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTC,Copy_u8Pin);
    1bb4:	a5 e3       	ldi	r26, 0x35	; 53
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e5 e3       	ldi	r30, 0x35	; 53
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_u8TogglePinValue+0x1c6>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_u8TogglePinValue+0x1c2>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	42 c0       	rjmp	.+132    	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTD:
				Local_u8BitState=GET_BIT(PORTD,Copy_u8Pin);
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_u8TogglePinValue+0x1e8>
    1bf0:	55 95       	asr	r21
    1bf2:	47 95       	ror	r20
    1bf4:	8a 95       	dec	r24
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_u8TogglePinValue+0x1e4>
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	a9 f4       	brne	.+42     	; 0x1c2e <DIO_u8TogglePinValue+0x222>
				{
					CLR_BIT(PORTD,Copy_u8Pin);
    1c04:	a2 e3       	ldi	r26, 0x32	; 50
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e2 e3       	ldi	r30, 0x32	; 50
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_u8TogglePinValue+0x216>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_u8TogglePinValue+0x212>
    1c26:	80 95       	com	r24
    1c28:	84 23       	and	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	19 c0       	rjmp	.+50     	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTD,Copy_u8Pin);
    1c2e:	a2 e3       	ldi	r26, 0x32	; 50
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e2 e3       	ldi	r30, 0x32	; 50
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_u8TogglePinValue+0x240>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_u8TogglePinValue+0x23c>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				}
				break;
			default:
				Local_u8ErrorState= NOK;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_u8TogglePinValue+0x254>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
		}

	return Local_u8ErrorState;
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1c62:	26 96       	adiw	r28, 0x06	; 6
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <EXTI_voidInit>:
#include "EXTI_prv.h"

static void (*EXTI_pfIntFuncPtr[3]) (void)={NULL};

void EXTI_voidInit(void)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
#if INT0_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    1c7c:	a5 e5       	ldi	r26, 0x55	; 85
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e5 e5       	ldi	r30, 0x55	; 85
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	8e 7f       	andi	r24, 0xFE	; 254
    1c88:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1c8a:	a5 e5       	ldi	r26, 0x55	; 85
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e5 e5       	ldi	r30, 0x55	; 85
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	82 60       	ori	r24, 0x02	; 2
    1c96:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
#else
#error Wrong INT0_SENSE_CTRL configuration option
#endif
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
    1c98:	ab e5       	ldi	r26, 0x5B	; 91
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	eb e5       	ldi	r30, 0x5B	; 91
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	80 64       	ori	r24, 0x40	; 64
    1ca4:	8c 93       	st	X, r24
#else
#error Wrong INT0_INITIAL_STATE configuration option
#endif

#if INT1_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1ca6:	a5 e5       	ldi	r26, 0x55	; 85
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e5       	ldi	r30, 0x55	; 85
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8b 7f       	andi	r24, 0xFB	; 251
    1cb2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    1cb4:	a5 e5       	ldi	r26, 0x55	; 85
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e5 e5       	ldi	r30, 0x55	; 85
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 60       	ori	r24, 0x08	; 8
    1cc0:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
#else
#error Wrong INT1_SENSE_CTRL configuration option
#endif
#if INT1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
    1cc2:	ab e5       	ldi	r26, 0x5B	; 91
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	eb e5       	ldi	r30, 0x5B	; 91
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 68       	ori	r24, 0x80	; 128
    1cce:	8c 93       	st	X, r24
#else
#error Wrong INT1_INITIAL_STATE configuration option
#endif

#if INT2_SENSE_CTRL==EXTI_u8FALLING_EDGE
	CLR_BIT(MCUSCR,MCUSCR_ISC2);
    1cd0:	a4 e5       	ldi	r26, 0x54	; 84
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e4 e5       	ldi	r30, 0x54	; 84
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8f 7b       	andi	r24, 0xBF	; 191
    1cdc:	8c 93       	st	X, r24
	SET_BIT(MCUSCR,MCUSCR_ISC2);
#else
#error Wrong INT2_SENSE_CTRL configuration option
#endif
#if INT2_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
    1cde:	ab e5       	ldi	r26, 0x5B	; 91
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	eb e5       	ldi	r30, 0x5B	; 91
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 62       	ori	r24, 0x20	; 32
    1cea:	8c 93       	st	X, r24
#else
#error Wrong INT2_INITIAL_STATE configuration option
#endif


}
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <EXTI_u8SetSenseControl>:

uint8 EXTI_u8SetSenseControl(uint8 Copy_u8Int,uint8 Copy_u8SenseControl)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	2b 97       	sbiw	r28, 0x0b	; 11
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3b 87       	std	Y+11, r19	; 0x0b
    1d14:	2a 87       	std	Y+10, r18	; 0x0a
    1d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <EXTI_u8SetSenseControl+0x30>
    1d20:	6a c0       	rjmp	.+212    	; 0x1df6 <EXTI_u8SetSenseControl+0x104>
    1d22:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d24:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <EXTI_u8SetSenseControl+0x3c>
    1d2c:	c3 c0       	rjmp	.+390    	; 0x1eb4 <EXTI_u8SetSenseControl+0x1c2>
    1d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <EXTI_u8SetSenseControl+0x46>
    1d36:	e1 c0       	rjmp	.+450    	; 0x1efa <EXTI_u8SetSenseControl+0x208>
	{
	case EXTI_u8INT0:
		switch(Copy_u8SenseControl)
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	39 87       	std	Y+9, r19	; 0x09
    1d40:	28 87       	std	Y+8, r18	; 0x08
    1d42:	88 85       	ldd	r24, Y+8	; 0x08
    1d44:	99 85       	ldd	r25, Y+9	; 0x09
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	91 05       	cpc	r25, r1
    1d4a:	29 f1       	breq	.+74     	; 0x1d96 <EXTI_u8SetSenseControl+0xa4>
    1d4c:	28 85       	ldd	r18, Y+8	; 0x08
    1d4e:	39 85       	ldd	r19, Y+9	; 0x09
    1d50:	23 30       	cpi	r18, 0x03	; 3
    1d52:	31 05       	cpc	r19, r1
    1d54:	34 f4       	brge	.+12     	; 0x1d62 <EXTI_u8SetSenseControl+0x70>
    1d56:	88 85       	ldd	r24, Y+8	; 0x08
    1d58:	99 85       	ldd	r25, Y+9	; 0x09
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <EXTI_u8SetSenseControl+0x86>
    1d60:	47 c0       	rjmp	.+142    	; 0x1df0 <EXTI_u8SetSenseControl+0xfe>
    1d62:	28 85       	ldd	r18, Y+8	; 0x08
    1d64:	39 85       	ldd	r19, Y+9	; 0x09
    1d66:	23 30       	cpi	r18, 0x03	; 3
    1d68:	31 05       	cpc	r19, r1
    1d6a:	21 f1       	breq	.+72     	; 0x1db4 <EXTI_u8SetSenseControl+0xc2>
    1d6c:	88 85       	ldd	r24, Y+8	; 0x08
    1d6e:	99 85       	ldd	r25, Y+9	; 0x09
    1d70:	84 30       	cpi	r24, 0x04	; 4
    1d72:	91 05       	cpc	r25, r1
    1d74:	71 f1       	breq	.+92     	; 0x1dd2 <EXTI_u8SetSenseControl+0xe0>
    1d76:	3c c0       	rjmp	.+120    	; 0x1df0 <EXTI_u8SetSenseControl+0xfe>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1d78:	a5 e5       	ldi	r26, 0x55	; 85
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e5 e5       	ldi	r30, 0x55	; 85
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	81 60       	ori	r24, 0x01	; 1
    1d84:	8c 93       	st	X, r24
    1d86:	a5 e5       	ldi	r26, 0x55	; 85
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e5 e5       	ldi	r30, 0x55	; 85
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	82 60       	ori	r24, 0x02	; 2
    1d92:	8c 93       	st	X, r24
    1d94:	b4 c0       	rjmp	.+360    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    1d96:	a5 e5       	ldi	r26, 0x55	; 85
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e5 e5       	ldi	r30, 0x55	; 85
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8e 7f       	andi	r24, 0xFE	; 254
    1da2:	8c 93       	st	X, r24
    1da4:	a5 e5       	ldi	r26, 0x55	; 85
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e5 e5       	ldi	r30, 0x55	; 85
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	82 60       	ori	r24, 0x02	; 2
    1db0:	8c 93       	st	X, r24
    1db2:	a5 c0       	rjmp	.+330    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    1db4:	a5 e5       	ldi	r26, 0x55	; 85
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e5 e5       	ldi	r30, 0x55	; 85
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8e 7f       	andi	r24, 0xFE	; 254
    1dc0:	8c 93       	st	X, r24
    1dc2:	a5 e5       	ldi	r26, 0x55	; 85
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e5       	ldi	r30, 0x55	; 85
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8d 7f       	andi	r24, 0xFD	; 253
    1dce:	8c 93       	st	X, r24
    1dd0:	96 c0       	rjmp	.+300    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOGICAL_CHANGE:SET_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    1dd2:	a5 e5       	ldi	r26, 0x55	; 85
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e5 e5       	ldi	r30, 0x55	; 85
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	81 60       	ori	r24, 0x01	; 1
    1dde:	8c 93       	st	X, r24
    1de0:	a5 e5       	ldi	r26, 0x55	; 85
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e5 e5       	ldi	r30, 0x55	; 85
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8d 7f       	andi	r24, 0xFD	; 253
    1dec:	8c 93       	st	X, r24
    1dee:	87 c0       	rjmp	.+270    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	84 c0       	rjmp	.+264    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	case EXTI_u8INT1:
		switch(Copy_u8SenseControl)
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	3f 83       	std	Y+7, r19	; 0x07
    1dfe:	2e 83       	std	Y+6, r18	; 0x06
    1e00:	8e 81       	ldd	r24, Y+6	; 0x06
    1e02:	9f 81       	ldd	r25, Y+7	; 0x07
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	91 05       	cpc	r25, r1
    1e08:	29 f1       	breq	.+74     	; 0x1e54 <EXTI_u8SetSenseControl+0x162>
    1e0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e0e:	23 30       	cpi	r18, 0x03	; 3
    1e10:	31 05       	cpc	r19, r1
    1e12:	34 f4       	brge	.+12     	; 0x1e20 <EXTI_u8SetSenseControl+0x12e>
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	61 f0       	breq	.+24     	; 0x1e36 <EXTI_u8SetSenseControl+0x144>
    1e1e:	47 c0       	rjmp	.+142    	; 0x1eae <EXTI_u8SetSenseControl+0x1bc>
    1e20:	2e 81       	ldd	r18, Y+6	; 0x06
    1e22:	3f 81       	ldd	r19, Y+7	; 0x07
    1e24:	23 30       	cpi	r18, 0x03	; 3
    1e26:	31 05       	cpc	r19, r1
    1e28:	21 f1       	breq	.+72     	; 0x1e72 <EXTI_u8SetSenseControl+0x180>
    1e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	91 05       	cpc	r25, r1
    1e32:	71 f1       	breq	.+92     	; 0x1e90 <EXTI_u8SetSenseControl+0x19e>
    1e34:	3c c0       	rjmp	.+120    	; 0x1eae <EXTI_u8SetSenseControl+0x1bc>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1e36:	a5 e5       	ldi	r26, 0x55	; 85
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e5       	ldi	r30, 0x55	; 85
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	84 60       	ori	r24, 0x04	; 4
    1e42:	8c 93       	st	X, r24
    1e44:	a5 e5       	ldi	r26, 0x55	; 85
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e5       	ldi	r30, 0x55	; 85
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	88 60       	ori	r24, 0x08	; 8
    1e50:	8c 93       	st	X, r24
    1e52:	55 c0       	rjmp	.+170    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    1e54:	a5 e5       	ldi	r26, 0x55	; 85
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e5       	ldi	r30, 0x55	; 85
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8b 7f       	andi	r24, 0xFB	; 251
    1e60:	8c 93       	st	X, r24
    1e62:	a5 e5       	ldi	r26, 0x55	; 85
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e5       	ldi	r30, 0x55	; 85
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 60       	ori	r24, 0x08	; 8
    1e6e:	8c 93       	st	X, r24
    1e70:	46 c0       	rjmp	.+140    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    1e72:	a5 e5       	ldi	r26, 0x55	; 85
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e5 e5       	ldi	r30, 0x55	; 85
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8b 7f       	andi	r24, 0xFB	; 251
    1e7e:	8c 93       	st	X, r24
    1e80:	a5 e5       	ldi	r26, 0x55	; 85
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e5 e5       	ldi	r30, 0x55	; 85
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	87 7f       	andi	r24, 0xF7	; 247
    1e8c:	8c 93       	st	X, r24
    1e8e:	37 c0       	rjmp	.+110    	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8LOGICAL_CHANGE:SET_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    1e90:	a5 e5       	ldi	r26, 0x55	; 85
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e5       	ldi	r30, 0x55	; 85
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	84 60       	ori	r24, 0x04	; 4
    1e9c:	8c 93       	st	X, r24
    1e9e:	a5 e5       	ldi	r26, 0x55	; 85
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e5 e5       	ldi	r30, 0x55	; 85
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	87 7f       	andi	r24, 0xF7	; 247
    1eaa:	8c 93       	st	X, r24
    1eac:	28 c0       	rjmp	.+80     	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	25 c0       	rjmp	.+74     	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	case EXTI_u8INT2:
		switch(Copy_u8SenseControl)
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	3d 83       	std	Y+5, r19	; 0x05
    1ebc:	2c 83       	std	Y+4, r18	; 0x04
    1ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	31 f0       	breq	.+12     	; 0x1ed4 <EXTI_u8SetSenseControl+0x1e2>
    1ec8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	49 f0       	breq	.+18     	; 0x1ee4 <EXTI_u8SetSenseControl+0x1f2>
    1ed2:	10 c0       	rjmp	.+32     	; 0x1ef4 <EXTI_u8SetSenseControl+0x202>
		{
		case EXTI_u8RISING_EDGE:SET_BIT(MCUSCR,MCUSCR_ISC2);break;
    1ed4:	a4 e5       	ldi	r26, 0x54	; 84
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e4 e5       	ldi	r30, 0x54	; 84
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	80 64       	ori	r24, 0x40	; 64
    1ee0:	8c 93       	st	X, r24
    1ee2:	0d c0       	rjmp	.+26     	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		case EXTI_u8FALLING_EDGE:CLR_BIT(MCUSCR,MCUSCR_ISC2);break;
    1ee4:	a4 e5       	ldi	r26, 0x54	; 84
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e4 e5       	ldi	r30, 0x54	; 84
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8f 7b       	andi	r24, 0xBF	; 191
    1ef0:	8c 93       	st	X, r24
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		default:Local_u8ErrorState=NOK;break;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <EXTI_u8SetSenseControl+0x20c>
		}
		break;
	default  :
		Local_u8ErrorState=NOK;break;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f00:	2b 96       	adiw	r28, 0x0b	; 11
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable(uint8 Copy_u8Int)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <EXTI_u8IntEnable+0x6>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <EXTI_u8IntEnable+0x8>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    1f20:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3c 83       	std	Y+4, r19	; 0x04
    1f2a:	2b 83       	std	Y+3, r18	; 0x03
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	89 f0       	breq	.+34     	; 0x1f58 <EXTI_u8IntEnable+0x46>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	a1 f0       	breq	.+40     	; 0x1f68 <EXTI_u8IntEnable+0x56>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	c1 f4       	brne	.+48     	; 0x1f78 <EXTI_u8IntEnable+0x66>
	{
	case EXTI_u8INT0:SET_BIT(GICR,GICR_INT0);break;
    1f48:	ab e5       	ldi	r26, 0x5B	; 91
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	eb e5       	ldi	r30, 0x5B	; 91
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	8c 93       	st	X, r24
    1f56:	12 c0       	rjmp	.+36     	; 0x1f7c <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT1:SET_BIT(GICR,GICR_INT1);break;
    1f58:	ab e5       	ldi	r26, 0x5B	; 91
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e5       	ldi	r30, 0x5B	; 91
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	80 68       	ori	r24, 0x80	; 128
    1f64:	8c 93       	st	X, r24
    1f66:	0a c0       	rjmp	.+20     	; 0x1f7c <EXTI_u8IntEnable+0x6a>
	case EXTI_u8INT2:SET_BIT(GICR,GICR_INT2);break;
    1f68:	ab e5       	ldi	r26, 0x5B	; 91
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	eb e5       	ldi	r30, 0x5B	; 91
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 62       	ori	r24, 0x20	; 32
    1f74:	8c 93       	st	X, r24
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <EXTI_u8IntEnable+0x6a>
	default  : Local_u8ErrorState=NOK;break;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <EXTI_u8IntDisable>:

uint8 EXTI_u8IntDisable(uint8 Copy_u8Int)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <EXTI_u8IntDisable+0x6>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <EXTI_u8IntDisable+0x8>
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    1f9a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	3c 83       	std	Y+4, r19	; 0x04
    1fa4:	2b 83       	std	Y+3, r18	; 0x03
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 05       	cpc	r25, r1
    1fae:	89 f0       	breq	.+34     	; 0x1fd2 <EXTI_u8IntDisable+0x46>
    1fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	a1 f0       	breq	.+40     	; 0x1fe2 <EXTI_u8IntDisable+0x56>
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	c1 f4       	brne	.+48     	; 0x1ff2 <EXTI_u8IntDisable+0x66>
	{
	case EXTI_u8INT0:CLR_BIT(GICR,GICR_INT0);break;
    1fc2:	ab e5       	ldi	r26, 0x5B	; 91
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	eb e5       	ldi	r30, 0x5B	; 91
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 7b       	andi	r24, 0xBF	; 191
    1fce:	8c 93       	st	X, r24
    1fd0:	12 c0       	rjmp	.+36     	; 0x1ff6 <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT1:CLR_BIT(GICR,GICR_INT1);break;
    1fd2:	ab e5       	ldi	r26, 0x5B	; 91
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	eb e5       	ldi	r30, 0x5B	; 91
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8f 77       	andi	r24, 0x7F	; 127
    1fde:	8c 93       	st	X, r24
    1fe0:	0a c0       	rjmp	.+20     	; 0x1ff6 <EXTI_u8IntDisable+0x6a>
	case EXTI_u8INT2:CLR_BIT(GICR,GICR_INT2);break;
    1fe2:	ab e5       	ldi	r26, 0x5B	; 91
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	eb e5       	ldi	r30, 0x5B	; 91
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 7d       	andi	r24, 0xDF	; 223
    1fee:	8c 93       	st	X, r24
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <EXTI_u8IntDisable+0x6a>
	default  : Local_u8ErrorState=NOK;break;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <EXTI_u8SetCallBack>:
uint8 EXTI_u8SetCallBack(uint8 Copy_u8Int,void (*Copy_pfFuncPtr)(void))
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <EXTI_u8SetCallBack+0x6>
    200c:	00 d0       	rcall	.+0      	; 0x200e <EXTI_u8SetCallBack+0x8>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	7c 83       	std	Y+4, r23	; 0x04
    2016:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8StateError=OK;
    2018:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pfFuncPtr!=NULL)
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	99 f0       	breq	.+38     	; 0x2048 <EXTI_u8SetCallBack+0x42>
	{
		if(Copy_u8Int<=EXTI_u8INT2)
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	68 f4       	brcc	.+26     	; 0x2042 <EXTI_u8SetCallBack+0x3c>
		{
			EXTI_pfIntFuncPtr[Copy_u8Int]=Copy_pfFuncPtr;
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	88 2f       	mov	r24, r24
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	fc 01       	movw	r30, r24
    2034:	e6 56       	subi	r30, 0x66	; 102
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
    2040:	05 c0       	rjmp	.+10     	; 0x204c <EXTI_u8SetCallBack+0x46>
		}
		else Local_u8StateError=NOK;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	02 c0       	rjmp	.+4      	; 0x204c <EXTI_u8SetCallBack+0x46>
	}
	else Local_u8StateError=NULL_PTR_ERR;
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8StateError;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    205c:	1f 92       	push	r1
    205e:	0f 92       	push	r0
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	0f 92       	push	r0
    2064:	11 24       	eor	r1, r1
    2066:	2f 93       	push	r18
    2068:	3f 93       	push	r19
    206a:	4f 93       	push	r20
    206c:	5f 93       	push	r21
    206e:	6f 93       	push	r22
    2070:	7f 93       	push	r23
    2072:	8f 93       	push	r24
    2074:	9f 93       	push	r25
    2076:	af 93       	push	r26
    2078:	bf 93       	push	r27
    207a:	ef 93       	push	r30
    207c:	ff 93       	push	r31
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT0]!=NULL)
    2086:	80 91 9a 00 	lds	r24, 0x009A
    208a:	90 91 9b 00 	lds	r25, 0x009B
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	29 f0       	breq	.+10     	; 0x209c <__vector_1+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT0]();
    2092:	e0 91 9a 00 	lds	r30, 0x009A
    2096:	f0 91 9b 00 	lds	r31, 0x009B
    209a:	09 95       	icall
	}
}
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	ff 91       	pop	r31
    20a2:	ef 91       	pop	r30
    20a4:	bf 91       	pop	r27
    20a6:	af 91       	pop	r26
    20a8:	9f 91       	pop	r25
    20aa:	8f 91       	pop	r24
    20ac:	7f 91       	pop	r23
    20ae:	6f 91       	pop	r22
    20b0:	5f 91       	pop	r21
    20b2:	4f 91       	pop	r20
    20b4:	3f 91       	pop	r19
    20b6:	2f 91       	pop	r18
    20b8:	0f 90       	pop	r0
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	0f 90       	pop	r0
    20be:	1f 90       	pop	r1
    20c0:	18 95       	reti

000020c2 <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    20c2:	1f 92       	push	r1
    20c4:	0f 92       	push	r0
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	0f 92       	push	r0
    20ca:	11 24       	eor	r1, r1
    20cc:	2f 93       	push	r18
    20ce:	3f 93       	push	r19
    20d0:	4f 93       	push	r20
    20d2:	5f 93       	push	r21
    20d4:	6f 93       	push	r22
    20d6:	7f 93       	push	r23
    20d8:	8f 93       	push	r24
    20da:	9f 93       	push	r25
    20dc:	af 93       	push	r26
    20de:	bf 93       	push	r27
    20e0:	ef 93       	push	r30
    20e2:	ff 93       	push	r31
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT1]!=NULL)
    20ec:	80 91 9c 00 	lds	r24, 0x009C
    20f0:	90 91 9d 00 	lds	r25, 0x009D
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	29 f0       	breq	.+10     	; 0x2102 <__vector_2+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT1]();
    20f8:	e0 91 9c 00 	lds	r30, 0x009C
    20fc:	f0 91 9d 00 	lds	r31, 0x009D
    2100:	09 95       	icall
	}

}
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	ff 91       	pop	r31
    2108:	ef 91       	pop	r30
    210a:	bf 91       	pop	r27
    210c:	af 91       	pop	r26
    210e:	9f 91       	pop	r25
    2110:	8f 91       	pop	r24
    2112:	7f 91       	pop	r23
    2114:	6f 91       	pop	r22
    2116:	5f 91       	pop	r21
    2118:	4f 91       	pop	r20
    211a:	3f 91       	pop	r19
    211c:	2f 91       	pop	r18
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	0f 90       	pop	r0
    2124:	1f 90       	pop	r1
    2126:	18 95       	reti

00002128 <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    2128:	1f 92       	push	r1
    212a:	0f 92       	push	r0
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	0f 92       	push	r0
    2130:	11 24       	eor	r1, r1
    2132:	2f 93       	push	r18
    2134:	3f 93       	push	r19
    2136:	4f 93       	push	r20
    2138:	5f 93       	push	r21
    213a:	6f 93       	push	r22
    213c:	7f 93       	push	r23
    213e:	8f 93       	push	r24
    2140:	9f 93       	push	r25
    2142:	af 93       	push	r26
    2144:	bf 93       	push	r27
    2146:	ef 93       	push	r30
    2148:	ff 93       	push	r31
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIntFuncPtr[EXTI_u8INT2]!=NULL)
    2152:	80 91 9e 00 	lds	r24, 0x009E
    2156:	90 91 9f 00 	lds	r25, 0x009F
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	29 f0       	breq	.+10     	; 0x2168 <__vector_3+0x40>
	{
		EXTI_pfIntFuncPtr[EXTI_u8INT2]();
    215e:	e0 91 9e 00 	lds	r30, 0x009E
    2162:	f0 91 9f 00 	lds	r31, 0x009F
    2166:	09 95       	icall
	}

}
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	ff 91       	pop	r31
    216e:	ef 91       	pop	r30
    2170:	bf 91       	pop	r27
    2172:	af 91       	pop	r26
    2174:	9f 91       	pop	r25
    2176:	8f 91       	pop	r24
    2178:	7f 91       	pop	r23
    217a:	6f 91       	pop	r22
    217c:	5f 91       	pop	r21
    217e:	4f 91       	pop	r20
    2180:	3f 91       	pop	r19
    2182:	2f 91       	pop	r18
    2184:	0f 90       	pop	r0
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	0f 90       	pop	r0
    218a:	1f 90       	pop	r1
    218c:	18 95       	reti

0000218e <GIE_voidEnableGlobal>:
#include "STD_TYPES.h"
#include "GIE_reg.h"
#include "GIE_interface.h"

void GIE_voidEnableGlobal(void)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	__asm  __volatile("SEI");
    2196:	78 94       	sei
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG,SREG_I);
	__asm  __volatile("CLI");
    21a6:	f8 94       	cli
}
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_prv.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    21b6:	ea e3       	ldi	r30, 0x3A	; 58
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	87 e0       	ldi	r24, 0x07	; 7
    21bc:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    21be:	e7 e3       	ldi	r30, 0x37	; 55
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 ef       	ldi	r24, 0xF0	; 240
    21c4:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    21c6:	e4 e3       	ldi	r30, 0x34	; 52
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    21cc:	e1 e3       	ldi	r30, 0x31	; 49
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	10 82       	st	Z, r1

	PORTA=PORTA_INITIAL_VALUE;
    21d2:	eb e3       	ldi	r30, 0x3B	; 59
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    21d8:	e8 e3       	ldi	r30, 0x38	; 56
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    21de:	e5 e3       	ldi	r30, 0x35	; 53
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    21e4:	e2 e3       	ldi	r30, 0x32	; 50
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8c e0       	ldi	r24, 0x0C	; 12
    21ea:	80 83       	st	Z, r24


}
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <main>:
uint8 Global_u8Racket1=0;
uint8 Global_u8Racket2=0;
uint8 Global_u8Ball=0;
uint8 Local_u8WinnerIndicator=0;
void main(void)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	ab 97       	sbiw	r28, 0x2b	; 43
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8Counter1;
	PORT_voidInit();
    2206:	0e 94 d7 10 	call	0x21ae	; 0x21ae <PORT_voidInit>
	CLCD_voidInit();
    220a:	0e 94 a2 06 	call	0xd44	; 0xd44 <CLCD_voidInit>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a8 ec       	ldi	r26, 0xC8	; 200
    2214:	b2 e4       	ldi	r27, 0x42	; 66
    2216:	8f a3       	std	Y+39, r24	; 0x27
    2218:	98 a7       	std	Y+40, r25	; 0x28
    221a:	a9 a7       	std	Y+41, r26	; 0x29
    221c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221e:	6f a1       	ldd	r22, Y+39	; 0x27
    2220:	78 a5       	ldd	r23, Y+40	; 0x28
    2222:	89 a5       	ldd	r24, Y+41	; 0x29
    2224:	9a a5       	ldd	r25, Y+42	; 0x2a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a e7       	ldi	r20, 0x7A	; 122
    222c:	55 e4       	ldi	r21, 0x45	; 69
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8b a3       	std	Y+35, r24	; 0x23
    2238:	9c a3       	std	Y+36, r25	; 0x24
    223a:	ad a3       	std	Y+37, r26	; 0x25
    223c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	2c f4       	brge	.+10     	; 0x2260 <main+0x6e>
		__ticks = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	3f c0       	rjmp	.+126    	; 0x22de <main+0xec>
	else if (__tmp > 65535)
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	4c f5       	brge	.+82     	; 0x22ca <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	6f a1       	ldd	r22, Y+39	; 0x27
    227a:	78 a5       	ldd	r23, Y+40	; 0x28
    227c:	89 a5       	ldd	r24, Y+41	; 0x29
    227e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <main+0xce>
    22a2:	80 e9       	ldi	r24, 0x90	; 144
    22a4:	91 e0       	ldi	r25, 0x01	; 1
    22a6:	98 a3       	std	Y+32, r25	; 0x20
    22a8:	8f 8f       	std	Y+31, r24	; 0x1f
    22aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ac:	98 a1       	ldd	r25, Y+32	; 0x20
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <main+0xbc>
    22b2:	98 a3       	std	Y+32, r25	; 0x20
    22b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <main+0xb0>
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	89 a1       	ldd	r24, Y+33	; 0x21
    22e0:	9a a1       	ldd	r25, Y+34	; 0x22
    22e2:	9e 8f       	std	Y+30, r25	; 0x1e
    22e4:	8d 8f       	std	Y+29, r24	; 0x1d
    22e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <main+0xf8>
    22ee:	9e 8f       	std	Y+30, r25	; 0x1e
    22f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	GIE_voidEnableGlobal();
    22f2:	0e 94 c7 10 	call	0x218e	; 0x218e <GIE_voidEnableGlobal>
	EXTI_voidInit();
    22f6:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <EXTI_voidInit>
	EXTI_u8SetCallBack(EXTI_u8INT0,&ChangeRacket1Pos);
    22fa:	29 ee       	ldi	r18, 0xE9	; 233
    22fc:	32 e1       	ldi	r19, 0x12	; 18
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	b9 01       	movw	r22, r18
    2302:	0e 94 03 10 	call	0x2006	; 0x2006 <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(EXTI_u8INT1,&ChangeRacket2Pos);
    2306:	26 e2       	ldi	r18, 0x26	; 38
    2308:	33 e1       	ldi	r19, 0x13	; 19
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	b9 01       	movw	r22, r18
    230e:	0e 94 03 10 	call	0x2006	; 0x2006 <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(EXTI_u8INT2,&BallPos);
    2312:	23 e6       	ldi	r18, 0x63	; 99
    2314:	33 e1       	ldi	r19, 0x13	; 19
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	b9 01       	movw	r22, r18
    231a:	0e 94 03 10 	call	0x2006	; 0x2006 <EXTI_u8SetCallBack>
	CLCD_voidGoToXY(0,Global_u8Racket1);
    231e:	90 91 a0 00 	lds	r25, 0x00A0
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	69 2f       	mov	r22, r25
    2326:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
	CLCD_voidSendData('Y');
    232a:	89 e5       	ldi	r24, 0x59	; 89
    232c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
	CLCD_voidGoToXY(15,Global_u8Racket2);
    2330:	90 91 a1 00 	lds	r25, 0x00A1
    2334:	8f e0       	ldi	r24, 0x0F	; 15
    2336:	69 2f       	mov	r22, r25
    2338:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
	CLCD_voidSendData('Y');
    233c:	89 e5       	ldi	r24, 0x59	; 89
    233e:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>

	while(1)
	{
		if(Local_u8WinnerIndicator==0)
    2342:	80 91 a3 00 	lds	r24, 0x00A3
    2346:	88 23       	and	r24, r24
    2348:	09 f0       	breq	.+2      	; 0x234c <main+0x15a>
    234a:	9e c0       	rjmp	.+316    	; 0x2488 <main+0x296>
		{
		for(Local_u8Counter1=1;Local_u8Counter1<=14;Local_u8Counter1++)
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	8b a7       	std	Y+43, r24	; 0x2b
    2350:	87 c0       	rjmp	.+270    	; 0x2460 <main+0x26e>
		{
			CLCD_voidGoToXY(Local_u8Counter1,Global_u8Ball);
    2352:	90 91 a2 00 	lds	r25, 0x00A2
    2356:	8b a5       	ldd	r24, Y+43	; 0x2b
    2358:	69 2f       	mov	r22, r25
    235a:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			CLCD_voidSendData('.');
    235e:	8e e2       	ldi	r24, 0x2E	; 46
    2360:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a8 ec       	ldi	r26, 0xC8	; 200
    236a:	b2 e4       	ldi	r27, 0x42	; 66
    236c:	89 8f       	std	Y+25, r24	; 0x19
    236e:	9a 8f       	std	Y+26, r25	; 0x1a
    2370:	ab 8f       	std	Y+27, r26	; 0x1b
    2372:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	69 8d       	ldd	r22, Y+25	; 0x19
    2376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a e7       	ldi	r20, 0x7A	; 122
    2382:	55 e4       	ldi	r21, 0x45	; 69
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8d 8b       	std	Y+21, r24	; 0x15
    238e:	9e 8b       	std	Y+22, r25	; 0x16
    2390:	af 8b       	std	Y+23, r26	; 0x17
    2392:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <main+0x1c4>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <main+0x242>
	else if (__tmp > 65535)
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	69 8d       	ldd	r22, Y+25	; 0x19
    23d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9c 8b       	std	Y+20, r25	; 0x14
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <main+0x224>
    23f8:	80 e9       	ldi	r24, 0x90	; 144
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    23fc:	9a 8b       	std	Y+18, r25	; 0x12
    23fe:	89 8b       	std	Y+17, r24	; 0x11
    2400:	89 89       	ldd	r24, Y+17	; 0x11
    2402:	9a 89       	ldd	r25, Y+18	; 0x12
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <main+0x212>
    2408:	9a 8b       	std	Y+18, r25	; 0x12
    240a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9c 8b       	std	Y+20, r25	; 0x14
    2414:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8b 89       	ldd	r24, Y+19	; 0x13
    2418:	9c 89       	ldd	r25, Y+20	; 0x14
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <main+0x206>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <main+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6d 89       	ldd	r22, Y+21	; 0x15
    2422:	7e 89       	ldd	r23, Y+22	; 0x16
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	98 8b       	std	Y+16, r25	; 0x10
    243a:	8f 87       	std	Y+15, r24	; 0x0f
    243c:	8f 85       	ldd	r24, Y+15	; 0x0f
    243e:	98 89       	ldd	r25, Y+16	; 0x10
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <main+0x24e>
    2444:	98 8b       	std	Y+16, r25	; 0x10
    2446:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			CLCD_voidGoToXY(Local_u8Counter1,Global_u8Ball);
    2448:	90 91 a2 00 	lds	r25, 0x00A2
    244c:	8b a5       	ldd	r24, Y+43	; 0x2b
    244e:	69 2f       	mov	r22, r25
    2450:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2454:	80 e2       	ldi	r24, 0x20	; 32
    2456:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>

	while(1)
	{
		if(Local_u8WinnerIndicator==0)
		{
		for(Local_u8Counter1=1;Local_u8Counter1<=14;Local_u8Counter1++)
    245a:	8b a5       	ldd	r24, Y+43	; 0x2b
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	8b a7       	std	Y+43, r24	; 0x2b
    2460:	8b a5       	ldd	r24, Y+43	; 0x2b
    2462:	8f 30       	cpi	r24, 0x0F	; 15
    2464:	08 f4       	brcc	.+2      	; 0x2468 <main+0x276>
    2466:	75 cf       	rjmp	.-278    	; 0x2352 <main+0x160>
			CLCD_voidSendData('.');
			_delay_ms(100);
			CLCD_voidGoToXY(Local_u8Counter1,Global_u8Ball);
			CLCD_voidSendData(' ');
		}
		if(Global_u8Ball!=Global_u8Racket2)
    2468:	90 91 a2 00 	lds	r25, 0x00A2
    246c:	80 91 a1 00 	lds	r24, 0x00A1
    2470:	98 17       	cp	r25, r24
    2472:	51 f0       	breq	.+20     	; 0x2488 <main+0x296>
		{
			Local_u8WinnerIndicator=1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 a3 00 	sts	0x00A3, r24
			CLCD_voidSendComd(1);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
			CLCD_u8SendString("Left player wins");
    2480:	80 e6       	ldi	r24, 0x60	; 96
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
		}
		}
		if(Local_u8WinnerIndicator==0)
    2488:	80 91 a3 00 	lds	r24, 0x00A3
    248c:	88 23       	and	r24, r24
    248e:	09 f0       	breq	.+2      	; 0x2492 <main+0x2a0>
    2490:	58 cf       	rjmp	.-336    	; 0x2342 <main+0x150>
		{
		for(Local_u8Counter1=14;Local_u8Counter1>=1;Local_u8Counter1--)
    2492:	8e e0       	ldi	r24, 0x0E	; 14
    2494:	8b a7       	std	Y+43, r24	; 0x2b
    2496:	87 c0       	rjmp	.+270    	; 0x25a6 <main+0x3b4>
		{
			CLCD_voidGoToXY(Local_u8Counter1,Global_u8Ball);
    2498:	90 91 a2 00 	lds	r25, 0x00A2
    249c:	8b a5       	ldd	r24, Y+43	; 0x2b
    249e:	69 2f       	mov	r22, r25
    24a0:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			CLCD_voidSendData('.');
    24a4:	8e e2       	ldi	r24, 0x2E	; 46
    24a6:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a8 ec       	ldi	r26, 0xC8	; 200
    24b0:	b2 e4       	ldi	r27, 0x42	; 66
    24b2:	8b 87       	std	Y+11, r24	; 0x0b
    24b4:	9c 87       	std	Y+12, r25	; 0x0c
    24b6:	ad 87       	std	Y+13, r26	; 0x0d
    24b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    24bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24be:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a e7       	ldi	r20, 0x7A	; 122
    24c8:	55 e4       	ldi	r21, 0x45	; 69
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8f 83       	std	Y+7, r24	; 0x07
    24d4:	98 87       	std	Y+8, r25	; 0x08
    24d6:	a9 87       	std	Y+9, r26	; 0x09
    24d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <main+0x30a>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <main+0x388>
	else if (__tmp > 65535)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <main+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	0f c0       	rjmp	.+30     	; 0x255c <main+0x36a>
    253e:	80 e9       	ldi	r24, 0x90	; 144
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <main+0x358>
    254e:	9c 83       	std	Y+4, r25	; 0x04
    2550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <main+0x34c>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <main+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6f 81       	ldd	r22, Y+7	; 0x07
    2568:	78 85       	ldd	r23, Y+8	; 0x08
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <main+0x394>
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			CLCD_voidGoToXY(Local_u8Counter1,Global_u8Ball);
    258e:	90 91 a2 00 	lds	r25, 0x00A2
    2592:	8b a5       	ldd	r24, Y+43	; 0x2b
    2594:	69 2f       	mov	r22, r25
    2596:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    259a:	80 e2       	ldi	r24, 0x20	; 32
    259c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
			CLCD_u8SendString("Left player wins");
		}
		}
		if(Local_u8WinnerIndicator==0)
		{
		for(Local_u8Counter1=14;Local_u8Counter1>=1;Local_u8Counter1--)
    25a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a2:	81 50       	subi	r24, 0x01	; 1
    25a4:	8b a7       	std	Y+43, r24	; 0x2b
    25a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a8:	88 23       	and	r24, r24
    25aa:	09 f0       	breq	.+2      	; 0x25ae <main+0x3bc>
    25ac:	75 cf       	rjmp	.-278    	; 0x2498 <main+0x2a6>
			CLCD_voidSendData('.');
			_delay_ms(100);
			CLCD_voidGoToXY(Local_u8Counter1,Global_u8Ball);
			CLCD_voidSendData(' ');
		}
		if(Global_u8Ball!=Global_u8Racket1)
    25ae:	90 91 a2 00 	lds	r25, 0x00A2
    25b2:	80 91 a0 00 	lds	r24, 0x00A0
    25b6:	98 17       	cp	r25, r24
    25b8:	09 f4       	brne	.+2      	; 0x25bc <main+0x3ca>
    25ba:	c3 ce       	rjmp	.-634    	; 0x2342 <main+0x150>
		{
			Local_u8WinnerIndicator=1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	80 93 a3 00 	sts	0x00A3, r24
			CLCD_voidSendComd(1);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendComd>
			CLCD_u8SendString("Right player wins");
    25c8:	81 e7       	ldi	r24, 0x71	; 113
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    25d0:	b8 ce       	rjmp	.-656    	; 0x2342 <main+0x150>

000025d2 <ChangeRacket1Pos>:
		}
		}
	}
}
void ChangeRacket1Pos(void)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8WinnerIndicator==0)
    25da:	80 91 a3 00 	lds	r24, 0x00A3
    25de:	88 23       	and	r24, r24
    25e0:	91 f5       	brne	.+100    	; 0x2646 <ChangeRacket1Pos+0x74>
	{
	if(Global_u8Racket1==0)
    25e2:	80 91 a0 00 	lds	r24, 0x00A0
    25e6:	88 23       	and	r24, r24
    25e8:	b1 f4       	brne	.+44     	; 0x2616 <ChangeRacket1Pos+0x44>
	{
		CLCD_voidGoToXY(0,Global_u8Racket1);
    25ea:	90 91 a0 00 	lds	r25, 0x00A0
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	69 2f       	mov	r22, r25
    25f2:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    25f6:	80 e2       	ldi	r24, 0x20	; 32
    25f8:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		Global_u8Racket1=1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 93 a0 00 	sts	0x00A0, r24
		CLCD_voidGoToXY(0,Global_u8Racket1);
    2602:	90 91 a0 00 	lds	r25, 0x00A0
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	69 2f       	mov	r22, r25
    260a:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData('Y');
    260e:	89 e5       	ldi	r24, 0x59	; 89
    2610:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    2614:	18 c0       	rjmp	.+48     	; 0x2646 <ChangeRacket1Pos+0x74>
	}
	else if(Global_u8Racket1==1)
    2616:	80 91 a0 00 	lds	r24, 0x00A0
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	a1 f4       	brne	.+40     	; 0x2646 <ChangeRacket1Pos+0x74>
	{
		CLCD_voidGoToXY(0,Global_u8Racket1);
    261e:	90 91 a0 00 	lds	r25, 0x00A0
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	69 2f       	mov	r22, r25
    2626:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    262a:	80 e2       	ldi	r24, 0x20	; 32
    262c:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		Global_u8Racket1=0;
    2630:	10 92 a0 00 	sts	0x00A0, r1
		CLCD_voidGoToXY(0,Global_u8Racket1);
    2634:	90 91 a0 00 	lds	r25, 0x00A0
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	69 2f       	mov	r22, r25
    263c:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData('Y');
    2640:	89 e5       	ldi	r24, 0x59	; 89
    2642:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
	}
	}
}
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <ChangeRacket2Pos>:
void ChangeRacket2Pos(void)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8WinnerIndicator==0)
    2654:	80 91 a3 00 	lds	r24, 0x00A3
    2658:	88 23       	and	r24, r24
    265a:	91 f5       	brne	.+100    	; 0x26c0 <ChangeRacket2Pos+0x74>
	{
	if(Global_u8Racket2==0)
    265c:	80 91 a1 00 	lds	r24, 0x00A1
    2660:	88 23       	and	r24, r24
    2662:	b1 f4       	brne	.+44     	; 0x2690 <ChangeRacket2Pos+0x44>
	{
		CLCD_voidGoToXY(15,Global_u8Racket2);
    2664:	90 91 a1 00 	lds	r25, 0x00A1
    2668:	8f e0       	ldi	r24, 0x0F	; 15
    266a:	69 2f       	mov	r22, r25
    266c:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2670:	80 e2       	ldi	r24, 0x20	; 32
    2672:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		Global_u8Racket2=1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	80 93 a1 00 	sts	0x00A1, r24
		CLCD_voidGoToXY(15,Global_u8Racket2);
    267c:	90 91 a1 00 	lds	r25, 0x00A1
    2680:	8f e0       	ldi	r24, 0x0F	; 15
    2682:	69 2f       	mov	r22, r25
    2684:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData('Y');
    2688:	89 e5       	ldi	r24, 0x59	; 89
    268a:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    268e:	18 c0       	rjmp	.+48     	; 0x26c0 <ChangeRacket2Pos+0x74>
	}
	else if(Global_u8Racket2==1)
    2690:	80 91 a1 00 	lds	r24, 0x00A1
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	a1 f4       	brne	.+40     	; 0x26c0 <ChangeRacket2Pos+0x74>
	{
		CLCD_voidGoToXY(15,Global_u8Racket2);
    2698:	90 91 a1 00 	lds	r25, 0x00A1
    269c:	8f e0       	ldi	r24, 0x0F	; 15
    269e:	69 2f       	mov	r22, r25
    26a0:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    26a4:	80 e2       	ldi	r24, 0x20	; 32
    26a6:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		Global_u8Racket2=0;
    26aa:	10 92 a1 00 	sts	0x00A1, r1
		CLCD_voidGoToXY(15,Global_u8Racket2);
    26ae:	90 91 a1 00 	lds	r25, 0x00A1
    26b2:	8f e0       	ldi	r24, 0x0F	; 15
    26b4:	69 2f       	mov	r22, r25
    26b6:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_voidSendData('Y');
    26ba:	89 e5       	ldi	r24, 0x59	; 89
    26bc:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
	}
	}
}
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <BallPos>:
void BallPos(void)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8WinnerIndicator==0)
    26ce:	80 91 a3 00 	lds	r24, 0x00A3
    26d2:	88 23       	and	r24, r24
    26d4:	71 f5       	brne	.+92     	; 0x2732 <BallPos+0x6c>
	{
	if(Global_u8Ball==0)
    26d6:	80 91 a2 00 	lds	r24, 0x00A2
    26da:	88 23       	and	r24, r24
    26dc:	a1 f4       	brne	.+40     	; 0x2706 <BallPos+0x40>
	{
		Global_u8Ball=1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 a2 00 	sts	0x00A2, r24
		CLCD_voidGoToXY(1,0);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_u8SendString("              ");
    26ec:	83 e8       	ldi	r24, 0x83	; 131
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
		CLCD_voidGoToXY(1,1);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_u8SendString("              ");
    26fc:	83 e8       	ldi	r24, 0x83	; 131
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
    2704:	16 c0       	rjmp	.+44     	; 0x2732 <BallPos+0x6c>
	}
	else if(Global_u8Ball==1)
    2706:	80 91 a2 00 	lds	r24, 0x00A2
    270a:	81 30       	cpi	r24, 0x01	; 1
    270c:	91 f4       	brne	.+36     	; 0x2732 <BallPos+0x6c>
	{
		Global_u8Ball=0;
    270e:	10 92 a2 00 	sts	0x00A2, r1
		CLCD_voidGoToXY(1,0);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_u8SendString("              ");
    271a:	83 e8       	ldi	r24, 0x83	; 131
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
		CLCD_voidGoToXY(1,1);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 31 08 	call	0x1062	; 0x1062 <CLCD_voidGoToXY>
		CLCD_u8SendString("              ");
    272a:	83 e8       	ldi	r24, 0x83	; 131
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 3c 07 	call	0xe78	; 0xe78 <CLCD_u8SendString>
	}
	}
}
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <__divmodsi4>:
    2738:	97 fb       	bst	r25, 7
    273a:	09 2e       	mov	r0, r25
    273c:	05 26       	eor	r0, r21
    273e:	0e d0       	rcall	.+28     	; 0x275c <__divmodsi4_neg1>
    2740:	57 fd       	sbrc	r21, 7
    2742:	04 d0       	rcall	.+8      	; 0x274c <__divmodsi4_neg2>
    2744:	14 d0       	rcall	.+40     	; 0x276e <__udivmodsi4>
    2746:	0a d0       	rcall	.+20     	; 0x275c <__divmodsi4_neg1>
    2748:	00 1c       	adc	r0, r0
    274a:	38 f4       	brcc	.+14     	; 0x275a <__divmodsi4_exit>

0000274c <__divmodsi4_neg2>:
    274c:	50 95       	com	r21
    274e:	40 95       	com	r20
    2750:	30 95       	com	r19
    2752:	21 95       	neg	r18
    2754:	3f 4f       	sbci	r19, 0xFF	; 255
    2756:	4f 4f       	sbci	r20, 0xFF	; 255
    2758:	5f 4f       	sbci	r21, 0xFF	; 255

0000275a <__divmodsi4_exit>:
    275a:	08 95       	ret

0000275c <__divmodsi4_neg1>:
    275c:	f6 f7       	brtc	.-4      	; 0x275a <__divmodsi4_exit>
    275e:	90 95       	com	r25
    2760:	80 95       	com	r24
    2762:	70 95       	com	r23
    2764:	61 95       	neg	r22
    2766:	7f 4f       	sbci	r23, 0xFF	; 255
    2768:	8f 4f       	sbci	r24, 0xFF	; 255
    276a:	9f 4f       	sbci	r25, 0xFF	; 255
    276c:	08 95       	ret

0000276e <__udivmodsi4>:
    276e:	a1 e2       	ldi	r26, 0x21	; 33
    2770:	1a 2e       	mov	r1, r26
    2772:	aa 1b       	sub	r26, r26
    2774:	bb 1b       	sub	r27, r27
    2776:	fd 01       	movw	r30, r26
    2778:	0d c0       	rjmp	.+26     	; 0x2794 <__udivmodsi4_ep>

0000277a <__udivmodsi4_loop>:
    277a:	aa 1f       	adc	r26, r26
    277c:	bb 1f       	adc	r27, r27
    277e:	ee 1f       	adc	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	a2 17       	cp	r26, r18
    2784:	b3 07       	cpc	r27, r19
    2786:	e4 07       	cpc	r30, r20
    2788:	f5 07       	cpc	r31, r21
    278a:	20 f0       	brcs	.+8      	; 0x2794 <__udivmodsi4_ep>
    278c:	a2 1b       	sub	r26, r18
    278e:	b3 0b       	sbc	r27, r19
    2790:	e4 0b       	sbc	r30, r20
    2792:	f5 0b       	sbc	r31, r21

00002794 <__udivmodsi4_ep>:
    2794:	66 1f       	adc	r22, r22
    2796:	77 1f       	adc	r23, r23
    2798:	88 1f       	adc	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	1a 94       	dec	r1
    279e:	69 f7       	brne	.-38     	; 0x277a <__udivmodsi4_loop>
    27a0:	60 95       	com	r22
    27a2:	70 95       	com	r23
    27a4:	80 95       	com	r24
    27a6:	90 95       	com	r25
    27a8:	9b 01       	movw	r18, r22
    27aa:	ac 01       	movw	r20, r24
    27ac:	bd 01       	movw	r22, r26
    27ae:	cf 01       	movw	r24, r30
    27b0:	08 95       	ret

000027b2 <__prologue_saves__>:
    27b2:	2f 92       	push	r2
    27b4:	3f 92       	push	r3
    27b6:	4f 92       	push	r4
    27b8:	5f 92       	push	r5
    27ba:	6f 92       	push	r6
    27bc:	7f 92       	push	r7
    27be:	8f 92       	push	r8
    27c0:	9f 92       	push	r9
    27c2:	af 92       	push	r10
    27c4:	bf 92       	push	r11
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	ca 1b       	sub	r28, r26
    27dc:	db 0b       	sbc	r29, r27
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	09 94       	ijmp

000027ea <__epilogue_restores__>:
    27ea:	2a 88       	ldd	r2, Y+18	; 0x12
    27ec:	39 88       	ldd	r3, Y+17	; 0x11
    27ee:	48 88       	ldd	r4, Y+16	; 0x10
    27f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    27f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    27fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    27fc:	b9 84       	ldd	r11, Y+9	; 0x09
    27fe:	c8 84       	ldd	r12, Y+8	; 0x08
    2800:	df 80       	ldd	r13, Y+7	; 0x07
    2802:	ee 80       	ldd	r14, Y+6	; 0x06
    2804:	fd 80       	ldd	r15, Y+5	; 0x05
    2806:	0c 81       	ldd	r16, Y+4	; 0x04
    2808:	1b 81       	ldd	r17, Y+3	; 0x03
    280a:	aa 81       	ldd	r26, Y+2	; 0x02
    280c:	b9 81       	ldd	r27, Y+1	; 0x01
    280e:	ce 0f       	add	r28, r30
    2810:	d1 1d       	adc	r29, r1
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	ed 01       	movw	r28, r26
    281e:	08 95       	ret

00002820 <_exit>:
    2820:	f8 94       	cli

00002822 <__stop_program>:
    2822:	ff cf       	rjmp	.-2      	; 0x2822 <__stop_program>


Assignment6.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002dce  00002e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002040  00000000  00000000  00002e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d37  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000089b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000098c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a31f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <main>
      7a:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

static void voidSendEnablePulse(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	/*set enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e4       	ldi	r27, 0x40	; 64
     b5c:	8b 87       	std	Y+11, r24	; 0x0b
     b5e:	9c 87       	std	Y+12, r25	; 0x0c
     b60:	ad 87       	std	Y+13, r26	; 0x0d
     b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b64:	6b 85       	ldd	r22, Y+11	; 0x0b
     b66:	7c 85       	ldd	r23, Y+12	; 0x0c
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	4a e7       	ldi	r20, 0x7A	; 122
     b72:	55 e4       	ldi	r21, 0x45	; 69
     b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	a9 87       	std	Y+9, r26	; 0x09
     b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b84:	6f 81       	ldd	r22, Y+7	; 0x07
     b86:	78 85       	ldd	r23, Y+8	; 0x08
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e8       	ldi	r20, 0x80	; 128
     b92:	5f e3       	ldi	r21, 0x3F	; 63
     b94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     b98:	88 23       	and	r24, r24
     b9a:	2c f4       	brge	.+10     	; 0xba6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	9e 83       	std	Y+6, r25	; 0x06
     ba2:	8d 83       	std	Y+5, r24	; 0x05
     ba4:	3f c0       	rjmp	.+126    	; 0xc24 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     ba6:	6f 81       	ldd	r22, Y+7	; 0x07
     ba8:	78 85       	ldd	r23, Y+8	; 0x08
     baa:	89 85       	ldd	r24, Y+9	; 0x09
     bac:	9a 85       	ldd	r25, Y+10	; 0x0a
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	3f ef       	ldi	r19, 0xFF	; 255
     bb2:	4f e7       	ldi	r20, 0x7F	; 127
     bb4:	57 e4       	ldi	r21, 0x47	; 71
     bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bba:	18 16       	cp	r1, r24
     bbc:	4c f5       	brge	.+82     	; 0xc10 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e2       	ldi	r20, 0x20	; 32
     bcc:	51 e4       	ldi	r21, 0x41	; 65
     bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <voidSendEnablePulse+0xd0>
     be8:	80 e9       	ldi	r24, 0x90	; 144
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <voidSendEnablePulse+0xbe>
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	9e 83       	std	Y+6, r25	; 0x06
     c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	69 f7       	brne	.-38     	; 0xbe8 <voidSendEnablePulse+0xb2>
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <voidSendEnablePulse+0xfa>
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
}
     c42:	2e 96       	adiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	98 2f       	mov	r25, r24
     c64:	91 70       	andi	r25, 0x01	; 1
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	64 e0       	ldi	r22, 0x04	; 4
     c6a:	49 2f       	mov	r20, r25
     c6c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	86 95       	lsr	r24
     c74:	98 2f       	mov	r25, r24
     c76:	91 70       	andi	r25, 0x01	; 1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	65 e0       	ldi	r22, 0x05	; 5
     c7c:	49 2f       	mov	r20, r25
     c7e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	98 2f       	mov	r25, r24
     c8a:	91 70       	andi	r25, 0x01	; 1
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	66 e0       	ldi	r22, 0x06	; 6
     c90:	49 2f       	mov	r20, r25
     c92:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	86 95       	lsr	r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	91 70       	andi	r25, 0x01	; 1
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	67 e0       	ldi	r22, 0x07	; 7
     ca6:	49 2f       	mov	r20, r25
     ca8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendComd>:

void CLCD_voidSendComd(uint8 Copy_Cmd)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    #if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	/*set command at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_Cmd);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Cmd>>4);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	82 95       	swap	r24
     cd8:	8f 70       	andi	r24, 0x0F	; 15
     cda:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cde:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Cmd);
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     ce8:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	#endif
}
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_Data)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	89 83       	std	Y+1, r24	; 0x01
	/*set RS pin as high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	#if CLCD_RW_CTRL_EN==ENABLED
	/*set RW pin as low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	/*set data at data port*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_Data);
	voidSendEnablePulse();
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_Data>>4);
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	82 95       	swap	r24
     d18:	8f 70       	andi	r24, 0x0F	; 15
     d1a:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d1e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(Copy_Data);
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d28:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	#endif

}
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <CLCD_voidInit>:

void CLCD_voidInit(void) /*from datasheet*/
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	2e 97       	sbiw	r28, 0x0e	; 14
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e2       	ldi	r26, 0x20	; 32
     d4e:	b2 e4       	ldi	r27, 0x42	; 66
     d50:	8b 87       	std	Y+11, r24	; 0x0b
     d52:	9c 87       	std	Y+12, r25	; 0x0c
     d54:	ad 87       	std	Y+13, r26	; 0x0d
     d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a e7       	ldi	r20, 0x7A	; 122
     d66:	55 e4       	ldi	r21, 0x45	; 69
     d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8f 83       	std	Y+7, r24	; 0x07
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	a9 87       	std	Y+9, r26	; 0x09
     d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d78:	6f 81       	ldd	r22, Y+7	; 0x07
     d7a:	78 85       	ldd	r23, Y+8	; 0x08
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <CLCD_voidInit+0x66>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d9a:	6f 81       	ldd	r22, Y+7	; 0x07
     d9c:	78 85       	ldd	r23, Y+8	; 0x08
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	6b 85       	ldd	r22, Y+11	; 0x0b
     db4:	7c 85       	ldd	r23, Y+12	; 0x0c
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <CLCD_voidInit+0xc6>
     ddc:	80 e9       	ldi	r24, 0x90	; 144
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <CLCD_voidInit+0xb4>
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <CLCD_voidInit+0xa8>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9e 83       	std	Y+6, r25	; 0x06
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	9e 81       	ldd	r25, Y+6	; 0x06
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <CLCD_voidInit+0xf0>
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*function set command: 2lines(DB3 high) and small font(DB2 low)*/
	#if CLCD_OP_MODE==EIGHT_BIT_MODE
	CLCD_voidSendComd(0b00111000);
	#elif CLCD_OP_MODE==FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e32:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e3c:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e46:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	#endif

	/*display on/off control command: display enable(DB2 high),cursor(DB1 low),blink(DB0 low)*/
	CLCD_voidSendComd(0b00001100);
     e4a:	8c e0       	ldi	r24, 0x0C	; 12
     e4c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
	/*display clear command*/
	CLCD_voidSendComd(0b00000001);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
	
}
     e56:	2e 96       	adiw	r28, 0x0e	; 14
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <CLCD_u8SendString>:
uint8 CLCD_u8SendString(char Copy_chstring[])
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <CLCD_u8SendString+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <CLCD_u8SendString+0x8>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8StateError=OK;
     e78:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	e1 f0       	breq	.+56     	; 0xeba <CLCD_u8SendString+0x52>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     e82:	19 82       	std	Y+1, r1	; 0x01
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <CLCD_u8SendString+0x3a>
	{
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	fc 01       	movw	r30, r24
     e92:	e2 0f       	add	r30, r18
     e94:	f3 1f       	adc	r31, r19
     e96:	80 81       	ld	r24, Z
     e98:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
uint8 CLCD_u8SendString(char Copy_chstring[])
{
	uint8 Local_u8StateError=OK;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++)
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	fc 01       	movw	r30, r24
     eae:	e2 0f       	add	r30, r18
     eb0:	f3 1f       	adc	r31, r19
     eb2:	80 81       	ld	r24, Z
     eb4:	88 23       	and	r24, r24
     eb6:	39 f7       	brne	.-50     	; 0xe86 <CLCD_u8SendString+0x1e>
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <CLCD_u8SendString+0x56>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8StateError;
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	61 97       	sbiw	r28, 0x11	; 17
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	6e 87       	std	Y+14, r22	; 0x0e
     ee4:	7f 87       	std	Y+15, r23	; 0x0f
     ee6:	88 8b       	std	Y+16, r24	; 0x10
     ee8:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chArray[10];
	sint8 Local_s8Remainder,Local_s8ArrayIndex=0;
     eea:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_s32Number==0)
     eec:	8e 85       	ldd	r24, Y+14	; 0x0e
     eee:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef0:	a8 89       	ldd	r26, Y+16	; 0x10
     ef2:	b9 89       	ldd	r27, Y+17	; 0x11
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	a1 05       	cpc	r26, r1
     ef8:	b1 05       	cpc	r27, r1
     efa:	21 f4       	brne	.+8      	; 0xf04 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData(48);
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
     f02:	86 c0       	rjmp	.+268    	; 0x1010 <CLCD_voidSendNumber+0x142>
	}
	else if(Copy_s32Number>0)
     f04:	8e 85       	ldd	r24, Y+14	; 0x0e
     f06:	9f 85       	ldd	r25, Y+15	; 0x0f
     f08:	a8 89       	ldd	r26, Y+16	; 0x10
     f0a:	b9 89       	ldd	r27, Y+17	; 0x11
     f0c:	18 16       	cp	r1, r24
     f0e:	19 06       	cpc	r1, r25
     f10:	1a 06       	cpc	r1, r26
     f12:	1b 06       	cpc	r1, r27
     f14:	d4 f5       	brge	.+116    	; 0xf8a <CLCD_voidSendNumber+0xbc>
     f16:	30 c0       	rjmp	.+96     	; 0xf78 <CLCD_voidSendNumber+0xaa>
	{
	while(Copy_s32Number!=0)
	{
		Local_s8Remainder=Copy_s32Number%10;
     f18:	8e 85       	ldd	r24, Y+14	; 0x0e
     f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1c:	a8 89       	ldd	r26, Y+16	; 0x10
     f1e:	b9 89       	ldd	r27, Y+17	; 0x11
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodsi4>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	8b 83       	std	Y+3, r24	; 0x03
		Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	33 27       	eor	r19, r19
     f3c:	27 fd       	sbrc	r18, 7
     f3e:	30 95       	com	r19
     f40:	4b 81       	ldd	r20, Y+3	; 0x03
     f42:	ce 01       	movw	r24, r28
     f44:	04 96       	adiw	r24, 0x04	; 4
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	40 83       	st	Z, r20
		Local_s8ArrayIndex++;
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number/=10;
     f54:	8e 85       	ldd	r24, Y+14	; 0x0e
     f56:	9f 85       	ldd	r25, Y+15	; 0x0f
     f58:	a8 89       	ldd	r26, Y+16	; 0x10
     f5a:	b9 89       	ldd	r27, Y+17	; 0x11
     f5c:	2a e0       	ldi	r18, 0x0A	; 10
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodsi4>
     f6c:	da 01       	movw	r26, r20
     f6e:	c9 01       	movw	r24, r18
     f70:	8e 87       	std	Y+14, r24	; 0x0e
     f72:	9f 87       	std	Y+15, r25	; 0x0f
     f74:	a8 8b       	std	Y+16, r26	; 0x10
     f76:	b9 8b       	std	Y+17, r27	; 0x11
	{
		CLCD_voidSendData(48);
	}
	else if(Copy_s32Number>0)
	{
	while(Copy_s32Number!=0)
     f78:	8e 85       	ldd	r24, Y+14	; 0x0e
     f7a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f7c:	a8 89       	ldd	r26, Y+16	; 0x10
     f7e:	b9 89       	ldd	r27, Y+17	; 0x11
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	a1 05       	cpc	r26, r1
     f84:	b1 05       	cpc	r27, r1
     f86:	41 f6       	brne	.-112    	; 0xf18 <CLCD_voidSendNumber+0x4a>
     f88:	43 c0       	rjmp	.+134    	; 0x1010 <CLCD_voidSendNumber+0x142>
		Copy_s32Number/=10;
	}
	}
	else
	{
		CLCD_voidSendData('-');
     f8a:	8d e2       	ldi	r24, 0x2D	; 45
     f8c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
     f90:	37 c0       	rjmp	.+110    	; 0x1000 <CLCD_voidSendNumber+0x132>
		while(Copy_s32Number!=0)
		{
			Local_s8Remainder=-Copy_s32Number%10;
     f92:	8e 85       	ldd	r24, Y+14	; 0x0e
     f94:	9f 85       	ldd	r25, Y+15	; 0x0f
     f96:	a8 89       	ldd	r26, Y+16	; 0x10
     f98:	b9 89       	ldd	r27, Y+17	; 0x11
     f9a:	b0 95       	com	r27
     f9c:	a0 95       	com	r26
     f9e:	90 95       	com	r25
     fa0:	81 95       	neg	r24
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	af 4f       	sbci	r26, 0xFF	; 255
     fa6:	bf 4f       	sbci	r27, 0xFF	; 255
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodsi4>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8b 83       	std	Y+3, r24	; 0x03
			Local_chArray[Local_s8ArrayIndex]=Local_s8Remainder;
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	33 27       	eor	r19, r19
     fc4:	27 fd       	sbrc	r18, 7
     fc6:	30 95       	com	r19
     fc8:	4b 81       	ldd	r20, Y+3	; 0x03
     fca:	ce 01       	movw	r24, r28
     fcc:	04 96       	adiw	r24, 0x04	; 4
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	40 83       	st	Z, r20
			Local_s8ArrayIndex++;
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	8a 83       	std	Y+2, r24	; 0x02
			Copy_s32Number/=10;
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	a8 89       	ldd	r26, Y+16	; 0x10
     fe2:	b9 89       	ldd	r27, Y+17	; 0x11
     fe4:	2a e0       	ldi	r18, 0x0A	; 10
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodsi4>
     ff4:	da 01       	movw	r26, r20
     ff6:	c9 01       	movw	r24, r18
     ff8:	8e 87       	std	Y+14, r24	; 0x0e
     ffa:	9f 87       	std	Y+15, r25	; 0x0f
     ffc:	a8 8b       	std	Y+16, r26	; 0x10
     ffe:	b9 8b       	std	Y+17, r27	; 0x11
	}
	}
	else
	{
		CLCD_voidSendData('-');
		while(Copy_s32Number!=0)
    1000:	8e 85       	ldd	r24, Y+14	; 0x0e
    1002:	9f 85       	ldd	r25, Y+15	; 0x0f
    1004:	a8 89       	ldd	r26, Y+16	; 0x10
    1006:	b9 89       	ldd	r27, Y+17	; 0x11
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	a1 05       	cpc	r26, r1
    100c:	b1 05       	cpc	r27, r1
    100e:	09 f6       	brne	.-126    	; 0xf92 <CLCD_voidSendNumber+0xc4>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	81 50       	subi	r24, 0x01	; 1
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	11 c0       	rjmp	.+34     	; 0x103a <CLCD_voidSendNumber+0x16c>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	33 27       	eor	r19, r19
    101e:	27 fd       	sbrc	r18, 7
    1020:	30 95       	com	r19
    1022:	ce 01       	movw	r24, r28
    1024:	04 96       	adiw	r24, 0x04	; 4
    1026:	fc 01       	movw	r30, r24
    1028:	e2 0f       	add	r30, r18
    102a:	f3 1f       	adc	r31, r19
    102c:	80 81       	ld	r24, Z
    102e:	80 5d       	subi	r24, 0xD0	; 208
    1030:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			Copy_s32Number/=10;
		}
	}

	{
	for(sint8 Local_s8Counter=Local_s8ArrayIndex-1;Local_s8Counter>=0;Local_s8Counter--)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	88 23       	and	r24, r24
    103e:	64 f7       	brge	.-40     	; 0x1018 <CLCD_voidSendNumber+0x14a>
	{
		CLCD_voidSendData(Local_chArray[Local_s8Counter]+48);
	}
	}
}
    1040:	61 96       	adiw	r28, 0x11	; 17
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <CLCD_voidGoToXY+0x6>
    1058:	0f 92       	push	r0
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRAMAdd;
	if(Copy_u8YPos==0u)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	88 23       	and	r24, r24
    1066:	19 f4       	brne	.+6      	; 0x106e <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAMAdd=Copy_u8XPos;
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	06 c0       	rjmp	.+12     	; 0x107a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos==1u)
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	19 f4       	brne	.+6      	; 0x107a <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRAMAdd=Copy_u8XPos+0x40;
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	80 5c       	subi	r24, 0xC0	; 192
    1078:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRAMAdd|=1<<7;
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendComd(Local_u8DDRAMAdd);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <CLCD_u8SinWaveSendString>:
uint8 CLCD_u8SinWaveSendString(char Copy_chstring[])
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <CLCD_u8SinWaveSendString+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <CLCD_u8SinWaveSendString+0x8>
    109a:	00 d0       	rcall	.+0      	; 0x109c <CLCD_u8SinWaveSendString+0xa>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Local_u8StateError=OK;
    10a4:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_u8XCoordinate=0;
    10a6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8YCoordinate=0;
    10a8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chstring!=NULL)
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	51 f1       	breq	.+84     	; 0x1106 <CLCD_u8SinWaveSendString+0x74>
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	1c c0       	rjmp	.+56     	; 0x10ee <CLCD_u8SinWaveSendString+0x5c>
	{
		CLCD_voidGoToXY(Local_u8XCoordinate,Local_u8YCoordinate);
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	6a 81       	ldd	r22, Y+2	; 0x02
    10ba:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendData(Copy_chstring[Local_u8LoopCounter]);
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	80 81       	ld	r24, Z
    10d0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
		if(Local_u8YCoordinate==0)Local_u8YCoordinate=1;
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 23       	and	r24, r24
    10d8:	19 f4       	brne	.+6      	; 0x10e0 <CLCD_u8SinWaveSendString+0x4e>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <CLCD_u8SinWaveSendString+0x50>
		else Local_u8YCoordinate=0;
    10e0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8StateError=OK;
	uint8 Local_u8XCoordinate=0;
	uint8 Local_u8YCoordinate=0;
	if(Copy_chstring!=NULL)
	{
	for(uint8 Local_u8LoopCounter=0;Copy_chstring[Local_u8LoopCounter]!='\0';Local_u8LoopCounter++,Local_u8XCoordinate++)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	8b 83       	std	Y+3, r24	; 0x03
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	fc 01       	movw	r30, r24
    10fa:	e2 0f       	add	r30, r18
    10fc:	f3 1f       	adc	r31, r19
    10fe:	80 81       	ld	r24, Z
    1100:	88 23       	and	r24, r24
    1102:	c9 f6       	brne	.-78     	; 0x10b6 <CLCD_u8SinWaveSendString+0x24>
    1104:	02 c0       	rjmp	.+4      	; 0x110a <CLCD_u8SinWaveSendString+0x78>
		else Local_u8YCoordinate=0;
	}
	}
	else
	{
		Local_u8StateError=NULL_PTR_ERR;
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	8c 83       	std	Y+4, r24	; 0x04
	}
	return Local_u8StateError;
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    110c:	26 96       	adiw	r28, 0x06	; 6
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 Copy_u8Pattern[],uint8 Copy_u8PatternNum,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	27 97       	sbiw	r28, 0x07	; 7
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	8b 83       	std	Y+3, r24	; 0x03
    1136:	6d 83       	std	Y+5, r22	; 0x05
    1138:	4e 83       	std	Y+6, r20	; 0x06
    113a:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 64       	ori	r24, 0x40	; 64
    1154:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendComd(Local_u8CGRAMAdd);
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendComd>
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	0e c0       	rjmp	.+28     	; 0x117c <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	fc 01       	movw	r30, r24
    116c:	e2 0f       	add	r30, r18
    116e:	f3 1f       	adc	r31, r19
    1170:	80 81       	ld	r24, Z
    1172:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
{
	uint8 Local_u8CGRAMAdd=Copy_u8PatternNum*8u;
	uint8 Local_u8LoopCounter;
	SET_BIT(Local_u8CGRAMAdd,6);
	CLCD_voidSendComd(Local_u8CGRAMAdd);
	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8;Local_u8LoopCounter++)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	78 f3       	brcs	.-34     	; 0x1160 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1182:	8e 81       	ldd	r24, Y+6	; 0x06
    1184:	6f 81       	ldd	r22, Y+7	; 0x07
    1186:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNum);
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>

}
    1190:	27 96       	adiw	r28, 0x07	; 7
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_prv.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	28 97       	sbiw	r28, 0x08	; 8
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	6b 83       	std	Y+3, r22	; 0x03
    11ba:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    11bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 30       	cpi	r24, 0x08	; 8
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <DIO_u8SetPinDirection+0x24>
    11c4:	f4 c0       	rjmp	.+488    	; 0x13ae <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	88 23       	and	r24, r24
    11ca:	09 f0       	breq	.+2      	; 0x11ce <DIO_u8SetPinDirection+0x2c>
    11cc:	77 c0       	rjmp	.+238    	; 0x12bc <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	38 87       	std	Y+8, r19	; 0x08
    11d6:	2f 83       	std	Y+7, r18	; 0x07
    11d8:	8f 81       	ldd	r24, Y+7	; 0x07
    11da:	98 85       	ldd	r25, Y+8	; 0x08
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	59 f1       	breq	.+86     	; 0x1238 <DIO_u8SetPinDirection+0x96>
    11e2:	2f 81       	ldd	r18, Y+7	; 0x07
    11e4:	38 85       	ldd	r19, Y+8	; 0x08
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <DIO_u8SetPinDirection+0x54>
    11ec:	8f 81       	ldd	r24, Y+7	; 0x07
    11ee:	98 85       	ldd	r25, Y+8	; 0x08
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	69 f0       	breq	.+26     	; 0x120e <DIO_u8SetPinDirection+0x6c>
    11f4:	60 c0       	rjmp	.+192    	; 0x12b6 <DIO_u8SetPinDirection+0x114>
    11f6:	2f 81       	ldd	r18, Y+7	; 0x07
    11f8:	38 85       	ldd	r19, Y+8	; 0x08
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	89 f1       	breq	.+98     	; 0x1262 <DIO_u8SetPinDirection+0xc0>
    1200:	8f 81       	ldd	r24, Y+7	; 0x07
    1202:	98 85       	ldd	r25, Y+8	; 0x08
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <DIO_u8SetPinDirection+0x6a>
    120a:	40 c0       	rjmp	.+128    	; 0x128c <DIO_u8SetPinDirection+0xea>
    120c:	54 c0       	rjmp	.+168    	; 0x12b6 <DIO_u8SetPinDirection+0x114>
			{
			case(DIO_u8PORTA):
					CLR_BIT(DDRA,Copy_u8Pin);
    120e:	aa e3       	ldi	r26, 0x3A	; 58
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ea e3       	ldi	r30, 0x3A	; 58
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8SetPinDirection+0x8a>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_u8SetPinDirection+0x86>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	bd c0       	rjmp	.+378    	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					CLR_BIT(DDRB,Copy_u8Pin);
    1238:	a7 e3       	ldi	r26, 0x37	; 55
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e7 e3       	ldi	r30, 0x37	; 55
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8SetPinDirection+0xb4>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8SetPinDirection+0xb0>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	a8 c0       	rjmp	.+336    	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					CLR_BIT(DDRC,Copy_u8Pin);
    1262:	a4 e3       	ldi	r26, 0x34	; 52
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e4 e3       	ldi	r30, 0x34	; 52
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8SetPinDirection+0xde>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8SetPinDirection+0xda>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	93 c0       	rjmp	.+294    	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					CLR_BIT(DDRD,Copy_u8Pin);
    128c:	a1 e3       	ldi	r26, 0x31	; 49
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e1 e3       	ldi	r30, 0x31	; 49
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_u8SetPinDirection+0x108>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_u8SetPinDirection+0x104>
    12ae:	80 95       	com	r24
    12b0:	84 23       	and	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	7e c0       	rjmp	.+252    	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	7b c0       	rjmp	.+246    	; 0x13b2 <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <DIO_u8SetPinDirection+0x122>
    12c2:	72 c0       	rjmp	.+228    	; 0x13a8 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3e 83       	std	Y+6, r19	; 0x06
    12cc:	2d 83       	std	Y+5, r18	; 0x05
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	49 f1       	breq	.+82     	; 0x132a <DIO_u8SetPinDirection+0x188>
    12d8:	2d 81       	ldd	r18, Y+5	; 0x05
    12da:	3e 81       	ldd	r19, Y+6	; 0x06
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	2c f4       	brge	.+10     	; 0x12ec <DIO_u8SetPinDirection+0x14a>
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	61 f0       	breq	.+24     	; 0x1302 <DIO_u8SetPinDirection+0x160>
    12ea:	5b c0       	rjmp	.+182    	; 0x13a2 <DIO_u8SetPinDirection+0x200>
    12ec:	2d 81       	ldd	r18, Y+5	; 0x05
    12ee:	3e 81       	ldd	r19, Y+6	; 0x06
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	71 f1       	breq	.+92     	; 0x1352 <DIO_u8SetPinDirection+0x1b0>
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	91 05       	cpc	r25, r1
    12fe:	e9 f1       	breq	.+122    	; 0x137a <DIO_u8SetPinDirection+0x1d8>
    1300:	50 c0       	rjmp	.+160    	; 0x13a2 <DIO_u8SetPinDirection+0x200>
			{
			case(DIO_u8PORTA):
					SET_BIT(DDRA,Copy_u8Pin);
    1302:	aa e3       	ldi	r26, 0x3A	; 58
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ea e3       	ldi	r30, 0x3A	; 58
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_u8SetPinDirection+0x17e>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_u8SetPinDirection+0x17a>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	44 c0       	rjmp	.+136    	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTB):
					SET_BIT(DDRB,Copy_u8Pin);
    132a:	a7 e3       	ldi	r26, 0x37	; 55
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e7 e3       	ldi	r30, 0x37	; 55
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_u8SetPinDirection+0x1a6>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_u8SetPinDirection+0x1a2>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	30 c0       	rjmp	.+96     	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTC):
					SET_BIT(DDRC,Copy_u8Pin);
    1352:	a4 e3       	ldi	r26, 0x34	; 52
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e4 e3       	ldi	r30, 0x34	; 52
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_u8SetPinDirection+0x1ce>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_u8SetPinDirection+0x1ca>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	1c c0       	rjmp	.+56     	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			case(DIO_u8PORTD):
					SET_BIT(DDRD,Copy_u8Pin);
    137a:	a1 e3       	ldi	r26, 0x31	; 49
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e1 e3       	ldi	r30, 0x31	; 49
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_u8SetPinDirection+0x1f6>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_u8SetPinDirection+0x1f2>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	08 c0       	rjmp	.+16     	; 0x13b2 <DIO_u8SetPinDirection+0x210>
					break;
			default:
				Local_u8ErrorState= NOK;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_u8SetPinDirection+0x210>


	}
	else
	{
		 Local_u8ErrorState= NOK;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b4:	28 96       	adiw	r28, 0x08	; 8
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Value)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	28 97       	sbiw	r28, 0x08	; 8
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	8a 83       	std	Y+2, r24	; 0x02
    13dc:	6b 83       	std	Y+3, r22	; 0x03
    13de:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    13e0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 30       	cpi	r24, 0x08	; 8
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <DIO_u8SetPinValue+0x24>
    13e8:	f4 c0       	rjmp	.+488    	; 0x15d2 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <DIO_u8SetPinValue+0x2c>
    13f0:	72 c0       	rjmp	.+228    	; 0x14d6 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	38 87       	std	Y+8, r19	; 0x08
    13fa:	2f 83       	std	Y+7, r18	; 0x07
    13fc:	8f 81       	ldd	r24, Y+7	; 0x07
    13fe:	98 85       	ldd	r25, Y+8	; 0x08
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	49 f1       	breq	.+82     	; 0x1458 <DIO_u8SetPinValue+0x92>
    1406:	2f 81       	ldd	r18, Y+7	; 0x07
    1408:	38 85       	ldd	r19, Y+8	; 0x08
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	2c f4       	brge	.+10     	; 0x141a <DIO_u8SetPinValue+0x54>
    1410:	8f 81       	ldd	r24, Y+7	; 0x07
    1412:	98 85       	ldd	r25, Y+8	; 0x08
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	61 f0       	breq	.+24     	; 0x1430 <DIO_u8SetPinValue+0x6a>
    1418:	5b c0       	rjmp	.+182    	; 0x14d0 <DIO_u8SetPinValue+0x10a>
    141a:	2f 81       	ldd	r18, Y+7	; 0x07
    141c:	38 85       	ldd	r19, Y+8	; 0x08
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	71 f1       	breq	.+92     	; 0x1480 <DIO_u8SetPinValue+0xba>
    1424:	8f 81       	ldd	r24, Y+7	; 0x07
    1426:	98 85       	ldd	r25, Y+8	; 0x08
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	e9 f1       	breq	.+122    	; 0x14a8 <DIO_u8SetPinValue+0xe2>
    142e:	50 c0       	rjmp	.+160    	; 0x14d0 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    1430:	ab e3       	ldi	r26, 0x3B	; 59
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	eb e3       	ldi	r30, 0x3B	; 59
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_u8SetPinValue+0x88>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_u8SetPinValue+0x84>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	bf c0       	rjmp	.+382    	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    1458:	a8 e3       	ldi	r26, 0x38	; 56
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e8 e3       	ldi	r30, 0x38	; 56
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_u8SetPinValue+0xb0>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_u8SetPinValue+0xac>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	ab c0       	rjmp	.+342    	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    1480:	a5 e3       	ldi	r26, 0x35	; 53
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_u8SetPinValue+0xd8>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_u8SetPinValue+0xd4>
    14a2:	84 2b       	or	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	97 c0       	rjmp	.+302    	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				SET_BIT(PORTD,Copy_u8Pin);
    14a8:	a2 e3       	ldi	r26, 0x32	; 50
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e2 e3       	ldi	r30, 0x32	; 50
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_u8SetPinValue+0x100>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_u8SetPinValue+0xfc>
    14ca:	84 2b       	or	r24, r20
    14cc:	8c 93       	st	X, r24
    14ce:	83 c0       	rjmp	.+262    	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	80 c0       	rjmp	.+256    	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	88 23       	and	r24, r24
    14da:	09 f0       	breq	.+2      	; 0x14de <DIO_u8SetPinValue+0x118>
    14dc:	77 c0       	rjmp	.+238    	; 0x15cc <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3e 83       	std	Y+6, r19	; 0x06
    14e6:	2d 83       	std	Y+5, r18	; 0x05
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	59 f1       	breq	.+86     	; 0x1548 <DIO_u8SetPinValue+0x182>
    14f2:	2d 81       	ldd	r18, Y+5	; 0x05
    14f4:	3e 81       	ldd	r19, Y+6	; 0x06
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	2c f4       	brge	.+10     	; 0x1506 <DIO_u8SetPinValue+0x140>
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f0       	breq	.+26     	; 0x151e <DIO_u8SetPinValue+0x158>
    1504:	60 c0       	rjmp	.+192    	; 0x15c6 <DIO_u8SetPinValue+0x200>
    1506:	2d 81       	ldd	r18, Y+5	; 0x05
    1508:	3e 81       	ldd	r19, Y+6	; 0x06
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	89 f1       	breq	.+98     	; 0x1572 <DIO_u8SetPinValue+0x1ac>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <DIO_u8SetPinValue+0x156>
    151a:	40 c0       	rjmp	.+128    	; 0x159c <DIO_u8SetPinValue+0x1d6>
    151c:	54 c0       	rjmp	.+168    	; 0x15c6 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:
				CLR_BIT(PORTA,Copy_u8Pin);
    151e:	ab e3       	ldi	r26, 0x3B	; 59
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e3       	ldi	r30, 0x3B	; 59
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_u8SetPinValue+0x176>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_u8SetPinValue+0x172>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	47 c0       	rjmp	.+142    	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTB:
				CLR_BIT(PORTB,Copy_u8Pin);
    1548:	a8 e3       	ldi	r26, 0x38	; 56
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_u8SetPinValue+0x1a0>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_u8SetPinValue+0x19c>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	32 c0       	rjmp	.+100    	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTC:
				CLR_BIT(PORTC,Copy_u8Pin);
    1572:	a5 e3       	ldi	r26, 0x35	; 53
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_u8SetPinValue+0x1ca>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_u8SetPinValue+0x1c6>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	1d c0       	rjmp	.+58     	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			case DIO_u8PORTD:
				CLR_BIT(PORTD,Copy_u8Pin);
    159c:	a2 e3       	ldi	r26, 0x32	; 50
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e2 e3       	ldi	r30, 0x32	; 50
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_u8SetPinValue+0x1f4>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_u8SetPinValue+0x1f0>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	08 c0       	rjmp	.+16     	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			default:
				Local_u8ErrorState= NOK;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState= NOK;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d8:	28 96       	adiw	r28, 0x08	; 8
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	27 97       	sbiw	r28, 0x07	; 7
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	6b 83       	std	Y+3, r22	; 0x03
    1602:	5d 83       	std	Y+5, r21	; 0x05
    1604:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState= OK;
    1606:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	09 f4       	brne	.+2      	; 0x1612 <DIO_u8GetPinValue+0x28>
    1610:	7b c0       	rjmp	.+246    	; 0x1708 <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_u8Pin<=DIO_u8PIN7)
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	88 30       	cpi	r24, 0x08	; 8
    1616:	08 f0       	brcs	.+2      	; 0x161a <DIO_u8GetPinValue+0x30>
    1618:	74 c0       	rjmp	.+232    	; 0x1702 <DIO_u8GetPinValue+0x118>
		{
			switch (Copy_u8Port)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3f 83       	std	Y+7, r19	; 0x07
    1622:	2e 83       	std	Y+6, r18	; 0x06
    1624:	4e 81       	ldd	r20, Y+6	; 0x06
    1626:	5f 81       	ldd	r21, Y+7	; 0x07
    1628:	41 30       	cpi	r20, 0x01	; 1
    162a:	51 05       	cpc	r21, r1
    162c:	59 f1       	breq	.+86     	; 0x1684 <DIO_u8GetPinValue+0x9a>
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
    1630:	9f 81       	ldd	r25, Y+7	; 0x07
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	91 05       	cpc	r25, r1
    1636:	34 f4       	brge	.+12     	; 0x1644 <DIO_u8GetPinValue+0x5a>
    1638:	2e 81       	ldd	r18, Y+6	; 0x06
    163a:	3f 81       	ldd	r19, Y+7	; 0x07
    163c:	21 15       	cp	r18, r1
    163e:	31 05       	cpc	r19, r1
    1640:	69 f0       	breq	.+26     	; 0x165c <DIO_u8GetPinValue+0x72>
    1642:	5c c0       	rjmp	.+184    	; 0x16fc <DIO_u8GetPinValue+0x112>
    1644:	4e 81       	ldd	r20, Y+6	; 0x06
    1646:	5f 81       	ldd	r21, Y+7	; 0x07
    1648:	42 30       	cpi	r20, 0x02	; 2
    164a:	51 05       	cpc	r21, r1
    164c:	79 f1       	breq	.+94     	; 0x16ac <DIO_u8GetPinValue+0xc2>
    164e:	8e 81       	ldd	r24, Y+6	; 0x06
    1650:	9f 81       	ldd	r25, Y+7	; 0x07
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <DIO_u8GetPinValue+0x70>
    1658:	3d c0       	rjmp	.+122    	; 0x16d4 <DIO_u8GetPinValue+0xea>
    165a:	50 c0       	rjmp	.+160    	; 0x16fc <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:
				*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);
    165c:	e9 e3       	ldi	r30, 0x39	; 57
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8GetPinValue+0x8a>
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_u8GetPinValue+0x86>
    1678:	ca 01       	movw	r24, r20
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	ec 81       	ldd	r30, Y+4	; 0x04
    167e:	fd 81       	ldd	r31, Y+5	; 0x05
    1680:	80 83       	st	Z, r24
    1682:	44 c0       	rjmp	.+136    	; 0x170c <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTB:
				*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);
    1684:	e6 e3       	ldi	r30, 0x36	; 54
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_u8GetPinValue+0xb2>
    1698:	55 95       	asr	r21
    169a:	47 95       	ror	r20
    169c:	8a 95       	dec	r24
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <DIO_u8GetPinValue+0xae>
    16a0:	ca 01       	movw	r24, r20
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	ec 81       	ldd	r30, Y+4	; 0x04
    16a6:	fd 81       	ldd	r31, Y+5	; 0x05
    16a8:	80 83       	st	Z, r24
    16aa:	30 c0       	rjmp	.+96     	; 0x170c <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTC:
				*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);
    16ac:	e3 e3       	ldi	r30, 0x33	; 51
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a9 01       	movw	r20, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_u8GetPinValue+0xda>
    16c0:	55 95       	asr	r21
    16c2:	47 95       	ror	r20
    16c4:	8a 95       	dec	r24
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_u8GetPinValue+0xd6>
    16c8:	ca 01       	movw	r24, r20
    16ca:	81 70       	andi	r24, 0x01	; 1
    16cc:	ec 81       	ldd	r30, Y+4	; 0x04
    16ce:	fd 81       	ldd	r31, Y+5	; 0x05
    16d0:	80 83       	st	Z, r24
    16d2:	1c c0       	rjmp	.+56     	; 0x170c <DIO_u8GetPinValue+0x122>
				break;
			case DIO_u8PORTD:
				*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);
    16d4:	e0 e3       	ldi	r30, 0x30	; 48
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a9 01       	movw	r20, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_u8GetPinValue+0x102>
    16e8:	55 95       	asr	r21
    16ea:	47 95       	ror	r20
    16ec:	8a 95       	dec	r24
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_u8GetPinValue+0xfe>
    16f0:	ca 01       	movw	r24, r20
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	ec 81       	ldd	r30, Y+4	; 0x04
    16f6:	fd 81       	ldd	r31, Y+5	; 0x05
    16f8:	80 83       	st	Z, r24
    16fa:	08 c0       	rjmp	.+16     	; 0x170c <DIO_u8GetPinValue+0x122>
				break;
			default:
				Local_u8ErrorState= NOK;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	05 c0       	rjmp	.+10     	; 0x170c <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
}
    170e:	27 96       	adiw	r28, 0x07	; 7
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port,uint8 Copy_u8Direction)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <DIO_u8SetPortDirection+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <DIO_u8SetPortDirection+0x8>
    1728:	0f 92       	push	r0
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=0;
    1732:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3d 83       	std	Y+5, r19	; 0x05
    173c:	2c 83       	std	Y+4, r18	; 0x04
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	d1 f0       	breq	.+52     	; 0x177c <DIO_u8SetPortDirection+0x5c>
    1748:	2c 81       	ldd	r18, Y+4	; 0x04
    174a:	3d 81       	ldd	r19, Y+5	; 0x05
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	2c f4       	brge	.+10     	; 0x175c <DIO_u8SetPortDirection+0x3c>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 f0       	breq	.+24     	; 0x1772 <DIO_u8SetPortDirection+0x52>
    175a:	1f c0       	rjmp	.+62     	; 0x179a <DIO_u8SetPortDirection+0x7a>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	81 f0       	breq	.+32     	; 0x1786 <DIO_u8SetPortDirection+0x66>
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	81 f0       	breq	.+32     	; 0x1790 <DIO_u8SetPortDirection+0x70>
    1770:	14 c0       	rjmp	.+40     	; 0x179a <DIO_u8SetPortDirection+0x7a>
		{
		case(DIO_u8PORTA):
				DDRA=Copy_u8Direction;
    1772:	ea e3       	ldi	r30, 0x3A	; 58
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	80 83       	st	Z, r24
    177a:	11 c0       	rjmp	.+34     	; 0x179e <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTB):
				DDRB=Copy_u8Direction;
    177c:	e7 e3       	ldi	r30, 0x37	; 55
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	80 83       	st	Z, r24
    1784:	0c c0       	rjmp	.+24     	; 0x179e <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTC):
				DDRC=Copy_u8Direction;
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	80 83       	st	Z, r24
    178e:	07 c0       	rjmp	.+14     	; 0x179e <DIO_u8SetPortDirection+0x7e>
				break;
		case(DIO_u8PORTD):
				DDRD=Copy_u8Direction;
    1790:	e1 e3       	ldi	r30, 0x31	; 49
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	80 83       	st	Z, r24
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_u8SetPortDirection+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	return Local_u8ErrorState;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <DIO_u8SetPortValue+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_u8SetPortValue+0x8>
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState=0;
    17c2:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3d 83       	std	Y+5, r19	; 0x05
    17cc:	2c 83       	std	Y+4, r18	; 0x04
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	9d 81       	ldd	r25, Y+5	; 0x05
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	d1 f0       	breq	.+52     	; 0x180c <DIO_u8SetPortValue+0x5c>
    17d8:	2c 81       	ldd	r18, Y+4	; 0x04
    17da:	3d 81       	ldd	r19, Y+5	; 0x05
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	2c f4       	brge	.+10     	; 0x17ec <DIO_u8SetPortValue+0x3c>
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	9d 81       	ldd	r25, Y+5	; 0x05
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	61 f0       	breq	.+24     	; 0x1802 <DIO_u8SetPortValue+0x52>
    17ea:	1f c0       	rjmp	.+62     	; 0x182a <DIO_u8SetPortValue+0x7a>
    17ec:	2c 81       	ldd	r18, Y+4	; 0x04
    17ee:	3d 81       	ldd	r19, Y+5	; 0x05
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	81 f0       	breq	.+32     	; 0x1816 <DIO_u8SetPortValue+0x66>
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	91 05       	cpc	r25, r1
    17fe:	81 f0       	breq	.+32     	; 0x1820 <DIO_u8SetPortValue+0x70>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <DIO_u8SetPortValue+0x7a>
		{
		case(DIO_u8PORTA):
				PORTA=Copy_u8Value;
    1802:	eb e3       	ldi	r30, 0x3B	; 59
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	80 83       	st	Z, r24
    180a:	11 c0       	rjmp	.+34     	; 0x182e <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTB):
				PORTB=Copy_u8Value;
    180c:	e8 e3       	ldi	r30, 0x38	; 56
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	80 83       	st	Z, r24
    1814:	0c c0       	rjmp	.+24     	; 0x182e <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTC):
				PORTC=Copy_u8Value;
    1816:	e5 e3       	ldi	r30, 0x35	; 53
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	80 83       	st	Z, r24
    181e:	07 c0       	rjmp	.+14     	; 0x182e <DIO_u8SetPortValue+0x7e>
				break;
		case(DIO_u8PORTD):
				PORTD=Copy_u8Value;
    1820:	e2 e3       	ldi	r30, 0x32	; 50
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	80 83       	st	Z, r24
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_u8SetPortValue+0x7e>
				break;
		default:
			Local_u8ErrorState= NOK;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <DIO_u8TogglePinValue+0x6>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_u8TogglePinValue+0x8>
    1848:	00 d0       	rcall	.+0      	; 0x184a <DIO_u8TogglePinValue+0xa>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	8b 83       	std	Y+3, r24	; 0x03
    1850:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState= OK;
    1852:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8BitState;
		if(Copy_u8Pin<=DIO_u8PIN7)
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	88 30       	cpi	r24, 0x08	; 8
    1858:	08 f0       	brcs	.+2      	; 0x185c <DIO_u8TogglePinValue+0x1c>
    185a:	1a c1       	rjmp	.+564    	; 0x1a90 <DIO_u8TogglePinValue+0x250>
		{
			switch (Copy_u8Port)
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3e 83       	std	Y+6, r19	; 0x06
    1864:	2d 83       	std	Y+5, r18	; 0x05
    1866:	4d 81       	ldd	r20, Y+5	; 0x05
    1868:	5e 81       	ldd	r21, Y+6	; 0x06
    186a:	41 30       	cpi	r20, 0x01	; 1
    186c:	51 05       	cpc	r21, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <DIO_u8TogglePinValue+0x32>
    1870:	55 c0       	rjmp	.+170    	; 0x191c <DIO_u8TogglePinValue+0xdc>
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	91 05       	cpc	r25, r1
    187a:	34 f4       	brge	.+12     	; 0x1888 <DIO_u8TogglePinValue+0x48>
    187c:	2d 81       	ldd	r18, Y+5	; 0x05
    187e:	3e 81       	ldd	r19, Y+6	; 0x06
    1880:	21 15       	cp	r18, r1
    1882:	31 05       	cpc	r19, r1
    1884:	71 f0       	breq	.+28     	; 0x18a2 <DIO_u8TogglePinValue+0x62>
    1886:	01 c1       	rjmp	.+514    	; 0x1a8a <DIO_u8TogglePinValue+0x24a>
    1888:	4d 81       	ldd	r20, Y+5	; 0x05
    188a:	5e 81       	ldd	r21, Y+6	; 0x06
    188c:	42 30       	cpi	r20, 0x02	; 2
    188e:	51 05       	cpc	r21, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <DIO_u8TogglePinValue+0x54>
    1892:	81 c0       	rjmp	.+258    	; 0x1996 <DIO_u8TogglePinValue+0x156>
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <DIO_u8TogglePinValue+0x60>
    189e:	b8 c0       	rjmp	.+368    	; 0x1a10 <DIO_u8TogglePinValue+0x1d0>
    18a0:	f4 c0       	rjmp	.+488    	; 0x1a8a <DIO_u8TogglePinValue+0x24a>
			{
			case DIO_u8PORTA:
				Local_u8BitState=GET_BIT(PORTA,Copy_u8Pin);
    18a2:	eb e3       	ldi	r30, 0x3B	; 59
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_u8TogglePinValue+0x7a>
    18b6:	55 95       	asr	r21
    18b8:	47 95       	ror	r20
    18ba:	8a 95       	dec	r24
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_u8TogglePinValue+0x76>
    18be:	ca 01       	movw	r24, r20
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	a9 f4       	brne	.+42     	; 0x18f4 <DIO_u8TogglePinValue+0xb4>
				{
					CLR_BIT(PORTA,Copy_u8Pin);
    18ca:	ab e3       	ldi	r26, 0x3B	; 59
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_u8TogglePinValue+0xa8>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_u8TogglePinValue+0xa4>
    18ec:	80 95       	com	r24
    18ee:	84 23       	and	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	d0 c0       	rjmp	.+416    	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTA,Copy_u8Pin);
    18f4:	ab e3       	ldi	r26, 0x3B	; 59
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	eb e3       	ldi	r30, 0x3B	; 59
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_u8TogglePinValue+0xd2>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_u8TogglePinValue+0xce>
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	bc c0       	rjmp	.+376    	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTB:
				Local_u8BitState=GET_BIT(PORTB,Copy_u8Pin);
    191c:	e8 e3       	ldi	r30, 0x38	; 56
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_u8TogglePinValue+0xf4>
    1930:	55 95       	asr	r21
    1932:	47 95       	ror	r20
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_u8TogglePinValue+0xf0>
    1938:	ca 01       	movw	r24, r20
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	a9 f4       	brne	.+42     	; 0x196e <DIO_u8TogglePinValue+0x12e>
				{
					CLR_BIT(PORTB,Copy_u8Pin);
    1944:	a8 e3       	ldi	r26, 0x38	; 56
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e8 e3       	ldi	r30, 0x38	; 56
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_u8TogglePinValue+0x122>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_u8TogglePinValue+0x11e>
    1966:	80 95       	com	r24
    1968:	84 23       	and	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	93 c0       	rjmp	.+294    	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTB,Copy_u8Pin);
    196e:	a8 e3       	ldi	r26, 0x38	; 56
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e8 e3       	ldi	r30, 0x38	; 56
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_u8TogglePinValue+0x14c>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_u8TogglePinValue+0x148>
    1990:	84 2b       	or	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	7f c0       	rjmp	.+254    	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTC:
				Local_u8BitState=GET_BIT(PORTC,Copy_u8Pin);
    1996:	e5 e3       	ldi	r30, 0x35	; 53
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8TogglePinValue+0x16e>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8TogglePinValue+0x16a>
    19b2:	ca 01       	movw	r24, r20
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	a9 f4       	brne	.+42     	; 0x19e8 <DIO_u8TogglePinValue+0x1a8>
				{
					CLR_BIT(PORTC,Copy_u8Pin);
    19be:	a5 e3       	ldi	r26, 0x35	; 53
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e5 e3       	ldi	r30, 0x35	; 53
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_u8TogglePinValue+0x19c>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_u8TogglePinValue+0x198>
    19e0:	80 95       	com	r24
    19e2:	84 23       	and	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	56 c0       	rjmp	.+172    	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTC,Copy_u8Pin);
    19e8:	a5 e3       	ldi	r26, 0x35	; 53
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e5 e3       	ldi	r30, 0x35	; 53
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_u8TogglePinValue+0x1c6>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_u8TogglePinValue+0x1c2>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	42 c0       	rjmp	.+132    	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				break;
			case DIO_u8PORTD:
				Local_u8BitState=GET_BIT(PORTD,Copy_u8Pin);
    1a10:	e2 e3       	ldi	r30, 0x32	; 50
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_u8TogglePinValue+0x1e8>
    1a24:	55 95       	asr	r21
    1a26:	47 95       	ror	r20
    1a28:	8a 95       	dec	r24
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_u8TogglePinValue+0x1e4>
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	81 70       	andi	r24, 0x01	; 1
    1a30:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8BitState==DIO_u8PIN_HIGH)
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	a9 f4       	brne	.+42     	; 0x1a62 <DIO_u8TogglePinValue+0x222>
				{
					CLR_BIT(PORTD,Copy_u8Pin);
    1a38:	a2 e3       	ldi	r26, 0x32	; 50
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e2 e3       	ldi	r30, 0x32	; 50
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_u8TogglePinValue+0x216>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_u8TogglePinValue+0x212>
    1a5a:	80 95       	com	r24
    1a5c:	84 23       	and	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	19 c0       	rjmp	.+50     	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				else
				{
					SET_BIT(PORTD,Copy_u8Pin);
    1a62:	a2 e3       	ldi	r26, 0x32	; 50
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e2 e3       	ldi	r30, 0x32	; 50
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_u8TogglePinValue+0x240>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_u8TogglePinValue+0x23c>
    1a84:	84 2b       	or	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				}
				break;
			default:
				Local_u8ErrorState= NOK;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_u8TogglePinValue+0x254>
				break;
			}
		}
		else
		{
			Local_u8ErrorState= NOK;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	8a 83       	std	Y+2, r24	; 0x02
		}

	return Local_u8ErrorState;
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1a96:	26 96       	adiw	r28, 0x06	; 6
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <main>:
#include "DIO_interface.h"
#include "CLCD_interface.h"
#include <util/delay.h>

void main(void)
{
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	c9 58       	subi	r28, 0x89	; 137
    1ab6:	d0 40       	sbci	r29, 0x00	; 0
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
	/*LCD pins initialization*/
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_OUTPUT);//RS pin
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_OUTPUT);//RW pin
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_OUTPUT);//E pin
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	62 e0       	ldi	r22, 0x02	; 2
    1ada:	41 e0       	ldi	r20, 0x01	; 1
    1adc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(DIO_u8PORTB,0xFF);//data port
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	6f ef       	ldi	r22, 0xFF	; 255
    1ae4:	0e 94 90 0b 	call	0x1720	; 0x1720 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_INPUT);//UP PB
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	63 e0       	ldi	r22, 0x03	; 3
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_INPUT);//DOWN PB
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	64 e0       	ldi	r22, 0x04	; 4
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_INPUT);//ENTER PB
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	65 e0       	ldi	r22, 0x05	; 5
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);//UP PB pull up
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	63 e0       	ldi	r22, 0x03	; 3
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);//DOWN PB pull up
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);//ENTER PB pull up
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	65 e0       	ldi	r22, 0x05	; 5
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>

	CLCD_voidInit();
    1b24:	0e 94 9a 06 	call	0xd34	; 0xd34 <CLCD_voidInit>

	sint32 Local_s8Num1=1;
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e2 59       	subi	r30, 0x92	; 146
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e0       	ldi	r26, 0x00	; 0
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
	sint8 Local_s8OperatorArrIndex=0;
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e3 59       	subi	r30, 0x93	; 147
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	10 82       	st	Z, r1
	char  Local_charOperatorArray[4]={'+','-','*','/'};
    1b46:	fe 01       	movw	r30, r28
    1b48:	ee 58       	subi	r30, 0x8E	; 142
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	8b e2       	ldi	r24, 0x2B	; 43
    1b4e:	80 83       	st	Z, r24
    1b50:	fe 01       	movw	r30, r28
    1b52:	ee 58       	subi	r30, 0x8E	; 142
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	8d e2       	ldi	r24, 0x2D	; 45
    1b58:	81 83       	std	Z+1, r24	; 0x01
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ee 58       	subi	r30, 0x8E	; 142
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	8a e2       	ldi	r24, 0x2A	; 42
    1b62:	82 83       	std	Z+2, r24	; 0x02
    1b64:	fe 01       	movw	r30, r28
    1b66:	ee 58       	subi	r30, 0x8E	; 142
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	8f e2       	ldi	r24, 0x2F	; 47
    1b6c:	83 83       	std	Z+3, r24	; 0x03
	uint8 Local_u8Operator='+';
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e4 59       	subi	r30, 0x94	; 148
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	8b e2       	ldi	r24, 0x2B	; 43
    1b76:	80 83       	st	Z, r24
	sint32 Local_s8Num2=1;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e8 59       	subi	r30, 0x98	; 152
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e0       	ldi	r26, 0x00	; 0
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
	sint8 Local_s8Result;
	uint16 Local_s32Result;
	char  Local_chDivisionRes[4];
	sint8 Local_s8DivisionCounter=0;
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ec 59       	subi	r30, 0x9C	; 156
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	10 82       	st	Z, r1
	sint8 Local_s8UpBitMode;
	sint8 Local_s8DownBitMode;
	uint8 Local_u8EnterBitMode;
	uint8 Local_u8EnterCounter=0;
    1b96:	fe 01       	movw	r30, r28
    1b98:	ed 59       	subi	r30, 0x9D	; 157
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	10 82       	st	Z, r1
	uint8 Local_u8ArrowPattern[8]={0b00000100,0b00001010,0b00010101,0b00000100,0b00000100,0b00000100,0b00000100,0};
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	83 58       	subi	r24, 0x83	; 131
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	cb 57       	subi	r28, 0x7B	; 123
    1ba6:	df 4f       	sbci	r29, 0xFF	; 255
    1ba8:	99 83       	std	Y+1, r25	; 0x01
    1baa:	88 83       	st	Y, r24
    1bac:	c5 58       	subi	r28, 0x85	; 133
    1bae:	d0 40       	sbci	r29, 0x00	; 0
    1bb0:	80 e7       	ldi	r24, 0x70	; 112
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	c9 57       	subi	r28, 0x79	; 121
    1bb6:	df 4f       	sbci	r29, 0xFF	; 255
    1bb8:	99 83       	std	Y+1, r25	; 0x01
    1bba:	88 83       	st	Y, r24
    1bbc:	c7 58       	subi	r28, 0x87	; 135
    1bbe:	d0 40       	sbci	r29, 0x00	; 0
    1bc0:	98 e0       	ldi	r25, 0x08	; 8
    1bc2:	c7 57       	subi	r28, 0x77	; 119
    1bc4:	df 4f       	sbci	r29, 0xFF	; 255
    1bc6:	98 83       	st	Y, r25
    1bc8:	c9 58       	subi	r28, 0x89	; 137
    1bca:	d0 40       	sbci	r29, 0x00	; 0
    1bcc:	c9 57       	subi	r28, 0x79	; 121
    1bce:	df 4f       	sbci	r29, 0xFF	; 255
    1bd0:	e8 81       	ld	r30, Y
    1bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd4:	c7 58       	subi	r28, 0x87	; 135
    1bd6:	d0 40       	sbci	r29, 0x00	; 0
    1bd8:	00 80       	ld	r0, Z
    1bda:	c9 57       	subi	r28, 0x79	; 121
    1bdc:	df 4f       	sbci	r29, 0xFF	; 255
    1bde:	88 81       	ld	r24, Y
    1be0:	99 81       	ldd	r25, Y+1	; 0x01
    1be2:	c7 58       	subi	r28, 0x87	; 135
    1be4:	d0 40       	sbci	r29, 0x00	; 0
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	c9 57       	subi	r28, 0x79	; 121
    1bea:	df 4f       	sbci	r29, 0xFF	; 255
    1bec:	99 83       	std	Y+1, r25	; 0x01
    1bee:	88 83       	st	Y, r24
    1bf0:	c7 58       	subi	r28, 0x87	; 135
    1bf2:	d0 40       	sbci	r29, 0x00	; 0
    1bf4:	cb 57       	subi	r28, 0x7B	; 123
    1bf6:	df 4f       	sbci	r29, 0xFF	; 255
    1bf8:	e8 81       	ld	r30, Y
    1bfa:	f9 81       	ldd	r31, Y+1	; 0x01
    1bfc:	c5 58       	subi	r28, 0x85	; 133
    1bfe:	d0 40       	sbci	r29, 0x00	; 0
    1c00:	00 82       	st	Z, r0
    1c02:	cb 57       	subi	r28, 0x7B	; 123
    1c04:	df 4f       	sbci	r29, 0xFF	; 255
    1c06:	88 81       	ld	r24, Y
    1c08:	99 81       	ldd	r25, Y+1	; 0x01
    1c0a:	c5 58       	subi	r28, 0x85	; 133
    1c0c:	d0 40       	sbci	r29, 0x00	; 0
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	cb 57       	subi	r28, 0x7B	; 123
    1c12:	df 4f       	sbci	r29, 0xFF	; 255
    1c14:	99 83       	std	Y+1, r25	; 0x01
    1c16:	88 83       	st	Y, r24
    1c18:	c5 58       	subi	r28, 0x85	; 133
    1c1a:	d0 40       	sbci	r29, 0x00	; 0
    1c1c:	c7 57       	subi	r28, 0x77	; 119
    1c1e:	df 4f       	sbci	r29, 0xFF	; 255
    1c20:	98 81       	ld	r25, Y
    1c22:	c9 58       	subi	r28, 0x89	; 137
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	91 50       	subi	r25, 0x01	; 1
    1c28:	c7 57       	subi	r28, 0x77	; 119
    1c2a:	df 4f       	sbci	r29, 0xFF	; 255
    1c2c:	98 83       	st	Y, r25
    1c2e:	c9 58       	subi	r28, 0x89	; 137
    1c30:	d0 40       	sbci	r29, 0x00	; 0
    1c32:	c7 57       	subi	r28, 0x77	; 119
    1c34:	df 4f       	sbci	r29, 0xFF	; 255
    1c36:	e8 81       	ld	r30, Y
    1c38:	c9 58       	subi	r28, 0x89	; 137
    1c3a:	d0 40       	sbci	r29, 0x00	; 0
    1c3c:	ee 23       	and	r30, r30
    1c3e:	31 f6       	brne	.-116    	; 0x1bcc <main+0x124>
	while(1)
	{
		CLCD_voidGoToXY(0,0);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendNumber(Local_s8Num1);
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e2 59       	subi	r30, 0x92	; 146
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	a2 81       	ldd	r26, Z+2	; 0x02
    1c54:	b3 81       	ldd	r27, Z+3	; 0x03
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
		CLCD_voidGoToXY(1,0);
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendData(Local_u8Operator);
    1c66:	fe 01       	movw	r30, r28
    1c68:	e4 59       	subi	r30, 0x94	; 148
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
		CLCD_voidGoToXY(2,0);
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendNumber(Local_s8Num2);
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e8 59       	subi	r30, 0x98	; 152
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	a2 81       	ldd	r26, Z+2	; 0x02
    1c86:	b3 81       	ldd	r27, Z+3	; 0x03
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN5,&Local_u8EnterBitMode);
    1c90:	9e 01       	movw	r18, r28
    1c92:	24 58       	subi	r18, 0x84	; 132
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	65 e0       	ldi	r22, 0x05	; 5
    1c9a:	a9 01       	movw	r20, r18
    1c9c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DIO_u8GetPinValue>
		if(Local_u8EnterCounter!=3)
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ed 59       	subi	r30, 0x9D	; 157
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	41 f0       	breq	.+16     	; 0x1cbc <main+0x214>
		{
			CLCD_voidGoToXY(3,0);
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_u8SendString("       ");
    1cb4:	80 e6       	ldi	r24, 0x60	; 96
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 34 07 	call	0xe68	; 0xe68 <CLCD_u8SendString>
		}
		if(Local_u8EnterBitMode==0)
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e4 58       	subi	r30, 0x84	; 132
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 23       	and	r24, r24
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <main+0x222>
    1cc8:	bc c0       	rjmp	.+376    	; 0x1e42 <main+0x39a>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e1 5a       	subi	r30, 0xA1	; 161
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a8 ec       	ldi	r26, 0xC8	; 200
    1cd6:	b2 e4       	ldi	r27, 0x42	; 66
    1cd8:	80 83       	st	Z, r24
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	a2 83       	std	Z+2, r26	; 0x02
    1cde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	05 5a       	subi	r16, 0xA5	; 165
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e1 5a       	subi	r30, 0xA1	; 161
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a e7       	ldi	r20, 0x7A	; 122
    1cfa:	55 e4       	ldi	r21, 0x45	; 69
    1cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	f8 01       	movw	r30, r16
    1d06:	80 83       	st	Z, r24
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	a2 83       	std	Z+2, r26	; 0x02
    1d0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e5 5a       	subi	r30, 0xA5	; 165
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	44 f4       	brge	.+16     	; 0x1d3c <main+0x294>
		__ticks = 1;
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e7 5a       	subi	r30, 0xA7	; 167
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	64 c0       	rjmp	.+200    	; 0x1e04 <main+0x35c>
	else if (__tmp > 65535)
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e5 5a       	subi	r30, 0xA5	; 165
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	57 e4       	ldi	r21, 0x47	; 71
    1d52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	0c f0       	brlt	.+2      	; 0x1d5c <main+0x2b4>
    1d5a:	43 c0       	rjmp	.+134    	; 0x1de2 <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e1 5a       	subi	r30, 0xA1	; 161
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8e 01       	movw	r16, r28
    1d7c:	07 5a       	subi	r16, 0xA7	; 167
    1d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
    1d92:	1f c0       	rjmp	.+62     	; 0x1dd2 <main+0x32a>
    1d94:	fe 01       	movw	r30, r28
    1d96:	e9 5a       	subi	r30, 0xA9	; 169
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 e9       	ldi	r24, 0x90	; 144
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	fe 01       	movw	r30, r28
    1da4:	e9 5a       	subi	r30, 0xA9	; 169
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <main+0x304>
    1db0:	fe 01       	movw	r30, r28
    1db2:	e9 5a       	subi	r30, 0xA9	; 169
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dba:	de 01       	movw	r26, r28
    1dbc:	a7 5a       	subi	r26, 0xA7	; 167
    1dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e7 5a       	subi	r30, 0xA7	; 167
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	11 96       	adiw	r26, 0x01	; 1
    1dce:	9c 93       	st	X, r25
    1dd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e7 5a       	subi	r30, 0xA7	; 167
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	d1 f6       	brne	.-76     	; 0x1d94 <main+0x2ec>
    1de0:	27 c0       	rjmp	.+78     	; 0x1e30 <main+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	8e 01       	movw	r16, r28
    1de4:	07 5a       	subi	r16, 0xA7	; 167
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	fe 01       	movw	r30, r28
    1dea:	e5 5a       	subi	r30, 0xA5	; 165
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	f8 01       	movw	r30, r16
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
    1e04:	de 01       	movw	r26, r28
    1e06:	ab 5a       	subi	r26, 0xAB	; 171
    1e08:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e7 5a       	subi	r30, 0xA7	; 167
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 81       	ld	r24, Z
    1e12:	91 81       	ldd	r25, Z+1	; 0x01
    1e14:	8d 93       	st	X+, r24
    1e16:	9c 93       	st	X, r25
    1e18:	fe 01       	movw	r30, r28
    1e1a:	eb 5a       	subi	r30, 0xAB	; 171
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <main+0x37a>
    1e26:	fe 01       	movw	r30, r28
    1e28:	eb 5a       	subi	r30, 0xAB	; 171
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
		{
			_delay_ms(100);
			Local_u8EnterCounter++;
    1e30:	de 01       	movw	r26, r28
    1e32:	ad 59       	subi	r26, 0x9D	; 157
    1e34:	bf 4f       	sbci	r27, 0xFF	; 255
    1e36:	fe 01       	movw	r30, r28
    1e38:	ed 59       	subi	r30, 0x9D	; 157
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	8c 93       	st	X, r24
		}
		if(Local_u8EnterCounter==0)
    1e42:	fe 01       	movw	r30, r28
    1e44:	ed 59       	subi	r30, 0x9D	; 157
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 23       	and	r24, r24
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <main+0x3a8>
    1e4e:	f0 c1       	rjmp	.+992    	; 0x2230 <main+0x788>
		{
		CLCD_voidGoToXY(0,0);
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendNumber(Local_s8Num1);
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e2 59       	subi	r30, 0x92	; 146
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	a2 81       	ldd	r26, Z+2	; 0x02
    1e64:	b3 81       	ldd	r27, Z+3	; 0x03
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN3,&Local_s8UpBitMode);
    1e6e:	9e 01       	movw	r18, r28
    1e70:	26 58       	subi	r18, 0x86	; 134
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	a9 01       	movw	r20, r18
    1e7a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN4,&Local_s8DownBitMode);
    1e7e:	9e 01       	movw	r18, r28
    1e80:	25 58       	subi	r18, 0x85	; 133
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	64 e0       	ldi	r22, 0x04	; 4
    1e88:	a9 01       	movw	r20, r18
    1e8a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DIO_u8GetPinValue>
		if(Local_s8UpBitMode==0)
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e6 58       	subi	r30, 0x86	; 134
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	88 23       	and	r24, r24
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <main+0x3f4>
    1e9a:	ed c0       	rjmp	.+474    	; 0x2076 <main+0x5ce>
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ef 5a       	subi	r30, 0xAF	; 175
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a8 ec       	ldi	r26, 0xC8	; 200
    1ea8:	b2 e4       	ldi	r27, 0x42	; 66
    1eaa:	80 83       	st	Z, r24
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	a2 83       	std	Z+2, r26	; 0x02
    1eb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	8e 01       	movw	r16, r28
    1eb4:	03 5b       	subi	r16, 0xB3	; 179
    1eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ef 5a       	subi	r30, 0xAF	; 175
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a e7       	ldi	r20, 0x7A	; 122
    1ecc:	55 e4       	ldi	r21, 0x45	; 69
    1ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	80 83       	st	Z, r24
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	a2 83       	std	Z+2, r26	; 0x02
    1ede:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e3 5b       	subi	r30, 0xB3	; 179
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	60 81       	ld	r22, Z
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	44 f4       	brge	.+16     	; 0x1f0e <main+0x466>
		__ticks = 1;
    1efe:	fe 01       	movw	r30, r28
    1f00:	e5 5b       	subi	r30, 0xB5	; 181
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
    1f0c:	64 c0       	rjmp	.+200    	; 0x1fd6 <main+0x52e>
	else if (__tmp > 65535)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e3 5b       	subi	r30, 0xB3	; 179
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	0c f0       	brlt	.+2      	; 0x1f2e <main+0x486>
    1f2c:	43 c0       	rjmp	.+134    	; 0x1fb4 <main+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ef 5a       	subi	r30, 0xAF	; 175
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	60 81       	ld	r22, Z
    1f36:	71 81       	ldd	r23, Z+1	; 0x01
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e2       	ldi	r20, 0x20	; 32
    1f42:	51 e4       	ldi	r21, 0x41	; 65
    1f44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8e 01       	movw	r16, r28
    1f4e:	05 5b       	subi	r16, 0xB5	; 181
    1f50:	1f 4f       	sbci	r17, 0xFF	; 255
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	f8 01       	movw	r30, r16
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
    1f64:	1f c0       	rjmp	.+62     	; 0x1fa4 <main+0x4fc>
    1f66:	fe 01       	movw	r30, r28
    1f68:	e7 5b       	subi	r30, 0xB7	; 183
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 e9       	ldi	r24, 0x90	; 144
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	80 83       	st	Z, r24
    1f74:	fe 01       	movw	r30, r28
    1f76:	e7 5b       	subi	r30, 0xB7	; 183
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <main+0x4d6>
    1f82:	fe 01       	movw	r30, r28
    1f84:	e7 5b       	subi	r30, 0xB7	; 183
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	de 01       	movw	r26, r28
    1f8e:	a5 5b       	subi	r26, 0xB5	; 181
    1f90:	bf 4f       	sbci	r27, 0xFF	; 255
    1f92:	fe 01       	movw	r30, r28
    1f94:	e5 5b       	subi	r30, 0xB5	; 181
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	11 96       	adiw	r26, 0x01	; 1
    1fa0:	9c 93       	st	X, r25
    1fa2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e5 5b       	subi	r30, 0xB5	; 181
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	d1 f6       	brne	.-76     	; 0x1f66 <main+0x4be>
    1fb2:	27 c0       	rjmp	.+78     	; 0x2002 <main+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	05 5b       	subi	r16, 0xB5	; 181
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e3 5b       	subi	r30, 0xB3	; 179
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24
    1fd6:	de 01       	movw	r26, r28
    1fd8:	a9 5b       	subi	r26, 0xB9	; 185
    1fda:	bf 4f       	sbci	r27, 0xFF	; 255
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e5 5b       	subi	r30, 0xB5	; 181
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	8d 93       	st	X+, r24
    1fe8:	9c 93       	st	X, r25
    1fea:	fe 01       	movw	r30, r28
    1fec:	e9 5b       	subi	r30, 0xB9	; 185
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <main+0x54c>
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e9 5b       	subi	r30, 0xB9	; 185
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
		{
			_delay_ms(100);
			Local_s8Num1++;
    2002:	9e 01       	movw	r18, r28
    2004:	22 59       	subi	r18, 0x92	; 146
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	fe 01       	movw	r30, r28
    200a:	e2 59       	subi	r30, 0x92	; 146
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	a2 81       	ldd	r26, Z+2	; 0x02
    2014:	b3 81       	ldd	r27, Z+3	; 0x03
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	a1 1d       	adc	r26, r1
    201a:	b1 1d       	adc	r27, r1
    201c:	f9 01       	movw	r30, r18
    201e:	80 83       	st	Z, r24
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	a2 83       	std	Z+2, r26	; 0x02
    2024:	b3 83       	std	Z+3, r27	; 0x03
			if(Local_s8Num1>9)
    2026:	fe 01       	movw	r30, r28
    2028:	e2 59       	subi	r30, 0x92	; 146
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	a2 81       	ldd	r26, Z+2	; 0x02
    2032:	b3 81       	ldd	r27, Z+3	; 0x03
    2034:	8a 30       	cpi	r24, 0x0A	; 10
    2036:	91 05       	cpc	r25, r1
    2038:	a1 05       	cpc	r26, r1
    203a:	b1 05       	cpc	r27, r1
    203c:	44 f0       	brlt	.+16     	; 0x204e <main+0x5a6>
				{
					Local_s8Num1=0;
    203e:	fe 01       	movw	r30, r28
    2040:	e2 59       	subi	r30, 0x92	; 146
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	10 82       	st	Z, r1
    2046:	11 82       	std	Z+1, r1	; 0x01
    2048:	12 82       	std	Z+2, r1	; 0x02
    204a:	13 82       	std	Z+3, r1	; 0x03
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <main+0x5ce>
				}
			else if(Local_s8Num1<0)
    204e:	fe 01       	movw	r30, r28
    2050:	e2 59       	subi	r30, 0x92	; 146
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	91 81       	ldd	r25, Z+1	; 0x01
    2058:	a2 81       	ldd	r26, Z+2	; 0x02
    205a:	b3 81       	ldd	r27, Z+3	; 0x03
    205c:	bb 23       	and	r27, r27
    205e:	5c f4       	brge	.+22     	; 0x2076 <main+0x5ce>
			{
				Local_s8Num1=9;
    2060:	fe 01       	movw	r30, r28
    2062:	e2 59       	subi	r30, 0x92	; 146
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	89 e0       	ldi	r24, 0x09	; 9
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a0 e0       	ldi	r26, 0x00	; 0
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	80 83       	st	Z, r24
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	a2 83       	std	Z+2, r26	; 0x02
    2074:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
		if(Local_s8DownBitMode==0)
    2076:	fe 01       	movw	r30, r28
    2078:	e5 58       	subi	r30, 0x85	; 133
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	88 23       	and	r24, r24
    2080:	09 f0       	breq	.+2      	; 0x2084 <main+0x5dc>
    2082:	bf c0       	rjmp	.+382    	; 0x2202 <main+0x75a>
    2084:	fe 01       	movw	r30, r28
    2086:	ed 5b       	subi	r30, 0xBD	; 189
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a8 ec       	ldi	r26, 0xC8	; 200
    2090:	b2 e4       	ldi	r27, 0x42	; 66
    2092:	80 83       	st	Z, r24
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	a2 83       	std	Z+2, r26	; 0x02
    2098:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209a:	8e 01       	movw	r16, r28
    209c:	01 5c       	subi	r16, 0xC1	; 193
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	ed 5b       	subi	r30, 0xBD	; 189
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	55 e4       	ldi	r21, 0x45	; 69
    20b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c8:	fe 01       	movw	r30, r28
    20ca:	ff 96       	adiw	r30, 0x3f	; 63
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <main+0x646>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9e af       	std	Y+62, r25	; 0x3e
    20ea:	8d af       	std	Y+61, r24	; 0x3d
    20ec:	46 c0       	rjmp	.+140    	; 0x217a <main+0x6d2>
	else if (__tmp > 65535)
    20ee:	fe 01       	movw	r30, r28
    20f0:	ff 96       	adiw	r30, 0x3f	; 63
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	64 f5       	brge	.+88     	; 0x2162 <main+0x6ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	fe 01       	movw	r30, r28
    210c:	ed 5b       	subi	r30, 0xBD	; 189
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e af       	std	Y+62, r25	; 0x3e
    2136:	8d af       	std	Y+61, r24	; 0x3d
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <main+0x6b0>
    213a:	80 e9       	ldi	r24, 0x90	; 144
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	9c af       	std	Y+60, r25	; 0x3c
    2140:	8b af       	std	Y+59, r24	; 0x3b
    2142:	8b ad       	ldd	r24, Y+59	; 0x3b
    2144:	9c ad       	ldd	r25, Y+60	; 0x3c
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <main+0x69e>
    214a:	9c af       	std	Y+60, r25	; 0x3c
    214c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2150:	9e ad       	ldd	r25, Y+62	; 0x3e
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9e af       	std	Y+62, r25	; 0x3e
    2156:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	8d ad       	ldd	r24, Y+61	; 0x3d
    215a:	9e ad       	ldd	r25, Y+62	; 0x3e
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f7       	brne	.-38     	; 0x213a <main+0x692>
    2160:	16 c0       	rjmp	.+44     	; 0x218e <main+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	fe 01       	movw	r30, r28
    2164:	ff 96       	adiw	r30, 0x3f	; 63
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	9e af       	std	Y+62, r25	; 0x3e
    2178:	8d af       	std	Y+61, r24	; 0x3d
    217a:	8d ad       	ldd	r24, Y+61	; 0x3d
    217c:	9e ad       	ldd	r25, Y+62	; 0x3e
    217e:	9a af       	std	Y+58, r25	; 0x3a
    2180:	89 af       	std	Y+57, r24	; 0x39
    2182:	89 ad       	ldd	r24, Y+57	; 0x39
    2184:	9a ad       	ldd	r25, Y+58	; 0x3a
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <main+0x6de>
    218a:	9a af       	std	Y+58, r25	; 0x3a
    218c:	89 af       	std	Y+57, r24	; 0x39
		{
			_delay_ms(100);
			Local_s8Num1--;
    218e:	9e 01       	movw	r18, r28
    2190:	22 59       	subi	r18, 0x92	; 146
    2192:	3f 4f       	sbci	r19, 0xFF	; 255
    2194:	fe 01       	movw	r30, r28
    2196:	e2 59       	subi	r30, 0x92	; 146
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	a2 81       	ldd	r26, Z+2	; 0x02
    21a0:	b3 81       	ldd	r27, Z+3	; 0x03
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	a1 09       	sbc	r26, r1
    21a6:	b1 09       	sbc	r27, r1
    21a8:	f9 01       	movw	r30, r18
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	a2 83       	std	Z+2, r26	; 0x02
    21b0:	b3 83       	std	Z+3, r27	; 0x03
			if(Local_s8Num1>9)
    21b2:	fe 01       	movw	r30, r28
    21b4:	e2 59       	subi	r30, 0x92	; 146
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	a2 81       	ldd	r26, Z+2	; 0x02
    21be:	b3 81       	ldd	r27, Z+3	; 0x03
    21c0:	8a 30       	cpi	r24, 0x0A	; 10
    21c2:	91 05       	cpc	r25, r1
    21c4:	a1 05       	cpc	r26, r1
    21c6:	b1 05       	cpc	r27, r1
    21c8:	44 f0       	brlt	.+16     	; 0x21da <main+0x732>
				{
					Local_s8Num1=0;
    21ca:	fe 01       	movw	r30, r28
    21cc:	e2 59       	subi	r30, 0x92	; 146
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	10 82       	st	Z, r1
    21d2:	11 82       	std	Z+1, r1	; 0x01
    21d4:	12 82       	std	Z+2, r1	; 0x02
    21d6:	13 82       	std	Z+3, r1	; 0x03
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <main+0x75a>
				}
			else if(Local_s8Num1<0)
    21da:	fe 01       	movw	r30, r28
    21dc:	e2 59       	subi	r30, 0x92	; 146
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	a2 81       	ldd	r26, Z+2	; 0x02
    21e6:	b3 81       	ldd	r27, Z+3	; 0x03
    21e8:	bb 23       	and	r27, r27
    21ea:	5c f4       	brge	.+22     	; 0x2202 <main+0x75a>
			{
				Local_s8Num1=9;
    21ec:	fe 01       	movw	r30, r28
    21ee:	e2 59       	subi	r30, 0x92	; 146
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	89 e0       	ldi	r24, 0x09	; 9
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a0 e0       	ldi	r26, 0x00	; 0
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	80 83       	st	Z, r24
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	a2 83       	std	Z+2, r26	; 0x02
    2200:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
		CLCD_voidGoToXY(1,1);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    220a:	80 e2       	ldi	r24, 0x20	; 32
    220c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
		CLCD_voidGoToXY(2,1);
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	61 e0       	ldi	r22, 0x01	; 1
    2214:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2218:	80 e2       	ldi	r24, 0x20	; 32
    221a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
		CLCD_voidSendSpecialCharacter(Local_u8ArrowPattern,0,0,1);
    221e:	ce 01       	movw	r24, r28
    2220:	83 58       	subi	r24, 0x83	; 131
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	21 e0       	ldi	r18, 0x01	; 1
    222a:	0e 94 8f 08 	call	0x111e	; 0x111e <CLCD_voidSendSpecialCharacter>
    222e:	08 cd       	rjmp	.-1520   	; 0x1c40 <main+0x198>
	}
		else if(Local_u8EnterCounter==1)
    2230:	fe 01       	movw	r30, r28
    2232:	ed 59       	subi	r30, 0x9D	; 157
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	09 f0       	breq	.+2      	; 0x223e <main+0x796>
    223c:	70 c1       	rjmp	.+736    	; 0x251e <main+0xa76>
		{
			CLCD_voidGoToXY(1,0);
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(Local_u8Operator);
    2246:	fe 01       	movw	r30, r28
    2248:	e4 59       	subi	r30, 0x94	; 148
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN3,&Local_s8UpBitMode);
    2252:	9e 01       	movw	r18, r28
    2254:	26 58       	subi	r18, 0x86	; 134
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	63 e0       	ldi	r22, 0x03	; 3
    225c:	a9 01       	movw	r20, r18
    225e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DIO_u8GetPinValue>
			DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN4,&Local_s8DownBitMode);
    2262:	9e 01       	movw	r18, r28
    2264:	25 58       	subi	r18, 0x85	; 133
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	64 e0       	ldi	r22, 0x04	; 4
    226c:	a9 01       	movw	r20, r18
    226e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DIO_u8GetPinValue>
			if(Local_s8UpBitMode==0)
    2272:	fe 01       	movw	r30, r28
    2274:	e6 58       	subi	r30, 0x86	; 134
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	88 23       	and	r24, r24
    227c:	09 f0       	breq	.+2      	; 0x2280 <main+0x7d8>
    227e:	98 c0       	rjmp	.+304    	; 0x23b0 <main+0x908>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a8 e4       	ldi	r26, 0x48	; 72
    2286:	b3 e4       	ldi	r27, 0x43	; 67
    2288:	8d ab       	std	Y+53, r24	; 0x35
    228a:	9e ab       	std	Y+54, r25	; 0x36
    228c:	af ab       	std	Y+55, r26	; 0x37
    228e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	6d a9       	ldd	r22, Y+53	; 0x35
    2292:	7e a9       	ldd	r23, Y+54	; 0x36
    2294:	8f a9       	ldd	r24, Y+55	; 0x37
    2296:	98 ad       	ldd	r25, Y+56	; 0x38
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	55 e4       	ldi	r21, 0x45	; 69
    22a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	89 ab       	std	Y+49, r24	; 0x31
    22aa:	9a ab       	std	Y+50, r25	; 0x32
    22ac:	ab ab       	std	Y+51, r26	; 0x33
    22ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22b0:	69 a9       	ldd	r22, Y+49	; 0x31
    22b2:	7a a9       	ldd	r23, Y+50	; 0x32
    22b4:	8b a9       	ldd	r24, Y+51	; 0x33
    22b6:	9c a9       	ldd	r25, Y+52	; 0x34
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <main+0x82a>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	98 ab       	std	Y+48, r25	; 0x30
    22ce:	8f a7       	std	Y+47, r24	; 0x2f
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <main+0x8a8>
	else if (__tmp > 65535)
    22d2:	69 a9       	ldd	r22, Y+49	; 0x31
    22d4:	7a a9       	ldd	r23, Y+50	; 0x32
    22d6:	8b a9       	ldd	r24, Y+51	; 0x33
    22d8:	9c a9       	ldd	r25, Y+52	; 0x34
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <main+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	6d a9       	ldd	r22, Y+53	; 0x35
    22ec:	7e a9       	ldd	r23, Y+54	; 0x36
    22ee:	8f a9       	ldd	r24, Y+55	; 0x37
    22f0:	98 ad       	ldd	r25, Y+56	; 0x38
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	98 ab       	std	Y+48, r25	; 0x30
    2310:	8f a7       	std	Y+47, r24	; 0x2f
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <main+0x88a>
    2314:	80 e9       	ldi	r24, 0x90	; 144
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	9e a7       	std	Y+46, r25	; 0x2e
    231a:	8d a7       	std	Y+45, r24	; 0x2d
    231c:	8d a5       	ldd	r24, Y+45	; 0x2d
    231e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <main+0x878>
    2324:	9e a7       	std	Y+46, r25	; 0x2e
    2326:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8f a5       	ldd	r24, Y+47	; 0x2f
    232a:	98 a9       	ldd	r25, Y+48	; 0x30
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	98 ab       	std	Y+48, r25	; 0x30
    2330:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8f a5       	ldd	r24, Y+47	; 0x2f
    2334:	98 a9       	ldd	r25, Y+48	; 0x30
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <main+0x86c>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <main+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	69 a9       	ldd	r22, Y+49	; 0x31
    233e:	7a a9       	ldd	r23, Y+50	; 0x32
    2340:	8b a9       	ldd	r24, Y+51	; 0x33
    2342:	9c a9       	ldd	r25, Y+52	; 0x34
    2344:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	98 ab       	std	Y+48, r25	; 0x30
    234e:	8f a7       	std	Y+47, r24	; 0x2f
    2350:	8f a5       	ldd	r24, Y+47	; 0x2f
    2352:	98 a9       	ldd	r25, Y+48	; 0x30
    2354:	9c a7       	std	Y+44, r25	; 0x2c
    2356:	8b a7       	std	Y+43, r24	; 0x2b
    2358:	8b a5       	ldd	r24, Y+43	; 0x2b
    235a:	9c a5       	ldd	r25, Y+44	; 0x2c
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <main+0x8b4>
    2360:	9c a7       	std	Y+44, r25	; 0x2c
    2362:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms(200);
				Local_s8OperatorArrIndex++;
    2364:	de 01       	movw	r26, r28
    2366:	a3 59       	subi	r26, 0x93	; 147
    2368:	bf 4f       	sbci	r27, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e3 59       	subi	r30, 0x93	; 147
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	8c 93       	st	X, r24
				if(Local_s8OperatorArrIndex>3)
    2376:	fe 01       	movw	r30, r28
    2378:	e3 59       	subi	r30, 0x93	; 147
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	84 30       	cpi	r24, 0x04	; 4
    2380:	24 f0       	brlt	.+8      	; 0x238a <main+0x8e2>
					{
						Local_s8OperatorArrIndex=0;
    2382:	fe 01       	movw	r30, r28
    2384:	e3 59       	subi	r30, 0x93	; 147
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	10 82       	st	Z, r1
					}
				Local_u8Operator=Local_charOperatorArray[Local_s8OperatorArrIndex];
    238a:	fe 01       	movw	r30, r28
    238c:	e3 59       	subi	r30, 0x93	; 147
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	28 2f       	mov	r18, r24
    2394:	33 27       	eor	r19, r19
    2396:	27 fd       	sbrc	r18, 7
    2398:	30 95       	com	r19
    239a:	de 01       	movw	r26, r28
    239c:	a4 59       	subi	r26, 0x94	; 148
    239e:	bf 4f       	sbci	r27, 0xFF	; 255
    23a0:	ce 01       	movw	r24, r28
    23a2:	8e 58       	subi	r24, 0x8E	; 142
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	fc 01       	movw	r30, r24
    23a8:	e2 0f       	add	r30, r18
    23aa:	f3 1f       	adc	r31, r19
    23ac:	80 81       	ld	r24, Z
    23ae:	8c 93       	st	X, r24
			}
			if(Local_s8DownBitMode==0)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e5 58       	subi	r30, 0x85	; 133
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	88 23       	and	r24, r24
    23ba:	09 f0       	breq	.+2      	; 0x23be <main+0x916>
    23bc:	99 c0       	rjmp	.+306    	; 0x24f0 <main+0xa48>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a8 ec       	ldi	r26, 0xC8	; 200
    23c4:	b2 e4       	ldi	r27, 0x42	; 66
    23c6:	8f a3       	std	Y+39, r24	; 0x27
    23c8:	98 a7       	std	Y+40, r25	; 0x28
    23ca:	a9 a7       	std	Y+41, r26	; 0x29
    23cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ce:	6f a1       	ldd	r22, Y+39	; 0x27
    23d0:	78 a5       	ldd	r23, Y+40	; 0x28
    23d2:	89 a5       	ldd	r24, Y+41	; 0x29
    23d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a e7       	ldi	r20, 0x7A	; 122
    23dc:	55 e4       	ldi	r21, 0x45	; 69
    23de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	8b a3       	std	Y+35, r24	; 0x23
    23e8:	9c a3       	std	Y+36, r25	; 0x24
    23ea:	ad a3       	std	Y+37, r26	; 0x25
    23ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23ee:	6b a1       	ldd	r22, Y+35	; 0x23
    23f0:	7c a1       	ldd	r23, Y+36	; 0x24
    23f2:	8d a1       	ldd	r24, Y+37	; 0x25
    23f4:	9e a1       	ldd	r25, Y+38	; 0x26
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	2c f4       	brge	.+10     	; 0x2410 <main+0x968>
		__ticks = 1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9a a3       	std	Y+34, r25	; 0x22
    240c:	89 a3       	std	Y+33, r24	; 0x21
    240e:	3f c0       	rjmp	.+126    	; 0x248e <main+0x9e6>
	else if (__tmp > 65535)
    2410:	6b a1       	ldd	r22, Y+35	; 0x23
    2412:	7c a1       	ldd	r23, Y+36	; 0x24
    2414:	8d a1       	ldd	r24, Y+37	; 0x25
    2416:	9e a1       	ldd	r25, Y+38	; 0x26
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	3f ef       	ldi	r19, 0xFF	; 255
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	57 e4       	ldi	r21, 0x47	; 71
    2420:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2424:	18 16       	cp	r1, r24
    2426:	4c f5       	brge	.+82     	; 0x247a <main+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2428:	6f a1       	ldd	r22, Y+39	; 0x27
    242a:	78 a5       	ldd	r23, Y+40	; 0x28
    242c:	89 a5       	ldd	r24, Y+41	; 0x29
    242e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e2       	ldi	r20, 0x20	; 32
    2436:	51 e4       	ldi	r21, 0x41	; 65
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9a a3       	std	Y+34, r25	; 0x22
    244e:	89 a3       	std	Y+33, r24	; 0x21
    2450:	0f c0       	rjmp	.+30     	; 0x2470 <main+0x9c8>
    2452:	80 e9       	ldi	r24, 0x90	; 144
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	98 a3       	std	Y+32, r25	; 0x20
    2458:	8f 8f       	std	Y+31, r24	; 0x1f
    245a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    245c:	98 a1       	ldd	r25, Y+32	; 0x20
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <main+0x9b6>
    2462:	98 a3       	std	Y+32, r25	; 0x20
    2464:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2466:	89 a1       	ldd	r24, Y+33	; 0x21
    2468:	9a a1       	ldd	r25, Y+34	; 0x22
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	9a a3       	std	Y+34, r25	; 0x22
    246e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2470:	89 a1       	ldd	r24, Y+33	; 0x21
    2472:	9a a1       	ldd	r25, Y+34	; 0x22
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	69 f7       	brne	.-38     	; 0x2452 <main+0x9aa>
    2478:	14 c0       	rjmp	.+40     	; 0x24a2 <main+0x9fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247a:	6b a1       	ldd	r22, Y+35	; 0x23
    247c:	7c a1       	ldd	r23, Y+36	; 0x24
    247e:	8d a1       	ldd	r24, Y+37	; 0x25
    2480:	9e a1       	ldd	r25, Y+38	; 0x26
    2482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9a a3       	std	Y+34, r25	; 0x22
    248c:	89 a3       	std	Y+33, r24	; 0x21
    248e:	89 a1       	ldd	r24, Y+33	; 0x21
    2490:	9a a1       	ldd	r25, Y+34	; 0x22
    2492:	9e 8f       	std	Y+30, r25	; 0x1e
    2494:	8d 8f       	std	Y+29, r24	; 0x1d
    2496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2498:	9e 8d       	ldd	r25, Y+30	; 0x1e
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <main+0x9f2>
    249e:	9e 8f       	std	Y+30, r25	; 0x1e
    24a0:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(100);
				Local_s8OperatorArrIndex--;
    24a2:	de 01       	movw	r26, r28
    24a4:	a3 59       	subi	r26, 0x93	; 147
    24a6:	bf 4f       	sbci	r27, 0xFF	; 255
    24a8:	fe 01       	movw	r30, r28
    24aa:	e3 59       	subi	r30, 0x93	; 147
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	81 50       	subi	r24, 0x01	; 1
    24b2:	8c 93       	st	X, r24
				if(Local_s8OperatorArrIndex<0)
    24b4:	fe 01       	movw	r30, r28
    24b6:	e3 59       	subi	r30, 0x93	; 147
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <main+0xa22>
					{
						Local_s8OperatorArrIndex=3;
    24c0:	fe 01       	movw	r30, r28
    24c2:	e3 59       	subi	r30, 0x93	; 147
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	80 83       	st	Z, r24
					}
				Local_u8Operator=Local_charOperatorArray[Local_s8OperatorArrIndex];
    24ca:	fe 01       	movw	r30, r28
    24cc:	e3 59       	subi	r30, 0x93	; 147
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	28 2f       	mov	r18, r24
    24d4:	33 27       	eor	r19, r19
    24d6:	27 fd       	sbrc	r18, 7
    24d8:	30 95       	com	r19
    24da:	de 01       	movw	r26, r28
    24dc:	a4 59       	subi	r26, 0x94	; 148
    24de:	bf 4f       	sbci	r27, 0xFF	; 255
    24e0:	ce 01       	movw	r24, r28
    24e2:	8e 58       	subi	r24, 0x8E	; 142
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	fc 01       	movw	r30, r24
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	80 81       	ld	r24, Z
    24ee:	8c 93       	st	X, r24
			}
			CLCD_voidGoToXY(0,1);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    24f8:	80 e2       	ldi	r24, 0x20	; 32
    24fa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidGoToXY(2,1);
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2506:	80 e2       	ldi	r24, 0x20	; 32
    2508:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendSpecialCharacter(Local_u8ArrowPattern,0,1,1);
    250c:	ce 01       	movw	r24, r28
    250e:	83 58       	subi	r24, 0x83	; 131
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	21 e0       	ldi	r18, 0x01	; 1
    2518:	0e 94 8f 08 	call	0x111e	; 0x111e <CLCD_voidSendSpecialCharacter>
    251c:	91 cb       	rjmp	.-2270   	; 0x1c40 <main+0x198>

		}
		else if(Local_u8EnterCounter==2)
    251e:	fe 01       	movw	r30, r28
    2520:	ed 59       	subi	r30, 0x9D	; 157
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	82 30       	cpi	r24, 0x02	; 2
    2528:	09 f0       	breq	.+2      	; 0x252c <main+0xa84>
    252a:	b8 c1       	rjmp	.+880    	; 0x289c <main+0xdf4>
		{

			CLCD_voidGoToXY(2,0);
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(Local_s8Num2);
    2534:	fe 01       	movw	r30, r28
    2536:	e8 59       	subi	r30, 0x98	; 152
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	a2 81       	ldd	r26, Z+2	; 0x02
    2540:	b3 81       	ldd	r27, Z+3	; 0x03
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN3,&Local_s8UpBitMode);
    254a:	9e 01       	movw	r18, r28
    254c:	26 58       	subi	r18, 0x86	; 134
    254e:	3f 4f       	sbci	r19, 0xFF	; 255
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	63 e0       	ldi	r22, 0x03	; 3
    2554:	a9 01       	movw	r20, r18
    2556:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DIO_u8GetPinValue>
			DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN4,&Local_s8DownBitMode);
    255a:	9e 01       	movw	r18, r28
    255c:	25 58       	subi	r18, 0x85	; 133
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	64 e0       	ldi	r22, 0x04	; 4
    2564:	a9 01       	movw	r20, r18
    2566:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DIO_u8GetPinValue>
			if(Local_s8UpBitMode==0)
    256a:	fe 01       	movw	r30, r28
    256c:	e6 58       	subi	r30, 0x86	; 134
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	88 23       	and	r24, r24
    2574:	09 f0       	breq	.+2      	; 0x2578 <main+0xad0>
    2576:	ac c0       	rjmp	.+344    	; 0x26d0 <main+0xc28>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a8 ec       	ldi	r26, 0xC8	; 200
    257e:	b2 e4       	ldi	r27, 0x42	; 66
    2580:	89 8f       	std	Y+25, r24	; 0x19
    2582:	9a 8f       	std	Y+26, r25	; 0x1a
    2584:	ab 8f       	std	Y+27, r26	; 0x1b
    2586:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	69 8d       	ldd	r22, Y+25	; 0x19
    258a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a e7       	ldi	r20, 0x7A	; 122
    2596:	55 e4       	ldi	r21, 0x45	; 69
    2598:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8d 8b       	std	Y+21, r24	; 0x15
    25a2:	9e 8b       	std	Y+22, r25	; 0x16
    25a4:	af 8b       	std	Y+23, r26	; 0x17
    25a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25a8:	6d 89       	ldd	r22, Y+21	; 0x15
    25aa:	7e 89       	ldd	r23, Y+22	; 0x16
    25ac:	8f 89       	ldd	r24, Y+23	; 0x17
    25ae:	98 8d       	ldd	r25, Y+24	; 0x18
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <main+0xb22>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	3f c0       	rjmp	.+126    	; 0x2648 <main+0xba0>
	else if (__tmp > 65535)
    25ca:	6d 89       	ldd	r22, Y+21	; 0x15
    25cc:	7e 89       	ldd	r23, Y+22	; 0x16
    25ce:	8f 89       	ldd	r24, Y+23	; 0x17
    25d0:	98 8d       	ldd	r25, Y+24	; 0x18
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	3f ef       	ldi	r19, 0xFF	; 255
    25d6:	4f e7       	ldi	r20, 0x7F	; 127
    25d8:	57 e4       	ldi	r21, 0x47	; 71
    25da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25de:	18 16       	cp	r1, r24
    25e0:	4c f5       	brge	.+82     	; 0x2634 <main+0xb8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e2:	69 8d       	ldd	r22, Y+25	; 0x19
    25e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	8b 8b       	std	Y+19, r24	; 0x13
    260a:	0f c0       	rjmp	.+30     	; 0x262a <main+0xb82>
    260c:	80 e9       	ldi	r24, 0x90	; 144
    260e:	91 e0       	ldi	r25, 0x01	; 1
    2610:	9a 8b       	std	Y+18, r25	; 0x12
    2612:	89 8b       	std	Y+17, r24	; 0x11
    2614:	89 89       	ldd	r24, Y+17	; 0x11
    2616:	9a 89       	ldd	r25, Y+18	; 0x12
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <main+0xb70>
    261c:	9a 8b       	std	Y+18, r25	; 0x12
    261e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	8b 89       	ldd	r24, Y+19	; 0x13
    2622:	9c 89       	ldd	r25, Y+20	; 0x14
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	9c 8b       	std	Y+20, r25	; 0x14
    2628:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	8b 89       	ldd	r24, Y+19	; 0x13
    262c:	9c 89       	ldd	r25, Y+20	; 0x14
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	69 f7       	brne	.-38     	; 0x260c <main+0xb64>
    2632:	14 c0       	rjmp	.+40     	; 0x265c <main+0xbb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
    2648:	8b 89       	ldd	r24, Y+19	; 0x13
    264a:	9c 89       	ldd	r25, Y+20	; 0x14
    264c:	98 8b       	std	Y+16, r25	; 0x10
    264e:	8f 87       	std	Y+15, r24	; 0x0f
    2650:	8f 85       	ldd	r24, Y+15	; 0x0f
    2652:	98 89       	ldd	r25, Y+16	; 0x10
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <main+0xbac>
    2658:	98 8b       	std	Y+16, r25	; 0x10
    265a:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(100);
				Local_s8Num2++;
    265c:	9e 01       	movw	r18, r28
    265e:	28 59       	subi	r18, 0x98	; 152
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	fe 01       	movw	r30, r28
    2664:	e8 59       	subi	r30, 0x98	; 152
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	a2 81       	ldd	r26, Z+2	; 0x02
    266e:	b3 81       	ldd	r27, Z+3	; 0x03
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	a1 1d       	adc	r26, r1
    2674:	b1 1d       	adc	r27, r1
    2676:	f9 01       	movw	r30, r18
    2678:	80 83       	st	Z, r24
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	a2 83       	std	Z+2, r26	; 0x02
    267e:	b3 83       	std	Z+3, r27	; 0x03
				if(Local_s8Num2>9)
    2680:	fe 01       	movw	r30, r28
    2682:	e8 59       	subi	r30, 0x98	; 152
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	a2 81       	ldd	r26, Z+2	; 0x02
    268c:	b3 81       	ldd	r27, Z+3	; 0x03
    268e:	8a 30       	cpi	r24, 0x0A	; 10
    2690:	91 05       	cpc	r25, r1
    2692:	a1 05       	cpc	r26, r1
    2694:	b1 05       	cpc	r27, r1
    2696:	44 f0       	brlt	.+16     	; 0x26a8 <main+0xc00>
					{
						Local_s8Num2=0;
    2698:	fe 01       	movw	r30, r28
    269a:	e8 59       	subi	r30, 0x98	; 152
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	10 82       	st	Z, r1
    26a0:	11 82       	std	Z+1, r1	; 0x01
    26a2:	12 82       	std	Z+2, r1	; 0x02
    26a4:	13 82       	std	Z+3, r1	; 0x03
    26a6:	14 c0       	rjmp	.+40     	; 0x26d0 <main+0xc28>
					}
				else if(Local_s8Num2<0)
    26a8:	fe 01       	movw	r30, r28
    26aa:	e8 59       	subi	r30, 0x98	; 152
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 81       	ld	r24, Z
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	a2 81       	ldd	r26, Z+2	; 0x02
    26b4:	b3 81       	ldd	r27, Z+3	; 0x03
    26b6:	bb 23       	and	r27, r27
    26b8:	5c f4       	brge	.+22     	; 0x26d0 <main+0xc28>
				{
					Local_s8Num2=9;
    26ba:	fe 01       	movw	r30, r28
    26bc:	e8 59       	subi	r30, 0x98	; 152
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	89 e0       	ldi	r24, 0x09	; 9
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e0       	ldi	r26, 0x00	; 0
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	80 83       	st	Z, r24
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	a2 83       	std	Z+2, r26	; 0x02
    26ce:	b3 83       	std	Z+3, r27	; 0x03
				}
			}
			if(Local_s8DownBitMode==0)
    26d0:	fe 01       	movw	r30, r28
    26d2:	e5 58       	subi	r30, 0x85	; 133
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	88 23       	and	r24, r24
    26da:	09 f0       	breq	.+2      	; 0x26de <main+0xc36>
    26dc:	ac c0       	rjmp	.+344    	; 0x2836 <main+0xd8e>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a8 ec       	ldi	r26, 0xC8	; 200
    26e4:	b2 e4       	ldi	r27, 0x42	; 66
    26e6:	8b 87       	std	Y+11, r24	; 0x0b
    26e8:	9c 87       	std	Y+12, r25	; 0x0c
    26ea:	ad 87       	std	Y+13, r26	; 0x0d
    26ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a e7       	ldi	r20, 0x7A	; 122
    26fc:	55 e4       	ldi	r21, 0x45	; 69
    26fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8f 83       	std	Y+7, r24	; 0x07
    2708:	98 87       	std	Y+8, r25	; 0x08
    270a:	a9 87       	std	Y+9, r26	; 0x09
    270c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	2c f4       	brge	.+10     	; 0x2730 <main+0xc88>
		__ticks = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	3f c0       	rjmp	.+126    	; 0x27ae <main+0xd06>
	else if (__tmp > 65535)
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	78 85       	ldd	r23, Y+8	; 0x08
    2734:	89 85       	ldd	r24, Y+9	; 0x09
    2736:	9a 85       	ldd	r25, Y+10	; 0x0a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	4c f5       	brge	.+82     	; 0x279a <main+0xcf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	6b 85       	ldd	r22, Y+11	; 0x0b
    274a:	7c 85       	ldd	r23, Y+12	; 0x0c
    274c:	8d 85       	ldd	r24, Y+13	; 0x0d
    274e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	51 e4       	ldi	r21, 0x41	; 65
    2758:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	0f c0       	rjmp	.+30     	; 0x2790 <main+0xce8>
    2772:	80 e9       	ldi	r24, 0x90	; 144
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	8b 83       	std	Y+3, r24	; 0x03
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <main+0xcd6>
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	8d 81       	ldd	r24, Y+5	; 0x05
    2792:	9e 81       	ldd	r25, Y+6	; 0x06
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	69 f7       	brne	.-38     	; 0x2772 <main+0xcca>
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <main+0xd1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <main+0xd12>
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(100);
				Local_s8Num2--;
    27c2:	9e 01       	movw	r18, r28
    27c4:	28 59       	subi	r18, 0x98	; 152
    27c6:	3f 4f       	sbci	r19, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	e8 59       	subi	r30, 0x98	; 152
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	a2 81       	ldd	r26, Z+2	; 0x02
    27d4:	b3 81       	ldd	r27, Z+3	; 0x03
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	a1 09       	sbc	r26, r1
    27da:	b1 09       	sbc	r27, r1
    27dc:	f9 01       	movw	r30, r18
    27de:	80 83       	st	Z, r24
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	a2 83       	std	Z+2, r26	; 0x02
    27e4:	b3 83       	std	Z+3, r27	; 0x03
				if(Local_s8Num2>9)
    27e6:	fe 01       	movw	r30, r28
    27e8:	e8 59       	subi	r30, 0x98	; 152
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	a2 81       	ldd	r26, Z+2	; 0x02
    27f2:	b3 81       	ldd	r27, Z+3	; 0x03
    27f4:	8a 30       	cpi	r24, 0x0A	; 10
    27f6:	91 05       	cpc	r25, r1
    27f8:	a1 05       	cpc	r26, r1
    27fa:	b1 05       	cpc	r27, r1
    27fc:	44 f0       	brlt	.+16     	; 0x280e <main+0xd66>
					{
						Local_s8Num2=0;
    27fe:	fe 01       	movw	r30, r28
    2800:	e8 59       	subi	r30, 0x98	; 152
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	10 82       	st	Z, r1
    2806:	11 82       	std	Z+1, r1	; 0x01
    2808:	12 82       	std	Z+2, r1	; 0x02
    280a:	13 82       	std	Z+3, r1	; 0x03
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <main+0xd8e>
					}
				else if(Local_s8Num2<0)
    280e:	fe 01       	movw	r30, r28
    2810:	e8 59       	subi	r30, 0x98	; 152
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	a2 81       	ldd	r26, Z+2	; 0x02
    281a:	b3 81       	ldd	r27, Z+3	; 0x03
    281c:	bb 23       	and	r27, r27
    281e:	5c f4       	brge	.+22     	; 0x2836 <main+0xd8e>
				{
					Local_s8Num2=9;
    2820:	fe 01       	movw	r30, r28
    2822:	e8 59       	subi	r30, 0x98	; 152
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	89 e0       	ldi	r24, 0x09	; 9
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	a0 e0       	ldi	r26, 0x00	; 0
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	80 83       	st	Z, r24
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	a2 83       	std	Z+2, r26	; 0x02
    2834:	b3 83       	std	Z+3, r27	; 0x03
				}
			}
			if(Local_u8Operator=='/')
    2836:	fe 01       	movw	r30, r28
    2838:	e4 59       	subi	r30, 0x94	; 148
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	8f 32       	cpi	r24, 0x2F	; 47
    2840:	b1 f4       	brne	.+44     	; 0x286e <main+0xdc6>
			{
				if(Local_s8Num2==0)
    2842:	fe 01       	movw	r30, r28
    2844:	e8 59       	subi	r30, 0x98	; 152
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	a2 81       	ldd	r26, Z+2	; 0x02
    284e:	b3 81       	ldd	r27, Z+3	; 0x03
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	a1 05       	cpc	r26, r1
    2854:	b1 05       	cpc	r27, r1
    2856:	59 f4       	brne	.+22     	; 0x286e <main+0xdc6>
				{
					Local_s8Num2=1;
    2858:	fe 01       	movw	r30, r28
    285a:	e8 59       	subi	r30, 0x98	; 152
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a0 e0       	ldi	r26, 0x00	; 0
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	80 83       	st	Z, r24
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	a2 83       	std	Z+2, r26	; 0x02
    286c:	b3 83       	std	Z+3, r27	; 0x03
				}

			}
			CLCD_voidGoToXY(0,1);
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	61 e0       	ldi	r22, 0x01	; 1
    2872:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2876:	80 e2       	ldi	r24, 0x20	; 32
    2878:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidGoToXY(1,1);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2884:	80 e2       	ldi	r24, 0x20	; 32
    2886:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidSendSpecialCharacter(Local_u8ArrowPattern,0,2,1);
    288a:	ce 01       	movw	r24, r28
    288c:	83 58       	subi	r24, 0x83	; 131
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	42 e0       	ldi	r20, 0x02	; 2
    2894:	21 e0       	ldi	r18, 0x01	; 1
    2896:	0e 94 8f 08 	call	0x111e	; 0x111e <CLCD_voidSendSpecialCharacter>
    289a:	d2 c9       	rjmp	.-3164   	; 0x1c40 <main+0x198>

		}
		else if(Local_u8EnterCounter==3)
    289c:	fe 01       	movw	r30, r28
    289e:	ed 59       	subi	r30, 0x9D	; 157
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	83 30       	cpi	r24, 0x03	; 3
    28a6:	09 f0       	breq	.+2      	; 0x28aa <main+0xe02>
    28a8:	e3 c1       	rjmp	.+966    	; 0x2c70 <main+0x11c8>
		{
			CLCD_voidGoToXY(3,0);
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData('=');
    28b2:	8d e3       	ldi	r24, 0x3D	; 61
    28b4:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			if(Local_u8Operator=='/')
    28b8:	fe 01       	movw	r30, r28
    28ba:	e4 59       	subi	r30, 0x94	; 148
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	8f 32       	cpi	r24, 0x2F	; 47
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <main+0xe1e>
    28c4:	4e c1       	rjmp	.+668    	; 0x2b62 <main+0x10ba>
			{
				if(Local_s8Num1/Local_s8Num2!=0)
    28c6:	fe 01       	movw	r30, r28
    28c8:	e2 59       	subi	r30, 0x92	; 146
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	9e 01       	movw	r18, r28
    28ce:	28 59       	subi	r18, 0x98	; 152
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	a2 81       	ldd	r26, Z+2	; 0x02
    28d8:	b3 81       	ldd	r27, Z+3	; 0x03
    28da:	f9 01       	movw	r30, r18
    28dc:	20 81       	ld	r18, Z
    28de:	31 81       	ldd	r19, Z+1	; 0x01
    28e0:	42 81       	ldd	r20, Z+2	; 0x02
    28e2:	53 81       	ldd	r21, Z+3	; 0x03
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodsi4>
    28ec:	da 01       	movw	r26, r20
    28ee:	c9 01       	movw	r24, r18
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	a1 05       	cpc	r26, r1
    28f4:	b1 05       	cpc	r27, r1
    28f6:	09 f4       	brne	.+2      	; 0x28fa <main+0xe52>
    28f8:	b2 c0       	rjmp	.+356    	; 0x2a5e <main+0xfb6>
				{
				Local_s32Result=(((Local_s8Num1)*100)/Local_s8Num2);
    28fa:	fe 01       	movw	r30, r28
    28fc:	e2 59       	subi	r30, 0x92	; 146
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	a2 81       	ldd	r26, Z+2	; 0x02
    2906:	b3 81       	ldd	r27, Z+3	; 0x03
    2908:	24 e6       	ldi	r18, 0x64	; 100
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsi3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	fe 01       	movw	r30, r28
    291e:	e8 59       	subi	r30, 0x98	; 152
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	20 81       	ld	r18, Z
    2924:	31 81       	ldd	r19, Z+1	; 0x01
    2926:	42 81       	ldd	r20, Z+2	; 0x02
    2928:	53 81       	ldd	r21, Z+3	; 0x03
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodsi4>
    2932:	da 01       	movw	r26, r20
    2934:	c9 01       	movw	r24, r18
    2936:	fe 01       	movw	r30, r28
    2938:	eb 59       	subi	r30, 0x9B	; 155
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	34 c0       	rjmp	.+104    	; 0x29aa <main+0xf02>
				while(Local_s32Result>0)
				{
					Local_chDivisionRes[Local_s8DivisionCounter]=Local_s32Result%10;
    2942:	fe 01       	movw	r30, r28
    2944:	ec 59       	subi	r30, 0x9C	; 156
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	08 2f       	mov	r16, r24
    294c:	11 27       	eor	r17, r17
    294e:	07 fd       	sbrc	r16, 7
    2950:	10 95       	com	r17
    2952:	fe 01       	movw	r30, r28
    2954:	eb 59       	subi	r30, 0x9B	; 155
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	2a e0       	ldi	r18, 0x0A	; 10
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	b9 01       	movw	r22, r18
    2962:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    2966:	28 2f       	mov	r18, r24
    2968:	ce 01       	movw	r24, r28
    296a:	8a 58       	subi	r24, 0x8A	; 138
    296c:	9f 4f       	sbci	r25, 0xFF	; 255
    296e:	fc 01       	movw	r30, r24
    2970:	e0 0f       	add	r30, r16
    2972:	f1 1f       	adc	r31, r17
    2974:	20 83       	st	Z, r18
					Local_s8DivisionCounter++;
    2976:	de 01       	movw	r26, r28
    2978:	ac 59       	subi	r26, 0x9C	; 156
    297a:	bf 4f       	sbci	r27, 0xFF	; 255
    297c:	fe 01       	movw	r30, r28
    297e:	ec 59       	subi	r30, 0x9C	; 156
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	8c 93       	st	X, r24
					Local_s32Result/=10;
    2988:	8e 01       	movw	r16, r28
    298a:	0b 59       	subi	r16, 0x9B	; 155
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	eb 59       	subi	r30, 0x9B	; 155
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	2a e0       	ldi	r18, 0x0A	; 10
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	b9 01       	movw	r22, r18
    299e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    29a2:	cb 01       	movw	r24, r22
    29a4:	f8 01       	movw	r30, r16
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
			if(Local_u8Operator=='/')
			{
				if(Local_s8Num1/Local_s8Num2!=0)
				{
				Local_s32Result=(((Local_s8Num1)*100)/Local_s8Num2);
				while(Local_s32Result>0)
    29aa:	fe 01       	movw	r30, r28
    29ac:	eb 59       	subi	r30, 0x9B	; 155
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	29 f6       	brne	.-118    	; 0x2942 <main+0xe9a>
				{
					Local_chDivisionRes[Local_s8DivisionCounter]=Local_s32Result%10;
					Local_s8DivisionCounter++;
					Local_s32Result/=10;
				}
				CLCD_voidSendNumber(Local_chDivisionRes[Local_s8DivisionCounter-1]);
    29b8:	fe 01       	movw	r30, r28
    29ba:	ec 59       	subi	r30, 0x9C	; 156
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	99 27       	eor	r25, r25
    29c2:	87 fd       	sbrc	r24, 7
    29c4:	90 95       	com	r25
    29c6:	9c 01       	movw	r18, r24
    29c8:	21 50       	subi	r18, 0x01	; 1
    29ca:	30 40       	sbci	r19, 0x00	; 0
    29cc:	ce 01       	movw	r24, r28
    29ce:	8a 58       	subi	r24, 0x8A	; 138
    29d0:	9f 4f       	sbci	r25, 0xFF	; 255
    29d2:	fc 01       	movw	r30, r24
    29d4:	e2 0f       	add	r30, r18
    29d6:	f3 1f       	adc	r31, r19
    29d8:	80 81       	ld	r24, Z
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	a0 e0       	ldi	r26, 0x00	; 0
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
				CLCD_voidSendData('.');
    29ea:	8e e2       	ldi	r24, 0x2E	; 46
    29ec:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
				CLCD_voidSendNumber(Local_chDivisionRes[Local_s8DivisionCounter-2]);
    29f0:	fe 01       	movw	r30, r28
    29f2:	ec 59       	subi	r30, 0x9C	; 156
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	99 27       	eor	r25, r25
    29fa:	87 fd       	sbrc	r24, 7
    29fc:	90 95       	com	r25
    29fe:	9c 01       	movw	r18, r24
    2a00:	22 50       	subi	r18, 0x02	; 2
    2a02:	30 40       	sbci	r19, 0x00	; 0
    2a04:	ce 01       	movw	r24, r28
    2a06:	8a 58       	subi	r24, 0x8A	; 138
    2a08:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	e2 0f       	add	r30, r18
    2a0e:	f3 1f       	adc	r31, r19
    2a10:	80 81       	ld	r24, Z
    2a12:	88 2f       	mov	r24, r24
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a0 e0       	ldi	r26, 0x00	; 0
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
				CLCD_voidSendNumber(Local_chDivisionRes[Local_s8DivisionCounter-3]);
    2a22:	fe 01       	movw	r30, r28
    2a24:	ec 59       	subi	r30, 0x9C	; 156
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	99 27       	eor	r25, r25
    2a2c:	87 fd       	sbrc	r24, 7
    2a2e:	90 95       	com	r25
    2a30:	9c 01       	movw	r18, r24
    2a32:	23 50       	subi	r18, 0x03	; 3
    2a34:	30 40       	sbci	r19, 0x00	; 0
    2a36:	ce 01       	movw	r24, r28
    2a38:	8a 58       	subi	r24, 0x8A	; 138
    2a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	e2 0f       	add	r30, r18
    2a40:	f3 1f       	adc	r31, r19
    2a42:	80 81       	ld	r24, Z
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 e0       	ldi	r26, 0x00	; 0
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
				Local_s8DivisionCounter=0;
    2a54:	fe 01       	movw	r30, r28
    2a56:	ec 59       	subi	r30, 0x9C	; 156
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	10 82       	st	Z, r1
    2a5c:	f2 c0       	rjmp	.+484    	; 0x2c42 <main+0x119a>
				}
				else
				{
					Local_s32Result=(((Local_s8Num1)*100)/Local_s8Num2);
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e2 59       	subi	r30, 0x92	; 146
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	a2 81       	ldd	r26, Z+2	; 0x02
    2a6a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a6c:	24 e6       	ldi	r18, 0x64	; 100
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsi3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	fe 01       	movw	r30, r28
    2a82:	e8 59       	subi	r30, 0x98	; 152
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	20 81       	ld	r18, Z
    2a88:	31 81       	ldd	r19, Z+1	; 0x01
    2a8a:	42 81       	ldd	r20, Z+2	; 0x02
    2a8c:	53 81       	ldd	r21, Z+3	; 0x03
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__divmodsi4>
    2a96:	da 01       	movw	r26, r20
    2a98:	c9 01       	movw	r24, r18
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	eb 59       	subi	r30, 0x9B	; 155
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	34 c0       	rjmp	.+104    	; 0x2b0e <main+0x1066>
					while(Local_s32Result>0)
					{
						Local_chDivisionRes[Local_s8DivisionCounter]=Local_s32Result%10;
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ec 59       	subi	r30, 0x9C	; 156
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	08 2f       	mov	r16, r24
    2ab0:	11 27       	eor	r17, r17
    2ab2:	07 fd       	sbrc	r16, 7
    2ab4:	10 95       	com	r17
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	eb 59       	subi	r30, 0x9B	; 155
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 81       	ld	r24, Z
    2abe:	91 81       	ldd	r25, Z+1	; 0x01
    2ac0:	2a e0       	ldi	r18, 0x0A	; 10
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	b9 01       	movw	r22, r18
    2ac6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    2aca:	28 2f       	mov	r18, r24
    2acc:	ce 01       	movw	r24, r28
    2ace:	8a 58       	subi	r24, 0x8A	; 138
    2ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e0 0f       	add	r30, r16
    2ad6:	f1 1f       	adc	r31, r17
    2ad8:	20 83       	st	Z, r18
						Local_s8DivisionCounter++;
    2ada:	de 01       	movw	r26, r28
    2adc:	ac 59       	subi	r26, 0x9C	; 156
    2ade:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ec 59       	subi	r30, 0x9C	; 156
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	8c 93       	st	X, r24
						Local_s32Result/=10;
    2aec:	8e 01       	movw	r16, r28
    2aee:	0b 59       	subi	r16, 0x9B	; 155
    2af0:	1f 4f       	sbci	r17, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	eb 59       	subi	r30, 0x9B	; 155
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	2a e0       	ldi	r18, 0x0A	; 10
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	b9 01       	movw	r22, r18
    2b02:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    2b06:	cb 01       	movw	r24, r22
    2b08:	f8 01       	movw	r30, r16
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	80 83       	st	Z, r24
				Local_s8DivisionCounter=0;
				}
				else
				{
					Local_s32Result=(((Local_s8Num1)*100)/Local_s8Num2);
					while(Local_s32Result>0)
    2b0e:	fe 01       	movw	r30, r28
    2b10:	eb 59       	subi	r30, 0x9B	; 155
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	80 81       	ld	r24, Z
    2b16:	91 81       	ldd	r25, Z+1	; 0x01
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	29 f6       	brne	.-118    	; 0x2aa6 <main+0xffe>
					{
						Local_chDivisionRes[Local_s8DivisionCounter]=Local_s32Result%10;
						Local_s8DivisionCounter++;
						Local_s32Result/=10;
					}
					CLCD_voidSendData('0');
    2b1c:	80 e3       	ldi	r24, 0x30	; 48
    2b1e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendData('.');
    2b22:	8e e2       	ldi	r24, 0x2E	; 46
    2b24:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
					CLCD_voidSendNumber(Local_chDivisionRes[1]);
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ea 58       	subi	r30, 0x8A	; 138
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	81 81       	ldd	r24, Z+1	; 0x01
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e0       	ldi	r26, 0x00	; 0
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
					CLCD_voidSendNumber(Local_chDivisionRes[0]);
    2b40:	fe 01       	movw	r30, r28
    2b42:	ea 58       	subi	r30, 0x8A	; 138
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e0       	ldi	r26, 0x00	; 0
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
					Local_s8DivisionCounter=0;
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ec 59       	subi	r30, 0x9C	; 156
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	10 82       	st	Z, r1
    2b60:	70 c0       	rjmp	.+224    	; 0x2c42 <main+0x119a>
				}
			}
			else if(Local_u8Operator=='+')
    2b62:	fe 01       	movw	r30, r28
    2b64:	e4 59       	subi	r30, 0x94	; 148
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 81       	ld	r24, Z
    2b6a:	8b 32       	cpi	r24, 0x2B	; 43
    2b6c:	d9 f4       	brne	.+54     	; 0x2ba4 <main+0x10fc>
			{
				Local_s8Result=Local_s8Num1+Local_s8Num2;
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e2 59       	subi	r30, 0x92	; 146
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	90 81       	ld	r25, Z
    2b76:	fe 01       	movw	r30, r28
    2b78:	e8 59       	subi	r30, 0x98	; 152
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	89 0f       	add	r24, r25
    2b80:	fe 01       	movw	r30, r28
    2b82:	e9 59       	subi	r30, 0x99	; 153
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 83       	st	Z, r24
				CLCD_voidSendNumber(Local_s8Result);
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e9 59       	subi	r30, 0x99	; 153
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	80 81       	ld	r24, Z
    2b90:	99 27       	eor	r25, r25
    2b92:	87 fd       	sbrc	r24, 7
    2b94:	90 95       	com	r25
    2b96:	a9 2f       	mov	r26, r25
    2b98:	b9 2f       	mov	r27, r25
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2ba2:	4f c0       	rjmp	.+158    	; 0x2c42 <main+0x119a>
			}
			else if(Local_u8Operator=='-')
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e4 59       	subi	r30, 0x94	; 148
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	8d 32       	cpi	r24, 0x2D	; 45
    2bae:	e9 f4       	brne	.+58     	; 0x2bea <main+0x1142>
			{
				Local_s8Result=Local_s8Num1-Local_s8Num2;
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e2 59       	subi	r30, 0x92	; 146
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	90 81       	ld	r25, Z
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e8 59       	subi	r30, 0x98	; 152
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	f9 2f       	mov	r31, r25
    2bc2:	f8 1b       	sub	r31, r24
    2bc4:	8f 2f       	mov	r24, r31
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e9 59       	subi	r30, 0x99	; 153
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 83       	st	Z, r24
				CLCD_voidSendNumber(Local_s8Result);
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e9 59       	subi	r30, 0x99	; 153
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	99 27       	eor	r25, r25
    2bd8:	87 fd       	sbrc	r24, 7
    2bda:	90 95       	com	r25
    2bdc:	a9 2f       	mov	r26, r25
    2bde:	b9 2f       	mov	r27, r25
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
    2be8:	2c c0       	rjmp	.+88     	; 0x2c42 <main+0x119a>
			}
			else if(Local_u8Operator=='*')
    2bea:	fe 01       	movw	r30, r28
    2bec:	e4 59       	subi	r30, 0x94	; 148
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	8a 32       	cpi	r24, 0x2A	; 42
    2bf4:	31 f5       	brne	.+76     	; 0x2c42 <main+0x119a>
			{
				Local_s8Result=Local_s8Num1*Local_s8Num2;
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e2 59       	subi	r30, 0x92	; 146
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	9e 01       	movw	r18, r28
    2bfe:	28 59       	subi	r18, 0x98	; 152
    2c00:	3f 4f       	sbci	r19, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	91 81       	ldd	r25, Z+1	; 0x01
    2c06:	a2 81       	ldd	r26, Z+2	; 0x02
    2c08:	b3 81       	ldd	r27, Z+3	; 0x03
    2c0a:	f9 01       	movw	r30, r18
    2c0c:	20 81       	ld	r18, Z
    2c0e:	31 81       	ldd	r19, Z+1	; 0x01
    2c10:	42 81       	ldd	r20, Z+2	; 0x02
    2c12:	53 81       	ldd	r21, Z+3	; 0x03
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsi3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	fe 01       	movw	r30, r28
    2c22:	e9 59       	subi	r30, 0x99	; 153
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 83       	st	Z, r24
				CLCD_voidSendNumber(Local_s8Result);
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e9 59       	subi	r30, 0x99	; 153
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	99 27       	eor	r25, r25
    2c32:	87 fd       	sbrc	r24, 7
    2c34:	90 95       	com	r25
    2c36:	a9 2f       	mov	r26, r25
    2c38:	b9 2f       	mov	r27, r25
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 67 07 	call	0xece	; 0xece <CLCD_voidSendNumber>
			}
			CLCD_voidGoToXY(0,1);
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2c4a:	80 e2       	ldi	r24, 0x20	; 32
    2c4c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidGoToXY(1,1);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	61 e0       	ldi	r22, 0x01	; 1
    2c54:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2c58:	80 e2       	ldi	r24, 0x20	; 32
    2c5a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
			CLCD_voidGoToXY(2,1);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	61 e0       	ldi	r22, 0x01	; 1
    2c62:	0e 94 29 08 	call	0x1052	; 0x1052 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2c66:	80 e2       	ldi	r24, 0x20	; 32
    2c68:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <CLCD_voidSendData>
    2c6c:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <main+0x198>
		}
		else
		{
			Local_u8EnterCounter=0;
    2c70:	fe 01       	movw	r30, r28
    2c72:	ed 59       	subi	r30, 0x9D	; 157
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	10 82       	st	Z, r1
    2c78:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <main+0x198>

00002c7c <__mulsi3>:
    2c7c:	62 9f       	mul	r22, r18
    2c7e:	d0 01       	movw	r26, r0
    2c80:	73 9f       	mul	r23, r19
    2c82:	f0 01       	movw	r30, r0
    2c84:	82 9f       	mul	r24, r18
    2c86:	e0 0d       	add	r30, r0
    2c88:	f1 1d       	adc	r31, r1
    2c8a:	64 9f       	mul	r22, r20
    2c8c:	e0 0d       	add	r30, r0
    2c8e:	f1 1d       	adc	r31, r1
    2c90:	92 9f       	mul	r25, r18
    2c92:	f0 0d       	add	r31, r0
    2c94:	83 9f       	mul	r24, r19
    2c96:	f0 0d       	add	r31, r0
    2c98:	74 9f       	mul	r23, r20
    2c9a:	f0 0d       	add	r31, r0
    2c9c:	65 9f       	mul	r22, r21
    2c9e:	f0 0d       	add	r31, r0
    2ca0:	99 27       	eor	r25, r25
    2ca2:	72 9f       	mul	r23, r18
    2ca4:	b0 0d       	add	r27, r0
    2ca6:	e1 1d       	adc	r30, r1
    2ca8:	f9 1f       	adc	r31, r25
    2caa:	63 9f       	mul	r22, r19
    2cac:	b0 0d       	add	r27, r0
    2cae:	e1 1d       	adc	r30, r1
    2cb0:	f9 1f       	adc	r31, r25
    2cb2:	bd 01       	movw	r22, r26
    2cb4:	cf 01       	movw	r24, r30
    2cb6:	11 24       	eor	r1, r1
    2cb8:	08 95       	ret

00002cba <__udivmodhi4>:
    2cba:	aa 1b       	sub	r26, r26
    2cbc:	bb 1b       	sub	r27, r27
    2cbe:	51 e1       	ldi	r21, 0x11	; 17
    2cc0:	07 c0       	rjmp	.+14     	; 0x2cd0 <__udivmodhi4_ep>

00002cc2 <__udivmodhi4_loop>:
    2cc2:	aa 1f       	adc	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	a6 17       	cp	r26, r22
    2cc8:	b7 07       	cpc	r27, r23
    2cca:	10 f0       	brcs	.+4      	; 0x2cd0 <__udivmodhi4_ep>
    2ccc:	a6 1b       	sub	r26, r22
    2cce:	b7 0b       	sbc	r27, r23

00002cd0 <__udivmodhi4_ep>:
    2cd0:	88 1f       	adc	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	5a 95       	dec	r21
    2cd6:	a9 f7       	brne	.-22     	; 0x2cc2 <__udivmodhi4_loop>
    2cd8:	80 95       	com	r24
    2cda:	90 95       	com	r25
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	08 95       	ret

00002ce2 <__divmodsi4>:
    2ce2:	97 fb       	bst	r25, 7
    2ce4:	09 2e       	mov	r0, r25
    2ce6:	05 26       	eor	r0, r21
    2ce8:	0e d0       	rcall	.+28     	; 0x2d06 <__divmodsi4_neg1>
    2cea:	57 fd       	sbrc	r21, 7
    2cec:	04 d0       	rcall	.+8      	; 0x2cf6 <__divmodsi4_neg2>
    2cee:	14 d0       	rcall	.+40     	; 0x2d18 <__udivmodsi4>
    2cf0:	0a d0       	rcall	.+20     	; 0x2d06 <__divmodsi4_neg1>
    2cf2:	00 1c       	adc	r0, r0
    2cf4:	38 f4       	brcc	.+14     	; 0x2d04 <__divmodsi4_exit>

00002cf6 <__divmodsi4_neg2>:
    2cf6:	50 95       	com	r21
    2cf8:	40 95       	com	r20
    2cfa:	30 95       	com	r19
    2cfc:	21 95       	neg	r18
    2cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2d00:	4f 4f       	sbci	r20, 0xFF	; 255
    2d02:	5f 4f       	sbci	r21, 0xFF	; 255

00002d04 <__divmodsi4_exit>:
    2d04:	08 95       	ret

00002d06 <__divmodsi4_neg1>:
    2d06:	f6 f7       	brtc	.-4      	; 0x2d04 <__divmodsi4_exit>
    2d08:	90 95       	com	r25
    2d0a:	80 95       	com	r24
    2d0c:	70 95       	com	r23
    2d0e:	61 95       	neg	r22
    2d10:	7f 4f       	sbci	r23, 0xFF	; 255
    2d12:	8f 4f       	sbci	r24, 0xFF	; 255
    2d14:	9f 4f       	sbci	r25, 0xFF	; 255
    2d16:	08 95       	ret

00002d18 <__udivmodsi4>:
    2d18:	a1 e2       	ldi	r26, 0x21	; 33
    2d1a:	1a 2e       	mov	r1, r26
    2d1c:	aa 1b       	sub	r26, r26
    2d1e:	bb 1b       	sub	r27, r27
    2d20:	fd 01       	movw	r30, r26
    2d22:	0d c0       	rjmp	.+26     	; 0x2d3e <__udivmodsi4_ep>

00002d24 <__udivmodsi4_loop>:
    2d24:	aa 1f       	adc	r26, r26
    2d26:	bb 1f       	adc	r27, r27
    2d28:	ee 1f       	adc	r30, r30
    2d2a:	ff 1f       	adc	r31, r31
    2d2c:	a2 17       	cp	r26, r18
    2d2e:	b3 07       	cpc	r27, r19
    2d30:	e4 07       	cpc	r30, r20
    2d32:	f5 07       	cpc	r31, r21
    2d34:	20 f0       	brcs	.+8      	; 0x2d3e <__udivmodsi4_ep>
    2d36:	a2 1b       	sub	r26, r18
    2d38:	b3 0b       	sbc	r27, r19
    2d3a:	e4 0b       	sbc	r30, r20
    2d3c:	f5 0b       	sbc	r31, r21

00002d3e <__udivmodsi4_ep>:
    2d3e:	66 1f       	adc	r22, r22
    2d40:	77 1f       	adc	r23, r23
    2d42:	88 1f       	adc	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	1a 94       	dec	r1
    2d48:	69 f7       	brne	.-38     	; 0x2d24 <__udivmodsi4_loop>
    2d4a:	60 95       	com	r22
    2d4c:	70 95       	com	r23
    2d4e:	80 95       	com	r24
    2d50:	90 95       	com	r25
    2d52:	9b 01       	movw	r18, r22
    2d54:	ac 01       	movw	r20, r24
    2d56:	bd 01       	movw	r22, r26
    2d58:	cf 01       	movw	r24, r30
    2d5a:	08 95       	ret

00002d5c <__prologue_saves__>:
    2d5c:	2f 92       	push	r2
    2d5e:	3f 92       	push	r3
    2d60:	4f 92       	push	r4
    2d62:	5f 92       	push	r5
    2d64:	6f 92       	push	r6
    2d66:	7f 92       	push	r7
    2d68:	8f 92       	push	r8
    2d6a:	9f 92       	push	r9
    2d6c:	af 92       	push	r10
    2d6e:	bf 92       	push	r11
    2d70:	cf 92       	push	r12
    2d72:	df 92       	push	r13
    2d74:	ef 92       	push	r14
    2d76:	ff 92       	push	r15
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	ca 1b       	sub	r28, r26
    2d86:	db 0b       	sbc	r29, r27
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	09 94       	ijmp

00002d94 <__epilogue_restores__>:
    2d94:	2a 88       	ldd	r2, Y+18	; 0x12
    2d96:	39 88       	ldd	r3, Y+17	; 0x11
    2d98:	48 88       	ldd	r4, Y+16	; 0x10
    2d9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2da4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2da6:	b9 84       	ldd	r11, Y+9	; 0x09
    2da8:	c8 84       	ldd	r12, Y+8	; 0x08
    2daa:	df 80       	ldd	r13, Y+7	; 0x07
    2dac:	ee 80       	ldd	r14, Y+6	; 0x06
    2dae:	fd 80       	ldd	r15, Y+5	; 0x05
    2db0:	0c 81       	ldd	r16, Y+4	; 0x04
    2db2:	1b 81       	ldd	r17, Y+3	; 0x03
    2db4:	aa 81       	ldd	r26, Y+2	; 0x02
    2db6:	b9 81       	ldd	r27, Y+1	; 0x01
    2db8:	ce 0f       	add	r28, r30
    2dba:	d1 1d       	adc	r29, r1
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	ed 01       	movw	r28, r26
    2dc8:	08 95       	ret

00002dca <_exit>:
    2dca:	f8 94       	cli

00002dcc <__stop_program>:
    2dcc:	ff cf       	rjmp	.-2      	; 0x2dcc <__stop_program>
